
FINAL.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004a82  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00004a82  00004b16  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000042  00800088  00800088  00004b3e  2**0
                  ALLOC
  3 .stab         00004b3c  00000000  00000000  00004b40  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019a1  00000000  00000000  0000967c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  0000b01d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001ad  00000000  00000000  0000b19d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000022c4  00000000  00000000  0000b34a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000125b  00000000  00000000  0000d60e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001055  00000000  00000000  0000e869  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000f8c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ca  00000000  00000000  0000fa60  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000008ca  00000000  00000000  0000fd2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 03 12 	jmp	0x2406	; 0x2406 <__vector_1>
       8:	0c 94 30 12 	jmp	0x2460	; 0x2460 <__vector_2>
       c:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__vector_3>
      10:	0c 94 5a 15 	jmp	0x2ab4	; 0x2ab4 <__vector_4>
      14:	0c 94 87 15 	jmp	0x2b0e	; 0x2b0e <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__vector_10>
      2c:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 07 18 	jmp	0x300e	; 0x300e <__vector_13>
      38:	0c 94 46 18 	jmp	0x308c	; 0x308c <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fa e4       	ldi	r31, 0x4A	; 74
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3c       	cpi	r26, 0xCA	; 202
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 d6 23 	call	0x47ac	; 0x47ac <main>
      8a:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae e7       	ldi	r26, 0x7E	; 126
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 08 25 	jmp	0x4a10	; 0x4a10 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8e e7       	ldi	r24, 0x7E	; 126
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 24 25 	jmp	0x4a48	; 0x4a48 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6e e7       	ldi	r22, 0x7E	; 126
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2c 25 	jmp	0x4a58	; 0x4a58 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

000008aa <__lesf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 14 25 	jmp	0x4a28	; 0x4a28 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__lesf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__lesf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 26 06 	call	0xc4c	; 0xc4c <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__lesf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 30 25 	jmp	0x4a60	; 0x4a60 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 ae 05 	call	0xb5c	; 0xb5c <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x20>

000009b2 <__pack_f>:
     9b2:	df 92       	push	r13
     9b4:	ef 92       	push	r14
     9b6:	ff 92       	push	r15
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	fc 01       	movw	r30, r24
     9be:	e4 80       	ldd	r14, Z+4	; 0x04
     9c0:	f5 80       	ldd	r15, Z+5	; 0x05
     9c2:	06 81       	ldd	r16, Z+6	; 0x06
     9c4:	17 81       	ldd	r17, Z+7	; 0x07
     9c6:	d1 80       	ldd	r13, Z+1	; 0x01
     9c8:	80 81       	ld	r24, Z
     9ca:	82 30       	cpi	r24, 0x02	; 2
     9cc:	48 f4       	brcc	.+18     	; 0x9e0 <__pack_f+0x2e>
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e1       	ldi	r26, 0x10	; 16
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	e8 2a       	or	r14, r24
     9d8:	f9 2a       	or	r15, r25
     9da:	0a 2b       	or	r16, r26
     9dc:	1b 2b       	or	r17, r27
     9de:	a5 c0       	rjmp	.+330    	; 0xb2a <__pack_f+0x178>
     9e0:	84 30       	cpi	r24, 0x04	; 4
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <__pack_f+0x34>
     9e4:	9f c0       	rjmp	.+318    	; 0xb24 <__pack_f+0x172>
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <__pack_f+0x40>
     9ea:	ee 24       	eor	r14, r14
     9ec:	ff 24       	eor	r15, r15
     9ee:	87 01       	movw	r16, r14
     9f0:	05 c0       	rjmp	.+10     	; 0x9fc <__pack_f+0x4a>
     9f2:	e1 14       	cp	r14, r1
     9f4:	f1 04       	cpc	r15, r1
     9f6:	01 05       	cpc	r16, r1
     9f8:	11 05       	cpc	r17, r1
     9fa:	19 f4       	brne	.+6      	; 0xa02 <__pack_f+0x50>
     9fc:	e0 e0       	ldi	r30, 0x00	; 0
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	96 c0       	rjmp	.+300    	; 0xb2e <__pack_f+0x17c>
     a02:	62 81       	ldd	r22, Z+2	; 0x02
     a04:	73 81       	ldd	r23, Z+3	; 0x03
     a06:	9f ef       	ldi	r25, 0xFF	; 255
     a08:	62 38       	cpi	r22, 0x82	; 130
     a0a:	79 07       	cpc	r23, r25
     a0c:	0c f0       	brlt	.+2      	; 0xa10 <__pack_f+0x5e>
     a0e:	5b c0       	rjmp	.+182    	; 0xac6 <__pack_f+0x114>
     a10:	22 e8       	ldi	r18, 0x82	; 130
     a12:	3f ef       	ldi	r19, 0xFF	; 255
     a14:	26 1b       	sub	r18, r22
     a16:	37 0b       	sbc	r19, r23
     a18:	2a 31       	cpi	r18, 0x1A	; 26
     a1a:	31 05       	cpc	r19, r1
     a1c:	2c f0       	brlt	.+10     	; 0xa28 <__pack_f+0x76>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e0       	ldi	r21, 0x00	; 0
     a26:	2a c0       	rjmp	.+84     	; 0xa7c <__pack_f+0xca>
     a28:	b8 01       	movw	r22, r16
     a2a:	a7 01       	movw	r20, r14
     a2c:	02 2e       	mov	r0, r18
     a2e:	04 c0       	rjmp	.+8      	; 0xa38 <__pack_f+0x86>
     a30:	76 95       	lsr	r23
     a32:	67 95       	ror	r22
     a34:	57 95       	ror	r21
     a36:	47 95       	ror	r20
     a38:	0a 94       	dec	r0
     a3a:	d2 f7       	brpl	.-12     	; 0xa30 <__pack_f+0x7e>
     a3c:	81 e0       	ldi	r24, 0x01	; 1
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	a0 e0       	ldi	r26, 0x00	; 0
     a42:	b0 e0       	ldi	r27, 0x00	; 0
     a44:	04 c0       	rjmp	.+8      	; 0xa4e <__pack_f+0x9c>
     a46:	88 0f       	add	r24, r24
     a48:	99 1f       	adc	r25, r25
     a4a:	aa 1f       	adc	r26, r26
     a4c:	bb 1f       	adc	r27, r27
     a4e:	2a 95       	dec	r18
     a50:	d2 f7       	brpl	.-12     	; 0xa46 <__pack_f+0x94>
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	8e 21       	and	r24, r14
     a5a:	9f 21       	and	r25, r15
     a5c:	a0 23       	and	r26, r16
     a5e:	b1 23       	and	r27, r17
     a60:	00 97       	sbiw	r24, 0x00	; 0
     a62:	a1 05       	cpc	r26, r1
     a64:	b1 05       	cpc	r27, r1
     a66:	21 f0       	breq	.+8      	; 0xa70 <__pack_f+0xbe>
     a68:	81 e0       	ldi	r24, 0x01	; 1
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	a0 e0       	ldi	r26, 0x00	; 0
     a6e:	b0 e0       	ldi	r27, 0x00	; 0
     a70:	9a 01       	movw	r18, r20
     a72:	ab 01       	movw	r20, r22
     a74:	28 2b       	or	r18, r24
     a76:	39 2b       	or	r19, r25
     a78:	4a 2b       	or	r20, r26
     a7a:	5b 2b       	or	r21, r27
     a7c:	da 01       	movw	r26, r20
     a7e:	c9 01       	movw	r24, r18
     a80:	8f 77       	andi	r24, 0x7F	; 127
     a82:	90 70       	andi	r25, 0x00	; 0
     a84:	a0 70       	andi	r26, 0x00	; 0
     a86:	b0 70       	andi	r27, 0x00	; 0
     a88:	80 34       	cpi	r24, 0x40	; 64
     a8a:	91 05       	cpc	r25, r1
     a8c:	a1 05       	cpc	r26, r1
     a8e:	b1 05       	cpc	r27, r1
     a90:	39 f4       	brne	.+14     	; 0xaa0 <__pack_f+0xee>
     a92:	27 ff       	sbrs	r18, 7
     a94:	09 c0       	rjmp	.+18     	; 0xaa8 <__pack_f+0xf6>
     a96:	20 5c       	subi	r18, 0xC0	; 192
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	4f 4f       	sbci	r20, 0xFF	; 255
     a9c:	5f 4f       	sbci	r21, 0xFF	; 255
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__pack_f+0xf6>
     aa0:	21 5c       	subi	r18, 0xC1	; 193
     aa2:	3f 4f       	sbci	r19, 0xFF	; 255
     aa4:	4f 4f       	sbci	r20, 0xFF	; 255
     aa6:	5f 4f       	sbci	r21, 0xFF	; 255
     aa8:	e0 e0       	ldi	r30, 0x00	; 0
     aaa:	f0 e0       	ldi	r31, 0x00	; 0
     aac:	20 30       	cpi	r18, 0x00	; 0
     aae:	a0 e0       	ldi	r26, 0x00	; 0
     ab0:	3a 07       	cpc	r19, r26
     ab2:	a0 e0       	ldi	r26, 0x00	; 0
     ab4:	4a 07       	cpc	r20, r26
     ab6:	a0 e4       	ldi	r26, 0x40	; 64
     ab8:	5a 07       	cpc	r21, r26
     aba:	10 f0       	brcs	.+4      	; 0xac0 <__pack_f+0x10e>
     abc:	e1 e0       	ldi	r30, 0x01	; 1
     abe:	f0 e0       	ldi	r31, 0x00	; 0
     ac0:	79 01       	movw	r14, r18
     ac2:	8a 01       	movw	r16, r20
     ac4:	27 c0       	rjmp	.+78     	; 0xb14 <__pack_f+0x162>
     ac6:	60 38       	cpi	r22, 0x80	; 128
     ac8:	71 05       	cpc	r23, r1
     aca:	64 f5       	brge	.+88     	; 0xb24 <__pack_f+0x172>
     acc:	fb 01       	movw	r30, r22
     ace:	e1 58       	subi	r30, 0x81	; 129
     ad0:	ff 4f       	sbci	r31, 0xFF	; 255
     ad2:	d8 01       	movw	r26, r16
     ad4:	c7 01       	movw	r24, r14
     ad6:	8f 77       	andi	r24, 0x7F	; 127
     ad8:	90 70       	andi	r25, 0x00	; 0
     ada:	a0 70       	andi	r26, 0x00	; 0
     adc:	b0 70       	andi	r27, 0x00	; 0
     ade:	80 34       	cpi	r24, 0x40	; 64
     ae0:	91 05       	cpc	r25, r1
     ae2:	a1 05       	cpc	r26, r1
     ae4:	b1 05       	cpc	r27, r1
     ae6:	39 f4       	brne	.+14     	; 0xaf6 <__pack_f+0x144>
     ae8:	e7 fe       	sbrs	r14, 7
     aea:	0d c0       	rjmp	.+26     	; 0xb06 <__pack_f+0x154>
     aec:	80 e4       	ldi	r24, 0x40	; 64
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	a0 e0       	ldi	r26, 0x00	; 0
     af2:	b0 e0       	ldi	r27, 0x00	; 0
     af4:	04 c0       	rjmp	.+8      	; 0xafe <__pack_f+0x14c>
     af6:	8f e3       	ldi	r24, 0x3F	; 63
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	e8 0e       	add	r14, r24
     b00:	f9 1e       	adc	r15, r25
     b02:	0a 1f       	adc	r16, r26
     b04:	1b 1f       	adc	r17, r27
     b06:	17 ff       	sbrs	r17, 7
     b08:	05 c0       	rjmp	.+10     	; 0xb14 <__pack_f+0x162>
     b0a:	16 95       	lsr	r17
     b0c:	07 95       	ror	r16
     b0e:	f7 94       	ror	r15
     b10:	e7 94       	ror	r14
     b12:	31 96       	adiw	r30, 0x01	; 1
     b14:	87 e0       	ldi	r24, 0x07	; 7
     b16:	16 95       	lsr	r17
     b18:	07 95       	ror	r16
     b1a:	f7 94       	ror	r15
     b1c:	e7 94       	ror	r14
     b1e:	8a 95       	dec	r24
     b20:	d1 f7       	brne	.-12     	; 0xb16 <__pack_f+0x164>
     b22:	05 c0       	rjmp	.+10     	; 0xb2e <__pack_f+0x17c>
     b24:	ee 24       	eor	r14, r14
     b26:	ff 24       	eor	r15, r15
     b28:	87 01       	movw	r16, r14
     b2a:	ef ef       	ldi	r30, 0xFF	; 255
     b2c:	f0 e0       	ldi	r31, 0x00	; 0
     b2e:	6e 2f       	mov	r22, r30
     b30:	67 95       	ror	r22
     b32:	66 27       	eor	r22, r22
     b34:	67 95       	ror	r22
     b36:	90 2f       	mov	r25, r16
     b38:	9f 77       	andi	r25, 0x7F	; 127
     b3a:	d7 94       	ror	r13
     b3c:	dd 24       	eor	r13, r13
     b3e:	d7 94       	ror	r13
     b40:	8e 2f       	mov	r24, r30
     b42:	86 95       	lsr	r24
     b44:	49 2f       	mov	r20, r25
     b46:	46 2b       	or	r20, r22
     b48:	58 2f       	mov	r21, r24
     b4a:	5d 29       	or	r21, r13
     b4c:	b7 01       	movw	r22, r14
     b4e:	ca 01       	movw	r24, r20
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	ff 90       	pop	r15
     b56:	ef 90       	pop	r14
     b58:	df 90       	pop	r13
     b5a:	08 95       	ret

00000b5c <__unpack_f>:
     b5c:	fc 01       	movw	r30, r24
     b5e:	db 01       	movw	r26, r22
     b60:	40 81       	ld	r20, Z
     b62:	51 81       	ldd	r21, Z+1	; 0x01
     b64:	22 81       	ldd	r18, Z+2	; 0x02
     b66:	62 2f       	mov	r22, r18
     b68:	6f 77       	andi	r22, 0x7F	; 127
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	22 1f       	adc	r18, r18
     b6e:	22 27       	eor	r18, r18
     b70:	22 1f       	adc	r18, r18
     b72:	93 81       	ldd	r25, Z+3	; 0x03
     b74:	89 2f       	mov	r24, r25
     b76:	88 0f       	add	r24, r24
     b78:	82 2b       	or	r24, r18
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	99 1f       	adc	r25, r25
     b80:	99 27       	eor	r25, r25
     b82:	99 1f       	adc	r25, r25
     b84:	11 96       	adiw	r26, 0x01	; 1
     b86:	9c 93       	st	X, r25
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	21 15       	cp	r18, r1
     b8c:	31 05       	cpc	r19, r1
     b8e:	a9 f5       	brne	.+106    	; 0xbfa <__unpack_f+0x9e>
     b90:	41 15       	cp	r20, r1
     b92:	51 05       	cpc	r21, r1
     b94:	61 05       	cpc	r22, r1
     b96:	71 05       	cpc	r23, r1
     b98:	11 f4       	brne	.+4      	; 0xb9e <__unpack_f+0x42>
     b9a:	82 e0       	ldi	r24, 0x02	; 2
     b9c:	37 c0       	rjmp	.+110    	; 0xc0c <__unpack_f+0xb0>
     b9e:	82 e8       	ldi	r24, 0x82	; 130
     ba0:	9f ef       	ldi	r25, 0xFF	; 255
     ba2:	13 96       	adiw	r26, 0x03	; 3
     ba4:	9c 93       	st	X, r25
     ba6:	8e 93       	st	-X, r24
     ba8:	12 97       	sbiw	r26, 0x02	; 2
     baa:	9a 01       	movw	r18, r20
     bac:	ab 01       	movw	r20, r22
     bae:	67 e0       	ldi	r22, 0x07	; 7
     bb0:	22 0f       	add	r18, r18
     bb2:	33 1f       	adc	r19, r19
     bb4:	44 1f       	adc	r20, r20
     bb6:	55 1f       	adc	r21, r21
     bb8:	6a 95       	dec	r22
     bba:	d1 f7       	brne	.-12     	; 0xbb0 <__unpack_f+0x54>
     bbc:	83 e0       	ldi	r24, 0x03	; 3
     bbe:	8c 93       	st	X, r24
     bc0:	0d c0       	rjmp	.+26     	; 0xbdc <__unpack_f+0x80>
     bc2:	22 0f       	add	r18, r18
     bc4:	33 1f       	adc	r19, r19
     bc6:	44 1f       	adc	r20, r20
     bc8:	55 1f       	adc	r21, r21
     bca:	12 96       	adiw	r26, 0x02	; 2
     bcc:	8d 91       	ld	r24, X+
     bce:	9c 91       	ld	r25, X
     bd0:	13 97       	sbiw	r26, 0x03	; 3
     bd2:	01 97       	sbiw	r24, 0x01	; 1
     bd4:	13 96       	adiw	r26, 0x03	; 3
     bd6:	9c 93       	st	X, r25
     bd8:	8e 93       	st	-X, r24
     bda:	12 97       	sbiw	r26, 0x02	; 2
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	38 07       	cpc	r19, r24
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	48 07       	cpc	r20, r24
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	58 07       	cpc	r21, r24
     bea:	58 f3       	brcs	.-42     	; 0xbc2 <__unpack_f+0x66>
     bec:	14 96       	adiw	r26, 0x04	; 4
     bee:	2d 93       	st	X+, r18
     bf0:	3d 93       	st	X+, r19
     bf2:	4d 93       	st	X+, r20
     bf4:	5c 93       	st	X, r21
     bf6:	17 97       	sbiw	r26, 0x07	; 7
     bf8:	08 95       	ret
     bfa:	2f 3f       	cpi	r18, 0xFF	; 255
     bfc:	31 05       	cpc	r19, r1
     bfe:	79 f4       	brne	.+30     	; 0xc1e <__unpack_f+0xc2>
     c00:	41 15       	cp	r20, r1
     c02:	51 05       	cpc	r21, r1
     c04:	61 05       	cpc	r22, r1
     c06:	71 05       	cpc	r23, r1
     c08:	19 f4       	brne	.+6      	; 0xc10 <__unpack_f+0xb4>
     c0a:	84 e0       	ldi	r24, 0x04	; 4
     c0c:	8c 93       	st	X, r24
     c0e:	08 95       	ret
     c10:	64 ff       	sbrs	r22, 4
     c12:	03 c0       	rjmp	.+6      	; 0xc1a <__unpack_f+0xbe>
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	8c 93       	st	X, r24
     c18:	12 c0       	rjmp	.+36     	; 0xc3e <__unpack_f+0xe2>
     c1a:	1c 92       	st	X, r1
     c1c:	10 c0       	rjmp	.+32     	; 0xc3e <__unpack_f+0xe2>
     c1e:	2f 57       	subi	r18, 0x7F	; 127
     c20:	30 40       	sbci	r19, 0x00	; 0
     c22:	13 96       	adiw	r26, 0x03	; 3
     c24:	3c 93       	st	X, r19
     c26:	2e 93       	st	-X, r18
     c28:	12 97       	sbiw	r26, 0x02	; 2
     c2a:	83 e0       	ldi	r24, 0x03	; 3
     c2c:	8c 93       	st	X, r24
     c2e:	87 e0       	ldi	r24, 0x07	; 7
     c30:	44 0f       	add	r20, r20
     c32:	55 1f       	adc	r21, r21
     c34:	66 1f       	adc	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	8a 95       	dec	r24
     c3a:	d1 f7       	brne	.-12     	; 0xc30 <__unpack_f+0xd4>
     c3c:	70 64       	ori	r23, 0x40	; 64
     c3e:	14 96       	adiw	r26, 0x04	; 4
     c40:	4d 93       	st	X+, r20
     c42:	5d 93       	st	X+, r21
     c44:	6d 93       	st	X+, r22
     c46:	7c 93       	st	X, r23
     c48:	17 97       	sbiw	r26, 0x07	; 7
     c4a:	08 95       	ret

00000c4c <__fpcmp_parts_f>:
     c4c:	1f 93       	push	r17
     c4e:	dc 01       	movw	r26, r24
     c50:	fb 01       	movw	r30, r22
     c52:	9c 91       	ld	r25, X
     c54:	92 30       	cpi	r25, 0x02	; 2
     c56:	08 f4       	brcc	.+2      	; 0xc5a <__fpcmp_parts_f+0xe>
     c58:	47 c0       	rjmp	.+142    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c5a:	80 81       	ld	r24, Z
     c5c:	82 30       	cpi	r24, 0x02	; 2
     c5e:	08 f4       	brcc	.+2      	; 0xc62 <__fpcmp_parts_f+0x16>
     c60:	43 c0       	rjmp	.+134    	; 0xce8 <__fpcmp_parts_f+0x9c>
     c62:	94 30       	cpi	r25, 0x04	; 4
     c64:	51 f4       	brne	.+20     	; 0xc7a <__fpcmp_parts_f+0x2e>
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	1c 91       	ld	r17, X
     c6a:	84 30       	cpi	r24, 0x04	; 4
     c6c:	99 f5       	brne	.+102    	; 0xcd4 <__fpcmp_parts_f+0x88>
     c6e:	81 81       	ldd	r24, Z+1	; 0x01
     c70:	68 2f       	mov	r22, r24
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	61 1b       	sub	r22, r17
     c76:	71 09       	sbc	r23, r1
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <__fpcmp_parts_f+0xac>
     c7a:	84 30       	cpi	r24, 0x04	; 4
     c7c:	21 f0       	breq	.+8      	; 0xc86 <__fpcmp_parts_f+0x3a>
     c7e:	92 30       	cpi	r25, 0x02	; 2
     c80:	31 f4       	brne	.+12     	; 0xc8e <__fpcmp_parts_f+0x42>
     c82:	82 30       	cpi	r24, 0x02	; 2
     c84:	b9 f1       	breq	.+110    	; 0xcf4 <__fpcmp_parts_f+0xa8>
     c86:	81 81       	ldd	r24, Z+1	; 0x01
     c88:	88 23       	and	r24, r24
     c8a:	89 f1       	breq	.+98     	; 0xcee <__fpcmp_parts_f+0xa2>
     c8c:	2d c0       	rjmp	.+90     	; 0xce8 <__fpcmp_parts_f+0x9c>
     c8e:	11 96       	adiw	r26, 0x01	; 1
     c90:	1c 91       	ld	r17, X
     c92:	11 97       	sbiw	r26, 0x01	; 1
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	f1 f0       	breq	.+60     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c98:	81 81       	ldd	r24, Z+1	; 0x01
     c9a:	18 17       	cp	r17, r24
     c9c:	d9 f4       	brne	.+54     	; 0xcd4 <__fpcmp_parts_f+0x88>
     c9e:	12 96       	adiw	r26, 0x02	; 2
     ca0:	2d 91       	ld	r18, X+
     ca2:	3c 91       	ld	r19, X
     ca4:	13 97       	sbiw	r26, 0x03	; 3
     ca6:	82 81       	ldd	r24, Z+2	; 0x02
     ca8:	93 81       	ldd	r25, Z+3	; 0x03
     caa:	82 17       	cp	r24, r18
     cac:	93 07       	cpc	r25, r19
     cae:	94 f0       	brlt	.+36     	; 0xcd4 <__fpcmp_parts_f+0x88>
     cb0:	28 17       	cp	r18, r24
     cb2:	39 07       	cpc	r19, r25
     cb4:	bc f0       	brlt	.+46     	; 0xce4 <__fpcmp_parts_f+0x98>
     cb6:	14 96       	adiw	r26, 0x04	; 4
     cb8:	8d 91       	ld	r24, X+
     cba:	9d 91       	ld	r25, X+
     cbc:	0d 90       	ld	r0, X+
     cbe:	bc 91       	ld	r27, X
     cc0:	a0 2d       	mov	r26, r0
     cc2:	24 81       	ldd	r18, Z+4	; 0x04
     cc4:	35 81       	ldd	r19, Z+5	; 0x05
     cc6:	46 81       	ldd	r20, Z+6	; 0x06
     cc8:	57 81       	ldd	r21, Z+7	; 0x07
     cca:	28 17       	cp	r18, r24
     ccc:	39 07       	cpc	r19, r25
     cce:	4a 07       	cpc	r20, r26
     cd0:	5b 07       	cpc	r21, r27
     cd2:	18 f4       	brcc	.+6      	; 0xcda <__fpcmp_parts_f+0x8e>
     cd4:	11 23       	and	r17, r17
     cd6:	41 f0       	breq	.+16     	; 0xce8 <__fpcmp_parts_f+0x9c>
     cd8:	0a c0       	rjmp	.+20     	; 0xcee <__fpcmp_parts_f+0xa2>
     cda:	82 17       	cp	r24, r18
     cdc:	93 07       	cpc	r25, r19
     cde:	a4 07       	cpc	r26, r20
     ce0:	b5 07       	cpc	r27, r21
     ce2:	40 f4       	brcc	.+16     	; 0xcf4 <__fpcmp_parts_f+0xa8>
     ce4:	11 23       	and	r17, r17
     ce6:	19 f0       	breq	.+6      	; 0xcee <__fpcmp_parts_f+0xa2>
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	05 c0       	rjmp	.+10     	; 0xcf8 <__fpcmp_parts_f+0xac>
     cee:	6f ef       	ldi	r22, 0xFF	; 255
     cf0:	7f ef       	ldi	r23, 0xFF	; 255
     cf2:	02 c0       	rjmp	.+4      	; 0xcf8 <__fpcmp_parts_f+0xac>
     cf4:	60 e0       	ldi	r22, 0x00	; 0
     cf6:	70 e0       	ldi	r23, 0x00	; 0
     cf8:	cb 01       	movw	r24, r22
     cfa:	1f 91       	pop	r17
     cfc:	08 95       	ret

00000cfe <AnalogGenerator>:

static u8 Global_u8AnalogValue;
static u8 Global_u8PortNum;
static u8 Global_u8PinNum_1;
void AnalogGenerator(void)
{
     cfe:	df 93       	push	r29
     d00:	cf 93       	push	r28
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
     d06:	80 91 88 00 	lds	r24, 0x0088
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	80 93 88 00 	sts	0x0088, r24
	if(Local_u8Counter==Global_u8AnalogValue)
     d10:	90 91 88 00 	lds	r25, 0x0088
     d14:	80 91 89 00 	lds	r24, 0x0089
     d18:	98 17       	cp	r25, r24
     d1a:	49 f4       	brne	.+18     	; 0xd2e <AnalogGenerator+0x30>
	{
		DIO_voidSetPinValue(Global_u8PortNum,Global_u8PinNum_1,PIN_HIGH);
     d1c:	80 91 8a 00 	lds	r24, 0x008A
     d20:	90 91 8b 00 	lds	r25, 0x008B
     d24:	69 2f       	mov	r22, r25
     d26:	41 e0       	ldi	r20, 0x01	; 1
     d28:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
     d2c:	0e c0       	rjmp	.+28     	; 0xd4a <AnalogGenerator+0x4c>
	}
	else if(Local_u8Counter==20)
     d2e:	80 91 88 00 	lds	r24, 0x0088
     d32:	84 31       	cpi	r24, 0x14	; 20
     d34:	51 f4       	brne	.+20     	; 0xd4a <AnalogGenerator+0x4c>
	{
		Local_u8Counter=0;
     d36:	10 92 88 00 	sts	0x0088, r1
		DIO_voidSetPinValue(Global_u8PortNum,Global_u8PinNum_1,PIN_LOW);
     d3a:	80 91 8a 00 	lds	r24, 0x008A
     d3e:	90 91 8b 00 	lds	r25, 0x008B
     d42:	69 2f       	mov	r22, r25
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	}
}
     d4a:	cf 91       	pop	r28
     d4c:	df 91       	pop	r29
     d4e:	08 95       	ret

00000d50 <ANALOG_voidSendSignal>:
void ANALOG_voidSendSignal(u8 Copy_u8PortNum,u8 Copy_u8PinNum_1,u8 Copy_u8AnalogValue)
{
     d50:	df 93       	push	r29
     d52:	cf 93       	push	r28
     d54:	00 d0       	rcall	.+0      	; 0xd56 <ANALOG_voidSendSignal+0x6>
     d56:	0f 92       	push	r0
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	6a 83       	std	Y+2, r22	; 0x02
     d60:	4b 83       	std	Y+3, r20	; 0x03
	Global_u8AnalogValue=20-Copy_u8AnalogValue;
     d62:	94 e1       	ldi	r25, 0x14	; 20
     d64:	8b 81       	ldd	r24, Y+3	; 0x03
     d66:	29 2f       	mov	r18, r25
     d68:	28 1b       	sub	r18, r24
     d6a:	82 2f       	mov	r24, r18
     d6c:	80 93 89 00 	sts	0x0089, r24
	Global_u8PortNum=Copy_u8PortNum;
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	80 93 8a 00 	sts	0x008A, r24
	Global_u8PinNum_1=Copy_u8PinNum_1;
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	80 93 8b 00 	sts	0x008B, r24
	TIMER2_voidSetCmpValue(125);
     d7c:	8d e7       	ldi	r24, 0x7D	; 125
     d7e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <TIMER2_voidSetCmpValue>
	TIMER2_e_SetCallBackCMP(AnalogGenerator);
     d82:	8f e7       	ldi	r24, 0x7F	; 127
     d84:	96 e0       	ldi	r25, 0x06	; 6
     d86:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <TIMER2_e_SetCallBackCMP>
	TIMER2_voidInit();
     d8a:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <TIMER2_voidInit>
	GI_voidEnable();
     d8e:	0e 94 8a 12 	call	0x2514	; 0x2514 <GI_voidEnable>
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <CLCD_voidSendData>:
#include "CLCD_interface.h"
#include "CLCD_config.h"
#include <util/delay.h>

static void CLCD_voidSendData(u8 Copy_u8Data)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
     da6:	2f 97       	sbiw	r28, 0x0f	; 15
     da8:	0f b6       	in	r0, 0x3f	; 63
     daa:	f8 94       	cli
     dac:	de bf       	out	0x3e, r29	; 62
     dae:	0f be       	out	0x3f, r0	; 63
     db0:	cd bf       	out	0x3d, r28	; 61
     db2:	8f 87       	std	Y+15, r24	; 0x0f
	//RS=1 , RW=0
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_HIGH);
     db4:	83 e0       	ldi	r24, 0x03	; 3
     db6:	67 e0       	ldi	r22, 0x07	; 7
     db8:	41 e0       	ldi	r20, 0x01	; 1
     dba:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CTRL_PORT,RW,PIN_LOW);
     dbe:	83 e0       	ldi	r24, 0x03	; 3
     dc0:	66 e0       	ldi	r22, 0x06	; 6
     dc2:	40 e0       	ldi	r20, 0x00	; 0
     dc4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	//Set data to the required port
	DIO_voidSetPortValue(DATA_PORT,Copy_u8Data);
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	6f 85       	ldd	r22, Y+15	; 0x0f
     dcc:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_voidSetPortValue>
	//Enable pulse
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	65 e0       	ldi	r22, 0x05	; 5
     dd4:	41 e0       	ldi	r20, 0x01	; 1
     dd6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	a0 e8       	ldi	r26, 0x80	; 128
     de0:	bf e3       	ldi	r27, 0x3F	; 63
     de2:	8b 87       	std	Y+11, r24	; 0x0b
     de4:	9c 87       	std	Y+12, r25	; 0x0c
     de6:	ad 87       	std	Y+13, r26	; 0x0d
     de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dea:	6b 85       	ldd	r22, Y+11	; 0x0b
     dec:	7c 85       	ldd	r23, Y+12	; 0x0c
     dee:	8d 85       	ldd	r24, Y+13	; 0x0d
     df0:	9e 85       	ldd	r25, Y+14	; 0x0e
     df2:	20 e0       	ldi	r18, 0x00	; 0
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	4a ef       	ldi	r20, 0xFA	; 250
     df8:	54 e4       	ldi	r21, 0x44	; 68
     dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dfe:	dc 01       	movw	r26, r24
     e00:	cb 01       	movw	r24, r22
     e02:	8f 83       	std	Y+7, r24	; 0x07
     e04:	98 87       	std	Y+8, r25	; 0x08
     e06:	a9 87       	std	Y+9, r26	; 0x09
     e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e0a:	6f 81       	ldd	r22, Y+7	; 0x07
     e0c:	78 85       	ldd	r23, Y+8	; 0x08
     e0e:	89 85       	ldd	r24, Y+9	; 0x09
     e10:	9a 85       	ldd	r25, Y+10	; 0x0a
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	5f e3       	ldi	r21, 0x3F	; 63
     e1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     e1e:	88 23       	and	r24, r24
     e20:	2c f4       	brge	.+10     	; 0xe2c <CLCD_voidSendData+0x8e>
		__ticks = 1;
     e22:	81 e0       	ldi	r24, 0x01	; 1
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	9e 83       	std	Y+6, r25	; 0x06
     e28:	8d 83       	std	Y+5, r24	; 0x05
     e2a:	3f c0       	rjmp	.+126    	; 0xeaa <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     e2c:	6f 81       	ldd	r22, Y+7	; 0x07
     e2e:	78 85       	ldd	r23, Y+8	; 0x08
     e30:	89 85       	ldd	r24, Y+9	; 0x09
     e32:	9a 85       	ldd	r25, Y+10	; 0x0a
     e34:	20 e0       	ldi	r18, 0x00	; 0
     e36:	3f ef       	ldi	r19, 0xFF	; 255
     e38:	4f e7       	ldi	r20, 0x7F	; 127
     e3a:	57 e4       	ldi	r21, 0x47	; 71
     e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     e40:	18 16       	cp	r1, r24
     e42:	4c f5       	brge	.+82     	; 0xe96 <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	40 e2       	ldi	r20, 0x20	; 32
     e52:	51 e4       	ldi	r21, 0x41	; 65
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	bc 01       	movw	r22, r24
     e5e:	cd 01       	movw	r24, r26
     e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e64:	dc 01       	movw	r26, r24
     e66:	cb 01       	movw	r24, r22
     e68:	9e 83       	std	Y+6, r25	; 0x06
     e6a:	8d 83       	std	Y+5, r24	; 0x05
     e6c:	0f c0       	rjmp	.+30     	; 0xe8c <CLCD_voidSendData+0xee>
     e6e:	88 ec       	ldi	r24, 0xC8	; 200
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	9c 83       	std	Y+4, r25	; 0x04
     e74:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e76:	8b 81       	ldd	r24, Y+3	; 0x03
     e78:	9c 81       	ldd	r25, Y+4	; 0x04
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <CLCD_voidSendData+0xdc>
     e7e:	9c 83       	std	Y+4, r25	; 0x04
     e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e82:	8d 81       	ldd	r24, Y+5	; 0x05
     e84:	9e 81       	ldd	r25, Y+6	; 0x06
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	9e 83       	std	Y+6, r25	; 0x06
     e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e8c:	8d 81       	ldd	r24, Y+5	; 0x05
     e8e:	9e 81       	ldd	r25, Y+6	; 0x06
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	69 f7       	brne	.-38     	; 0xe6e <CLCD_voidSendData+0xd0>
     e94:	14 c0       	rjmp	.+40     	; 0xebe <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e96:	6f 81       	ldd	r22, Y+7	; 0x07
     e98:	78 85       	ldd	r23, Y+8	; 0x08
     e9a:	89 85       	ldd	r24, Y+9	; 0x09
     e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	8d 83       	std	Y+5, r24	; 0x05
     eaa:	8d 81       	ldd	r24, Y+5	; 0x05
     eac:	9e 81       	ldd	r25, Y+6	; 0x06
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	89 83       	std	Y+1, r24	; 0x01
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	9a 81       	ldd	r25, Y+2	; 0x02
     eb6:	01 97       	sbiw	r24, 0x01	; 1
     eb8:	f1 f7       	brne	.-4      	; 0xeb6 <CLCD_voidSendData+0x118>
     eba:	9a 83       	std	Y+2, r25	; 0x02
     ebc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	65 e0       	ldi	r22, 0x05	; 5
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
}
     ec8:	2f 96       	adiw	r28, 0x0f	; 15
     eca:	0f b6       	in	r0, 0x3f	; 63
     ecc:	f8 94       	cli
     ece:	de bf       	out	0x3e, r29	; 62
     ed0:	0f be       	out	0x3f, r0	; 63
     ed2:	cd bf       	out	0x3d, r28	; 61
     ed4:	cf 91       	pop	r28
     ed6:	df 91       	pop	r29
     ed8:	08 95       	ret

00000eda <CLCD_voidSendCommand>:
static void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     eda:	df 93       	push	r29
     edc:	cf 93       	push	r28
     ede:	cd b7       	in	r28, 0x3d	; 61
     ee0:	de b7       	in	r29, 0x3e	; 62
     ee2:	2f 97       	sbiw	r28, 0x0f	; 15
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	8f 87       	std	Y+15, r24	; 0x0f
	//RS=0 , RW=0
	DIO_voidSetPinValue(CTRL_PORT,RS,PIN_LOW);
     ef0:	83 e0       	ldi	r24, 0x03	; 3
     ef2:	67 e0       	ldi	r22, 0x07	; 7
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(CTRL_PORT,RW,PIN_LOW);
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	66 e0       	ldi	r22, 0x06	; 6
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	//Set data to the required port
	DIO_voidSetPortValue(DATA_PORT,Copy_u8Command);
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	6f 85       	ldd	r22, Y+15	; 0x0f
     f08:	0e 94 a3 0b 	call	0x1746	; 0x1746 <DIO_voidSetPortValue>
	//Enable pulse
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_HIGH);
     f0c:	83 e0       	ldi	r24, 0x03	; 3
     f0e:	65 e0       	ldi	r22, 0x05	; 5
     f10:	41 e0       	ldi	r20, 0x01	; 1
     f12:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e8       	ldi	r26, 0x80	; 128
     f1c:	bf e3       	ldi	r27, 0x3F	; 63
     f1e:	8b 87       	std	Y+11, r24	; 0x0b
     f20:	9c 87       	std	Y+12, r25	; 0x0c
     f22:	ad 87       	std	Y+13, r26	; 0x0d
     f24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f26:	6b 85       	ldd	r22, Y+11	; 0x0b
     f28:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	4a ef       	ldi	r20, 0xFA	; 250
     f34:	54 e4       	ldi	r21, 0x44	; 68
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	8f 83       	std	Y+7, r24	; 0x07
     f40:	98 87       	std	Y+8, r25	; 0x08
     f42:	a9 87       	std	Y+9, r26	; 0x09
     f44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	40 e8       	ldi	r20, 0x80	; 128
     f54:	5f e3       	ldi	r21, 0x3F	; 63
     f56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f5a:	88 23       	and	r24, r24
     f5c:	2c f4       	brge	.+10     	; 0xf68 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     f5e:	81 e0       	ldi	r24, 0x01	; 1
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	9e 83       	std	Y+6, r25	; 0x06
     f64:	8d 83       	std	Y+5, r24	; 0x05
     f66:	3f c0       	rjmp	.+126    	; 0xfe6 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     f68:	6f 81       	ldd	r22, Y+7	; 0x07
     f6a:	78 85       	ldd	r23, Y+8	; 0x08
     f6c:	89 85       	ldd	r24, Y+9	; 0x09
     f6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f70:	20 e0       	ldi	r18, 0x00	; 0
     f72:	3f ef       	ldi	r19, 0xFF	; 255
     f74:	4f e7       	ldi	r20, 0x7F	; 127
     f76:	57 e4       	ldi	r21, 0x47	; 71
     f78:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f7c:	18 16       	cp	r1, r24
     f7e:	4c f5       	brge	.+82     	; 0xfd2 <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f80:	6b 85       	ldd	r22, Y+11	; 0x0b
     f82:	7c 85       	ldd	r23, Y+12	; 0x0c
     f84:	8d 85       	ldd	r24, Y+13	; 0x0d
     f86:	9e 85       	ldd	r25, Y+14	; 0x0e
     f88:	20 e0       	ldi	r18, 0x00	; 0
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	40 e2       	ldi	r20, 0x20	; 32
     f8e:	51 e4       	ldi	r21, 0x41	; 65
     f90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f94:	dc 01       	movw	r26, r24
     f96:	cb 01       	movw	r24, r22
     f98:	bc 01       	movw	r22, r24
     f9a:	cd 01       	movw	r24, r26
     f9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fa0:	dc 01       	movw	r26, r24
     fa2:	cb 01       	movw	r24, r22
     fa4:	9e 83       	std	Y+6, r25	; 0x06
     fa6:	8d 83       	std	Y+5, r24	; 0x05
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <CLCD_voidSendCommand+0xee>
     faa:	88 ec       	ldi	r24, 0xC8	; 200
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	8b 81       	ldd	r24, Y+3	; 0x03
     fb4:	9c 81       	ldd	r25, Y+4	; 0x04
     fb6:	01 97       	sbiw	r24, 0x01	; 1
     fb8:	f1 f7       	brne	.-4      	; 0xfb6 <CLCD_voidSendCommand+0xdc>
     fba:	9c 83       	std	Y+4, r25	; 0x04
     fbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fbe:	8d 81       	ldd	r24, Y+5	; 0x05
     fc0:	9e 81       	ldd	r25, Y+6	; 0x06
     fc2:	01 97       	sbiw	r24, 0x01	; 1
     fc4:	9e 83       	std	Y+6, r25	; 0x06
     fc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	00 97       	sbiw	r24, 0x00	; 0
     fce:	69 f7       	brne	.-38     	; 0xfaa <CLCD_voidSendCommand+0xd0>
     fd0:	14 c0       	rjmp	.+40     	; 0xffa <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd2:	6f 81       	ldd	r22, Y+7	; 0x07
     fd4:	78 85       	ldd	r23, Y+8	; 0x08
     fd6:	89 85       	ldd	r24, Y+9	; 0x09
     fd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     fda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	9e 83       	std	Y+6, r25	; 0x06
     fe4:	8d 83       	std	Y+5, r24	; 0x05
     fe6:	8d 81       	ldd	r24, Y+5	; 0x05
     fe8:	9e 81       	ldd	r25, Y+6	; 0x06
     fea:	9a 83       	std	Y+2, r25	; 0x02
     fec:	89 83       	std	Y+1, r24	; 0x01
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <CLCD_voidSendCommand+0x118>
     ff6:	9a 83       	std	Y+2, r25	; 0x02
     ff8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_voidSetPinValue(CTRL_PORT,EN,PIN_LOW);
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	65 e0       	ldi	r22, 0x05	; 5
     ffe:	40 e0       	ldi	r20, 0x00	; 0
    1000:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
}
    1004:	2f 96       	adiw	r28, 0x0f	; 15
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <CLCD_voidInit>:
void CLCD_voidInit(void)
{
    1016:	df 93       	push	r29
    1018:	cf 93       	push	r28
    101a:	cd b7       	in	r28, 0x3d	; 61
    101c:	de b7       	in	r29, 0x3e	; 62
    101e:	e8 97       	sbiw	r28, 0x38	; 56
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	f8 94       	cli
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	0f be       	out	0x3f, r0	; 63
    1028:	cd bf       	out	0x3d, r28	; 61
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	a0 e2       	ldi	r26, 0x20	; 32
    1030:	b2 e4       	ldi	r27, 0x42	; 66
    1032:	8d ab       	std	Y+53, r24	; 0x35
    1034:	9e ab       	std	Y+54, r25	; 0x36
    1036:	af ab       	std	Y+55, r26	; 0x37
    1038:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	6d a9       	ldd	r22, Y+53	; 0x35
    103c:	7e a9       	ldd	r23, Y+54	; 0x36
    103e:	8f a9       	ldd	r24, Y+55	; 0x37
    1040:	98 ad       	ldd	r25, Y+56	; 0x38
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	89 ab       	std	Y+49, r24	; 0x31
    1054:	9a ab       	std	Y+50, r25	; 0x32
    1056:	ab ab       	std	Y+51, r26	; 0x33
    1058:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    105a:	69 a9       	ldd	r22, Y+49	; 0x31
    105c:	7a a9       	ldd	r23, Y+50	; 0x32
    105e:	8b a9       	ldd	r24, Y+51	; 0x33
    1060:	9c a9       	ldd	r25, Y+52	; 0x34
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <CLCD_voidInit+0x66>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	98 ab       	std	Y+48, r25	; 0x30
    1078:	8f a7       	std	Y+47, r24	; 0x2f
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    107c:	69 a9       	ldd	r22, Y+49	; 0x31
    107e:	7a a9       	ldd	r23, Y+50	; 0x32
    1080:	8b a9       	ldd	r24, Y+51	; 0x33
    1082:	9c a9       	ldd	r25, Y+52	; 0x34
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	6d a9       	ldd	r22, Y+53	; 0x35
    1096:	7e a9       	ldd	r23, Y+54	; 0x36
    1098:	8f a9       	ldd	r24, Y+55	; 0x37
    109a:	98 ad       	ldd	r25, Y+56	; 0x38
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	98 ab       	std	Y+48, r25	; 0x30
    10ba:	8f a7       	std	Y+47, r24	; 0x2f
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <CLCD_voidInit+0xc6>
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	9e a7       	std	Y+46, r25	; 0x2e
    10c4:	8d a7       	std	Y+45, r24	; 0x2d
    10c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    10c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <CLCD_voidInit+0xb4>
    10ce:	9e a7       	std	Y+46, r25	; 0x2e
    10d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d4:	98 a9       	ldd	r25, Y+48	; 0x30
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	98 ab       	std	Y+48, r25	; 0x30
    10da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10de:	98 a9       	ldd	r25, Y+48	; 0x30
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <CLCD_voidInit+0xa8>
    10e4:	14 c0       	rjmp	.+40     	; 0x110e <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	69 a9       	ldd	r22, Y+49	; 0x31
    10e8:	7a a9       	ldd	r23, Y+50	; 0x32
    10ea:	8b a9       	ldd	r24, Y+51	; 0x33
    10ec:	9c a9       	ldd	r25, Y+52	; 0x34
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	98 ab       	std	Y+48, r25	; 0x30
    10f8:	8f a7       	std	Y+47, r24	; 0x2f
    10fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fc:	98 a9       	ldd	r25, Y+48	; 0x30
    10fe:	9c a7       	std	Y+44, r25	; 0x2c
    1100:	8b a7       	std	Y+43, r24	; 0x2b
    1102:	8b a5       	ldd	r24, Y+43	; 0x2b
    1104:	9c a5       	ldd	r25, Y+44	; 0x2c
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <CLCD_voidInit+0xf0>
    110a:	9c a7       	std	Y+44, r25	; 0x2c
    110c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	CLCD_voidSendCommand(0b00111000);
    110e:	88 e3       	ldi	r24, 0x38	; 56
    1110:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a0 e8       	ldi	r26, 0x80	; 128
    111a:	bf e3       	ldi	r27, 0x3F	; 63
    111c:	8f a3       	std	Y+39, r24	; 0x27
    111e:	98 a7       	std	Y+40, r25	; 0x28
    1120:	a9 a7       	std	Y+41, r26	; 0x29
    1122:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	6f a1       	ldd	r22, Y+39	; 0x27
    1126:	78 a5       	ldd	r23, Y+40	; 0x28
    1128:	89 a5       	ldd	r24, Y+41	; 0x29
    112a:	9a a5       	ldd	r25, Y+42	; 0x2a
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	4a ef       	ldi	r20, 0xFA	; 250
    1132:	54 e4       	ldi	r21, 0x44	; 68
    1134:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	8b a3       	std	Y+35, r24	; 0x23
    113e:	9c a3       	std	Y+36, r25	; 0x24
    1140:	ad a3       	std	Y+37, r26	; 0x25
    1142:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1144:	6b a1       	ldd	r22, Y+35	; 0x23
    1146:	7c a1       	ldd	r23, Y+36	; 0x24
    1148:	8d a1       	ldd	r24, Y+37	; 0x25
    114a:	9e a1       	ldd	r25, Y+38	; 0x26
    114c:	20 e0       	ldi	r18, 0x00	; 0
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	40 e8       	ldi	r20, 0x80	; 128
    1152:	5f e3       	ldi	r21, 0x3F	; 63
    1154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1158:	88 23       	and	r24, r24
    115a:	2c f4       	brge	.+10     	; 0x1166 <CLCD_voidInit+0x150>
		__ticks = 1;
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	9a a3       	std	Y+34, r25	; 0x22
    1162:	89 a3       	std	Y+33, r24	; 0x21
    1164:	3f c0       	rjmp	.+126    	; 0x11e4 <CLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
    1166:	6b a1       	ldd	r22, Y+35	; 0x23
    1168:	7c a1       	ldd	r23, Y+36	; 0x24
    116a:	8d a1       	ldd	r24, Y+37	; 0x25
    116c:	9e a1       	ldd	r25, Y+38	; 0x26
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	3f ef       	ldi	r19, 0xFF	; 255
    1172:	4f e7       	ldi	r20, 0x7F	; 127
    1174:	57 e4       	ldi	r21, 0x47	; 71
    1176:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    117a:	18 16       	cp	r1, r24
    117c:	4c f5       	brge	.+82     	; 0x11d0 <CLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    117e:	6f a1       	ldd	r22, Y+39	; 0x27
    1180:	78 a5       	ldd	r23, Y+40	; 0x28
    1182:	89 a5       	ldd	r24, Y+41	; 0x29
    1184:	9a a5       	ldd	r25, Y+42	; 0x2a
    1186:	20 e0       	ldi	r18, 0x00	; 0
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	40 e2       	ldi	r20, 0x20	; 32
    118c:	51 e4       	ldi	r21, 0x41	; 65
    118e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	bc 01       	movw	r22, r24
    1198:	cd 01       	movw	r24, r26
    119a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    119e:	dc 01       	movw	r26, r24
    11a0:	cb 01       	movw	r24, r22
    11a2:	9a a3       	std	Y+34, r25	; 0x22
    11a4:	89 a3       	std	Y+33, r24	; 0x21
    11a6:	0f c0       	rjmp	.+30     	; 0x11c6 <CLCD_voidInit+0x1b0>
    11a8:	88 ec       	ldi	r24, 0xC8	; 200
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	98 a3       	std	Y+32, r25	; 0x20
    11ae:	8f 8f       	std	Y+31, r24	; 0x1f
    11b0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    11b2:	98 a1       	ldd	r25, Y+32	; 0x20
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	f1 f7       	brne	.-4      	; 0x11b4 <CLCD_voidInit+0x19e>
    11b8:	98 a3       	std	Y+32, r25	; 0x20
    11ba:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11bc:	89 a1       	ldd	r24, Y+33	; 0x21
    11be:	9a a1       	ldd	r25, Y+34	; 0x22
    11c0:	01 97       	sbiw	r24, 0x01	; 1
    11c2:	9a a3       	std	Y+34, r25	; 0x22
    11c4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11c6:	89 a1       	ldd	r24, Y+33	; 0x21
    11c8:	9a a1       	ldd	r25, Y+34	; 0x22
    11ca:	00 97       	sbiw	r24, 0x00	; 0
    11cc:	69 f7       	brne	.-38     	; 0x11a8 <CLCD_voidInit+0x192>
    11ce:	14 c0       	rjmp	.+40     	; 0x11f8 <CLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11d0:	6b a1       	ldd	r22, Y+35	; 0x23
    11d2:	7c a1       	ldd	r23, Y+36	; 0x24
    11d4:	8d a1       	ldd	r24, Y+37	; 0x25
    11d6:	9e a1       	ldd	r25, Y+38	; 0x26
    11d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11dc:	dc 01       	movw	r26, r24
    11de:	cb 01       	movw	r24, r22
    11e0:	9a a3       	std	Y+34, r25	; 0x22
    11e2:	89 a3       	std	Y+33, r24	; 0x21
    11e4:	89 a1       	ldd	r24, Y+33	; 0x21
    11e6:	9a a1       	ldd	r25, Y+34	; 0x22
    11e8:	9e 8f       	std	Y+30, r25	; 0x1e
    11ea:	8d 8f       	std	Y+29, r24	; 0x1d
    11ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <CLCD_voidInit+0x1da>
    11f4:	9e 8f       	std	Y+30, r25	; 0x1e
    11f6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	CLCD_voidSendCommand(0b00001100);
    11f8:	8c e0       	ldi	r24, 0x0C	; 12
    11fa:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 e8       	ldi	r26, 0x80	; 128
    1204:	bf e3       	ldi	r27, 0x3F	; 63
    1206:	89 8f       	std	Y+25, r24	; 0x19
    1208:	9a 8f       	std	Y+26, r25	; 0x1a
    120a:	ab 8f       	std	Y+27, r26	; 0x1b
    120c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    120e:	69 8d       	ldd	r22, Y+25	; 0x19
    1210:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1212:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1214:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a ef       	ldi	r20, 0xFA	; 250
    121c:	54 e4       	ldi	r21, 0x44	; 68
    121e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	8d 8b       	std	Y+21, r24	; 0x15
    1228:	9e 8b       	std	Y+22, r25	; 0x16
    122a:	af 8b       	std	Y+23, r26	; 0x17
    122c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    122e:	6d 89       	ldd	r22, Y+21	; 0x15
    1230:	7e 89       	ldd	r23, Y+22	; 0x16
    1232:	8f 89       	ldd	r24, Y+23	; 0x17
    1234:	98 8d       	ldd	r25, Y+24	; 0x18
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 e8       	ldi	r20, 0x80	; 128
    123c:	5f e3       	ldi	r21, 0x3F	; 63
    123e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1242:	88 23       	and	r24, r24
    1244:	2c f4       	brge	.+10     	; 0x1250 <CLCD_voidInit+0x23a>
		__ticks = 1;
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	90 e0       	ldi	r25, 0x00	; 0
    124a:	9c 8b       	std	Y+20, r25	; 0x14
    124c:	8b 8b       	std	Y+19, r24	; 0x13
    124e:	3f c0       	rjmp	.+126    	; 0x12ce <CLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
    1250:	6d 89       	ldd	r22, Y+21	; 0x15
    1252:	7e 89       	ldd	r23, Y+22	; 0x16
    1254:	8f 89       	ldd	r24, Y+23	; 0x17
    1256:	98 8d       	ldd	r25, Y+24	; 0x18
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	3f ef       	ldi	r19, 0xFF	; 255
    125c:	4f e7       	ldi	r20, 0x7F	; 127
    125e:	57 e4       	ldi	r21, 0x47	; 71
    1260:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1264:	18 16       	cp	r1, r24
    1266:	4c f5       	brge	.+82     	; 0x12ba <CLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1268:	69 8d       	ldd	r22, Y+25	; 0x19
    126a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    126c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    126e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	30 e0       	ldi	r19, 0x00	; 0
    1274:	40 e2       	ldi	r20, 0x20	; 32
    1276:	51 e4       	ldi	r21, 0x41	; 65
    1278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    127c:	dc 01       	movw	r26, r24
    127e:	cb 01       	movw	r24, r22
    1280:	bc 01       	movw	r22, r24
    1282:	cd 01       	movw	r24, r26
    1284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1288:	dc 01       	movw	r26, r24
    128a:	cb 01       	movw	r24, r22
    128c:	9c 8b       	std	Y+20, r25	; 0x14
    128e:	8b 8b       	std	Y+19, r24	; 0x13
    1290:	0f c0       	rjmp	.+30     	; 0x12b0 <CLCD_voidInit+0x29a>
    1292:	88 ec       	ldi	r24, 0xC8	; 200
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	9a 8b       	std	Y+18, r25	; 0x12
    1298:	89 8b       	std	Y+17, r24	; 0x11
    129a:	89 89       	ldd	r24, Y+17	; 0x11
    129c:	9a 89       	ldd	r25, Y+18	; 0x12
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	f1 f7       	brne	.-4      	; 0x129e <CLCD_voidInit+0x288>
    12a2:	9a 8b       	std	Y+18, r25	; 0x12
    12a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a6:	8b 89       	ldd	r24, Y+19	; 0x13
    12a8:	9c 89       	ldd	r25, Y+20	; 0x14
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9c 8b       	std	Y+20, r25	; 0x14
    12ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12b0:	8b 89       	ldd	r24, Y+19	; 0x13
    12b2:	9c 89       	ldd	r25, Y+20	; 0x14
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	69 f7       	brne	.-38     	; 0x1292 <CLCD_voidInit+0x27c>
    12b8:	14 c0       	rjmp	.+40     	; 0x12e2 <CLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12ba:	6d 89       	ldd	r22, Y+21	; 0x15
    12bc:	7e 89       	ldd	r23, Y+22	; 0x16
    12be:	8f 89       	ldd	r24, Y+23	; 0x17
    12c0:	98 8d       	ldd	r25, Y+24	; 0x18
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	9c 8b       	std	Y+20, r25	; 0x14
    12cc:	8b 8b       	std	Y+19, r24	; 0x13
    12ce:	8b 89       	ldd	r24, Y+19	; 0x13
    12d0:	9c 89       	ldd	r25, Y+20	; 0x14
    12d2:	98 8b       	std	Y+16, r25	; 0x10
    12d4:	8f 87       	std	Y+15, r24	; 0x0f
    12d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    12d8:	98 89       	ldd	r25, Y+16	; 0x10
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	f1 f7       	brne	.-4      	; 0x12da <CLCD_voidInit+0x2c4>
    12de:	98 8b       	std	Y+16, r25	; 0x10
    12e0:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLCD_voidSendCommand(1);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
    12e8:	80 e0       	ldi	r24, 0x00	; 0
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	a0 e0       	ldi	r26, 0x00	; 0
    12ee:	b0 e4       	ldi	r27, 0x40	; 64
    12f0:	8b 87       	std	Y+11, r24	; 0x0b
    12f2:	9c 87       	std	Y+12, r25	; 0x0c
    12f4:	ad 87       	std	Y+13, r26	; 0x0d
    12f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    12fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1300:	20 e0       	ldi	r18, 0x00	; 0
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	4a ef       	ldi	r20, 0xFA	; 250
    1306:	54 e4       	ldi	r21, 0x44	; 68
    1308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	8f 83       	std	Y+7, r24	; 0x07
    1312:	98 87       	std	Y+8, r25	; 0x08
    1314:	a9 87       	std	Y+9, r26	; 0x09
    1316:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1318:	6f 81       	ldd	r22, Y+7	; 0x07
    131a:	78 85       	ldd	r23, Y+8	; 0x08
    131c:	89 85       	ldd	r24, Y+9	; 0x09
    131e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	40 e8       	ldi	r20, 0x80	; 128
    1326:	5f e3       	ldi	r21, 0x3F	; 63
    1328:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    132c:	88 23       	and	r24, r24
    132e:	2c f4       	brge	.+10     	; 0x133a <CLCD_voidInit+0x324>
		__ticks = 1;
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	9e 83       	std	Y+6, r25	; 0x06
    1336:	8d 83       	std	Y+5, r24	; 0x05
    1338:	3f c0       	rjmp	.+126    	; 0x13b8 <CLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    133a:	6f 81       	ldd	r22, Y+7	; 0x07
    133c:	78 85       	ldd	r23, Y+8	; 0x08
    133e:	89 85       	ldd	r24, Y+9	; 0x09
    1340:	9a 85       	ldd	r25, Y+10	; 0x0a
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	3f ef       	ldi	r19, 0xFF	; 255
    1346:	4f e7       	ldi	r20, 0x7F	; 127
    1348:	57 e4       	ldi	r21, 0x47	; 71
    134a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    134e:	18 16       	cp	r1, r24
    1350:	4c f5       	brge	.+82     	; 0x13a4 <CLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1352:	6b 85       	ldd	r22, Y+11	; 0x0b
    1354:	7c 85       	ldd	r23, Y+12	; 0x0c
    1356:	8d 85       	ldd	r24, Y+13	; 0x0d
    1358:	9e 85       	ldd	r25, Y+14	; 0x0e
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1372:	dc 01       	movw	r26, r24
    1374:	cb 01       	movw	r24, r22
    1376:	9e 83       	std	Y+6, r25	; 0x06
    1378:	8d 83       	std	Y+5, r24	; 0x05
    137a:	0f c0       	rjmp	.+30     	; 0x139a <CLCD_voidInit+0x384>
    137c:	88 ec       	ldi	r24, 0xC8	; 200
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	01 97       	sbiw	r24, 0x01	; 1
    138a:	f1 f7       	brne	.-4      	; 0x1388 <CLCD_voidInit+0x372>
    138c:	9c 83       	std	Y+4, r25	; 0x04
    138e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	01 97       	sbiw	r24, 0x01	; 1
    1396:	9e 83       	std	Y+6, r25	; 0x06
    1398:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	00 97       	sbiw	r24, 0x00	; 0
    13a0:	69 f7       	brne	.-38     	; 0x137c <CLCD_voidInit+0x366>
    13a2:	14 c0       	rjmp	.+40     	; 0x13cc <CLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a4:	6f 81       	ldd	r22, Y+7	; 0x07
    13a6:	78 85       	ldd	r23, Y+8	; 0x08
    13a8:	89 85       	ldd	r24, Y+9	; 0x09
    13aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    13ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b0:	dc 01       	movw	r26, r24
    13b2:	cb 01       	movw	r24, r22
    13b4:	9e 83       	std	Y+6, r25	; 0x06
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	9e 81       	ldd	r25, Y+6	; 0x06
    13bc:	9a 83       	std	Y+2, r25	; 0x02
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	89 81       	ldd	r24, Y+1	; 0x01
    13c2:	9a 81       	ldd	r25, Y+2	; 0x02
    13c4:	01 97       	sbiw	r24, 0x01	; 1
    13c6:	f1 f7       	brne	.-4      	; 0x13c4 <CLCD_voidInit+0x3ae>
    13c8:	9a 83       	std	Y+2, r25	; 0x02
    13ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    13cc:	e8 96       	adiw	r28, 0x38	; 56
    13ce:	0f b6       	in	r0, 0x3f	; 63
    13d0:	f8 94       	cli
    13d2:	de bf       	out	0x3e, r29	; 62
    13d4:	0f be       	out	0x3f, r0	; 63
    13d6:	cd bf       	out	0x3d, r28	; 61
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <CLCD_voidSendString>:
void CLCD_voidSendString(const char *pcString)
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <CLCD_voidSendString+0x6>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	9b 83       	std	Y+3, r25	; 0x03
    13ec:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Iterator=0;
    13ee:	19 82       	std	Y+1, r1	; 0x01
    13f0:	0e c0       	rjmp	.+28     	; 0x140e <CLCD_voidSendString+0x30>
	while(pcString[Local_u8Iterator]!='\0')
	{
		CLCD_voidSendData(pcString[Local_u8Iterator]);
    13f2:	89 81       	ldd	r24, Y+1	; 0x01
    13f4:	28 2f       	mov	r18, r24
    13f6:	30 e0       	ldi	r19, 0x00	; 0
    13f8:	8a 81       	ldd	r24, Y+2	; 0x02
    13fa:	9b 81       	ldd	r25, Y+3	; 0x03
    13fc:	fc 01       	movw	r30, r24
    13fe:	e2 0f       	add	r30, r18
    1400:	f3 1f       	adc	r31, r19
    1402:	80 81       	ld	r24, Z
    1404:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
		Local_u8Iterator++;
    1408:	89 81       	ldd	r24, Y+1	; 0x01
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
void CLCD_voidSendString(const char *pcString)
{
	u8 Local_u8Iterator=0;
	while(pcString[Local_u8Iterator]!='\0')
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	28 2f       	mov	r18, r24
    1412:	30 e0       	ldi	r19, 0x00	; 0
    1414:	8a 81       	ldd	r24, Y+2	; 0x02
    1416:	9b 81       	ldd	r25, Y+3	; 0x03
    1418:	fc 01       	movw	r30, r24
    141a:	e2 0f       	add	r30, r18
    141c:	f3 1f       	adc	r31, r19
    141e:	80 81       	ld	r24, Z
    1420:	88 23       	and	r24, r24
    1422:	39 f7       	brne	.-50     	; 0x13f2 <CLCD_voidSendString+0x14>
	{
		CLCD_voidSendData(pcString[Local_u8Iterator]);
		Local_u8Iterator++;
	}
}
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <CLCD_voidSetPosition>:
void CLCD_voidSetPosition(u8 Copy_u8x,u8 Copy_u8y)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <CLCD_voidSetPosition+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <CLCD_voidSetPosition+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	8a 83       	std	Y+2, r24	; 0x02
    1440:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Position;
	switch(Copy_u8x)
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	3d 83       	std	Y+5, r19	; 0x05
    144a:	2c 83       	std	Y+4, r18	; 0x04
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	9d 81       	ldd	r25, Y+5	; 0x05
    1450:	00 97       	sbiw	r24, 0x00	; 0
    1452:	31 f0       	breq	.+12     	; 0x1460 <CLCD_voidSetPosition+0x30>
    1454:	2c 81       	ldd	r18, Y+4	; 0x04
    1456:	3d 81       	ldd	r19, Y+5	; 0x05
    1458:	21 30       	cpi	r18, 0x01	; 1
    145a:	31 05       	cpc	r19, r1
    145c:	21 f0       	breq	.+8      	; 0x1466 <CLCD_voidSetPosition+0x36>
    145e:	06 c0       	rjmp	.+12     	; 0x146c <CLCD_voidSetPosition+0x3c>
	{
	case 0:Local_u8Position=Copy_u8y;break;
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	89 83       	std	Y+1, r24	; 0x01
    1464:	03 c0       	rjmp	.+6      	; 0x146c <CLCD_voidSetPosition+0x3c>
	case 1:Local_u8Position=Copy_u8y+LINE1_BASE;break;
    1466:	8b 81       	ldd	r24, Y+3	; 0x03
    1468:	80 5c       	subi	r24, 0xC0	; 192
    146a:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8Position+MSB);
    146c:	89 81       	ldd	r24, Y+1	; 0x01
    146e:	80 58       	subi	r24, 0x80	; 128
    1470:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
}
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <CLCD_voidSendSpecialChar>:
void CLCD_voidSendSpecialChar(u8 *pu8_arr,
		u8 Copy_u8BlockNum,
		u8 Copy_u8x,
		u8 Copy_u8y)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	27 97       	sbiw	r28, 0x07	; 7
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
    149c:	6d 83       	std	Y+5, r22	; 0x05
    149e:	4e 83       	std	Y+6, r20	; 0x06
    14a0:	2f 83       	std	Y+7, r18	; 0x07
	//calculate starting address in cgram
	u8 Local_u8StartingAdress=Copy_u8BlockNum*8;
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	88 2f       	mov	r24, r24
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	88 0f       	add	r24, r24
    14aa:	99 1f       	adc	r25, r25
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	88 0f       	add	r24, r24
    14b2:	99 1f       	adc	r25, r25
    14b4:	8a 83       	std	Y+2, r24	; 0x02
	//send command -> cgram
	CLCD_voidSendCommand(Local_u8StartingAdress+CGRAM_CONS);
    14b6:	8a 81       	ldd	r24, Y+2	; 0x02
    14b8:	80 5c       	subi	r24, 0xC0	; 192
    14ba:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
	//START DRAWING PATTERN
	for(u8 Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    14be:	19 82       	std	Y+1, r1	; 0x01
    14c0:	0e c0       	rjmp	.+28     	; 0x14de <CLCD_voidSendSpecialChar+0x5a>
	{
		CLCD_voidSendData(pu8_arr[Local_u8Iterator]);
    14c2:	89 81       	ldd	r24, Y+1	; 0x01
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	fc 01       	movw	r30, r24
    14ce:	e2 0f       	add	r30, r18
    14d0:	f3 1f       	adc	r31, r19
    14d2:	80 81       	ld	r24, Z
    14d4:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
	//calculate starting address in cgram
	u8 Local_u8StartingAdress=Copy_u8BlockNum*8;
	//send command -> cgram
	CLCD_voidSendCommand(Local_u8StartingAdress+CGRAM_CONS);
	//START DRAWING PATTERN
	for(u8 Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	8f 5f       	subi	r24, 0xFF	; 255
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	89 81       	ldd	r24, Y+1	; 0x01
    14e0:	88 30       	cpi	r24, 0x08	; 8
    14e2:	78 f3       	brcs	.-34     	; 0x14c2 <CLCD_voidSendSpecialChar+0x3e>
	{
		CLCD_voidSendData(pu8_arr[Local_u8Iterator]);
	}
	//SET DDRAM ADDRESS
	CLCD_voidSetPosition(Copy_u8x,Copy_u8y);
    14e4:	8e 81       	ldd	r24, Y+6	; 0x06
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSetPosition>
	//Display char from i  ts block
	CLCD_voidSendData(Copy_u8BlockNum);
    14ec:	8d 81       	ldd	r24, Y+5	; 0x05
    14ee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>

}
    14f2:	27 96       	adiw	r28, 0x07	; 7
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <CLCD_voidClearDisplay>:

void CLCD_voidClearDisplay()
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	2e 97       	sbiw	r28, 0x0e	; 14
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	a0 e8       	ldi	r26, 0x80	; 128
    151e:	bf e3       	ldi	r27, 0x3F	; 63
    1520:	8b 87       	std	Y+11, r24	; 0x0b
    1522:	9c 87       	std	Y+12, r25	; 0x0c
    1524:	ad 87       	std	Y+13, r26	; 0x0d
    1526:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1528:	6b 85       	ldd	r22, Y+11	; 0x0b
    152a:	7c 85       	ldd	r23, Y+12	; 0x0c
    152c:	8d 85       	ldd	r24, Y+13	; 0x0d
    152e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	4a ef       	ldi	r20, 0xFA	; 250
    1536:	54 e4       	ldi	r21, 0x44	; 68
    1538:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    153c:	dc 01       	movw	r26, r24
    153e:	cb 01       	movw	r24, r22
    1540:	8f 83       	std	Y+7, r24	; 0x07
    1542:	98 87       	std	Y+8, r25	; 0x08
    1544:	a9 87       	std	Y+9, r26	; 0x09
    1546:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1548:	6f 81       	ldd	r22, Y+7	; 0x07
    154a:	78 85       	ldd	r23, Y+8	; 0x08
    154c:	89 85       	ldd	r24, Y+9	; 0x09
    154e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1550:	20 e0       	ldi	r18, 0x00	; 0
    1552:	30 e0       	ldi	r19, 0x00	; 0
    1554:	40 e8       	ldi	r20, 0x80	; 128
    1556:	5f e3       	ldi	r21, 0x3F	; 63
    1558:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    155c:	88 23       	and	r24, r24
    155e:	2c f4       	brge	.+10     	; 0x156a <CLCD_voidClearDisplay+0x66>
		__ticks = 1;
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	9e 83       	std	Y+6, r25	; 0x06
    1566:	8d 83       	std	Y+5, r24	; 0x05
    1568:	3f c0       	rjmp	.+126    	; 0x15e8 <CLCD_voidClearDisplay+0xe4>
	else if (__tmp > 65535)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	3f ef       	ldi	r19, 0xFF	; 255
    1576:	4f e7       	ldi	r20, 0x7F	; 127
    1578:	57 e4       	ldi	r21, 0x47	; 71
    157a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    157e:	18 16       	cp	r1, r24
    1580:	4c f5       	brge	.+82     	; 0x15d4 <CLCD_voidClearDisplay+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1582:	6b 85       	ldd	r22, Y+11	; 0x0b
    1584:	7c 85       	ldd	r23, Y+12	; 0x0c
    1586:	8d 85       	ldd	r24, Y+13	; 0x0d
    1588:	9e 85       	ldd	r25, Y+14	; 0x0e
    158a:	20 e0       	ldi	r18, 0x00	; 0
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	40 e2       	ldi	r20, 0x20	; 32
    1590:	51 e4       	ldi	r21, 0x41	; 65
    1592:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	bc 01       	movw	r22, r24
    159c:	cd 01       	movw	r24, r26
    159e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15a2:	dc 01       	movw	r26, r24
    15a4:	cb 01       	movw	r24, r22
    15a6:	9e 83       	std	Y+6, r25	; 0x06
    15a8:	8d 83       	std	Y+5, r24	; 0x05
    15aa:	0f c0       	rjmp	.+30     	; 0x15ca <CLCD_voidClearDisplay+0xc6>
    15ac:	88 ec       	ldi	r24, 0xC8	; 200
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	9c 83       	std	Y+4, r25	; 0x04
    15b2:	8b 83       	std	Y+3, r24	; 0x03
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	f1 f7       	brne	.-4      	; 0x15b8 <CLCD_voidClearDisplay+0xb4>
    15bc:	9c 83       	std	Y+4, r25	; 0x04
    15be:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c0:	8d 81       	ldd	r24, Y+5	; 0x05
    15c2:	9e 81       	ldd	r25, Y+6	; 0x06
    15c4:	01 97       	sbiw	r24, 0x01	; 1
    15c6:	9e 83       	std	Y+6, r25	; 0x06
    15c8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	69 f7       	brne	.-38     	; 0x15ac <CLCD_voidClearDisplay+0xa8>
    15d2:	14 c0       	rjmp	.+40     	; 0x15fc <CLCD_voidClearDisplay+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15d4:	6f 81       	ldd	r22, Y+7	; 0x07
    15d6:	78 85       	ldd	r23, Y+8	; 0x08
    15d8:	89 85       	ldd	r24, Y+9	; 0x09
    15da:	9a 85       	ldd	r25, Y+10	; 0x0a
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	9a 83       	std	Y+2, r25	; 0x02
    15ee:	89 83       	std	Y+1, r24	; 0x01
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	9a 81       	ldd	r25, Y+2	; 0x02
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	f1 f7       	brne	.-4      	; 0x15f4 <CLCD_voidClearDisplay+0xf0>
    15f8:	9a 83       	std	Y+2, r25	; 0x02
    15fa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	CLCD_voidSendCommand(1);
    15fc:	81 e0       	ldi	r24, 0x01	; 1
    15fe:	0e 94 6d 07 	call	0xeda	; 0xeda <CLCD_voidSendCommand>
}
    1602:	2e 96       	adiw	r28, 0x0e	; 14
    1604:	0f b6       	in	r0, 0x3f	; 63
    1606:	f8 94       	cli
    1608:	de bf       	out	0x3e, r29	; 62
    160a:	0f be       	out	0x3f, r0	; 63
    160c:	cd bf       	out	0x3d, r28	; 61
    160e:	cf 91       	pop	r28
    1610:	df 91       	pop	r29
    1612:	08 95       	ret

00001614 <CLCD_voidSendNum>:
void CLCD_voidSendNum(u16 Copy_u16Num)
{
    1614:	df 93       	push	r29
    1616:	cf 93       	push	r28
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	2e 97       	sbiw	r28, 0x0e	; 14
    161e:	0f b6       	in	r0, 0x3f	; 63
    1620:	f8 94       	cli
    1622:	de bf       	out	0x3e, r29	; 62
    1624:	0f be       	out	0x3f, r0	; 63
    1626:	cd bf       	out	0x3d, r28	; 61
    1628:	9e 87       	std	Y+14, r25	; 0x0e
    162a:	8d 87       	std	Y+13, r24	; 0x0d
	u8  arr[10],i=0,j;
    162c:	1a 82       	std	Y+2, r1	; 0x02
	if(Copy_u16Num == 0)
    162e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1630:	9e 85       	ldd	r25, Y+14	; 0x0e
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	11 f5       	brne	.+68     	; 0x167a <CLCD_voidSendNum+0x66>
	{
		CLCD_voidSendData('0');
    1636:	80 e3       	ldi	r24, 0x30	; 48
    1638:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
    163c:	22 c0       	rjmp	.+68     	; 0x1682 <CLCD_voidSendNum+0x6e>
	}
	else
	{
		while (Copy_u16Num)
		{
			arr[i]= Copy_u16Num%10+'0';
    163e:	8a 81       	ldd	r24, Y+2	; 0x02
    1640:	e8 2f       	mov	r30, r24
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	8d 85       	ldd	r24, Y+13	; 0x0d
    1646:	9e 85       	ldd	r25, Y+14	; 0x0e
    1648:	2a e0       	ldi	r18, 0x0A	; 10
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	b9 01       	movw	r22, r18
    164e:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__udivmodhi4>
    1652:	28 2f       	mov	r18, r24
    1654:	20 5d       	subi	r18, 0xD0	; 208
    1656:	ce 01       	movw	r24, r28
    1658:	03 96       	adiw	r24, 0x03	; 3
    165a:	e8 0f       	add	r30, r24
    165c:	f9 1f       	adc	r31, r25
    165e:	20 83       	st	Z, r18
			Copy_u16Num /=10;
    1660:	8d 85       	ldd	r24, Y+13	; 0x0d
    1662:	9e 85       	ldd	r25, Y+14	; 0x0e
    1664:	2a e0       	ldi	r18, 0x0A	; 10
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	b9 01       	movw	r22, r18
    166a:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <__udivmodhi4>
    166e:	cb 01       	movw	r24, r22
    1670:	9e 87       	std	Y+14, r25	; 0x0e
    1672:	8d 87       	std	Y+13, r24	; 0x0d
			i++;
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	8f 5f       	subi	r24, 0xFF	; 255
    1678:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');
	}
	else
	{
		while (Copy_u16Num)
    167a:	8d 85       	ldd	r24, Y+13	; 0x0d
    167c:	9e 85       	ldd	r25, Y+14	; 0x0e
    167e:	00 97       	sbiw	r24, 0x00	; 0
    1680:	f1 f6       	brne	.-68     	; 0x163e <CLCD_voidSendNum+0x2a>
			arr[i]= Copy_u16Num%10+'0';
			Copy_u16Num /=10;
			i++;
		}
	}
	for(j=i;j>0;j--)
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	89 83       	std	Y+1, r24	; 0x01
    1686:	11 c0       	rjmp	.+34     	; 0x16aa <CLCD_voidSendNum+0x96>
	{
		CLCD_voidSendData(arr[j-1]);
    1688:	89 81       	ldd	r24, Y+1	; 0x01
    168a:	88 2f       	mov	r24, r24
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9c 01       	movw	r18, r24
    1690:	21 50       	subi	r18, 0x01	; 1
    1692:	30 40       	sbci	r19, 0x00	; 0
    1694:	ce 01       	movw	r24, r28
    1696:	03 96       	adiw	r24, 0x03	; 3
    1698:	fc 01       	movw	r30, r24
    169a:	e2 0f       	add	r30, r18
    169c:	f3 1f       	adc	r31, r19
    169e:	80 81       	ld	r24, Z
    16a0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <CLCD_voidSendData>
			arr[i]= Copy_u16Num%10+'0';
			Copy_u16Num /=10;
			i++;
		}
	}
	for(j=i;j>0;j--)
    16a4:	89 81       	ldd	r24, Y+1	; 0x01
    16a6:	81 50       	subi	r24, 0x01	; 1
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	88 23       	and	r24, r24
    16ae:	61 f7       	brne	.-40     	; 0x1688 <CLCD_voidSendNum+0x74>
	{
		CLCD_voidSendData(arr[j-1]);
	}
}
    16b0:	2e 96       	adiw	r28, 0x0e	; 14
    16b2:	0f b6       	in	r0, 0x3f	; 63
    16b4:	f8 94       	cli
    16b6:	de bf       	out	0x3e, r29	; 62
    16b8:	0f be       	out	0x3f, r0	; 63
    16ba:	cd bf       	out	0x3d, r28	; 61
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <DIO_voidSetPortDirection>:
#define MAX_PIN_NUM  7



void DIO_voidSetPortDirection(u8 Copy_u8PortNum ,u8 Copy_u8PortDir)
{
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	00 d0       	rcall	.+0      	; 0x16c8 <DIO_voidSetPortDirection+0x6>
    16c8:	00 d0       	rcall	.+0      	; 0x16ca <DIO_voidSetPortDirection+0x8>
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	89 83       	std	Y+1, r24	; 0x01
    16d0:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNum)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3c 83       	std	Y+4, r19	; 0x04
    16da:	2b 83       	std	Y+3, r18	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	82 30       	cpi	r24, 0x02	; 2
    16e2:	91 05       	cpc	r25, r1
    16e4:	d9 f0       	breq	.+54     	; 0x171c <DIO_voidSetPortDirection+0x5a>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	23 30       	cpi	r18, 0x03	; 3
    16ec:	31 05       	cpc	r19, r1
    16ee:	34 f4       	brge	.+12     	; 0x16fc <DIO_voidSetPortDirection+0x3a>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	81 30       	cpi	r24, 0x01	; 1
    16f6:	91 05       	cpc	r25, r1
    16f8:	61 f0       	breq	.+24     	; 0x1712 <DIO_voidSetPortDirection+0x50>
    16fa:	1e c0       	rjmp	.+60     	; 0x1738 <DIO_voidSetPortDirection+0x76>
    16fc:	2b 81       	ldd	r18, Y+3	; 0x03
    16fe:	3c 81       	ldd	r19, Y+4	; 0x04
    1700:	23 30       	cpi	r18, 0x03	; 3
    1702:	31 05       	cpc	r19, r1
    1704:	81 f0       	breq	.+32     	; 0x1726 <DIO_voidSetPortDirection+0x64>
    1706:	8b 81       	ldd	r24, Y+3	; 0x03
    1708:	9c 81       	ldd	r25, Y+4	; 0x04
    170a:	84 30       	cpi	r24, 0x04	; 4
    170c:	91 05       	cpc	r25, r1
    170e:	81 f0       	breq	.+32     	; 0x1730 <DIO_voidSetPortDirection+0x6e>
    1710:	13 c0       	rjmp	.+38     	; 0x1738 <DIO_voidSetPortDirection+0x76>
	{
		case PORT_u8A:
		{
			DDRA=Copy_u8PortDir;
    1712:	ea e3       	ldi	r30, 0x3A	; 58
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	80 83       	st	Z, r24
    171a:	0e c0       	rjmp	.+28     	; 0x1738 <DIO_voidSetPortDirection+0x76>
			break;
		}
		case PORT_u8B:
		{
			DDRB=Copy_u8PortDir;
    171c:	e7 e3       	ldi	r30, 0x37	; 55
    171e:	f0 e0       	ldi	r31, 0x00	; 0
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	80 83       	st	Z, r24
    1724:	09 c0       	rjmp	.+18     	; 0x1738 <DIO_voidSetPortDirection+0x76>
			break;
		}
		case PORT_u8C:
		{
			DDRC=Copy_u8PortDir;
    1726:	e4 e3       	ldi	r30, 0x34	; 52
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	80 83       	st	Z, r24
    172e:	04 c0       	rjmp	.+8      	; 0x1738 <DIO_voidSetPortDirection+0x76>
			break;
		}
		case PORT_u8D:
		{
			DDRD=Copy_u8PortDir;
    1730:	e1 e3       	ldi	r30, 0x31	; 49
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	8a 81       	ldd	r24, Y+2	; 0x02
    1736:	80 83       	st	Z, r24
			break;
		}
		
	}
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <DIO_voidSetPortValue>:
void DIO_voidSetPortValue(u8 Copy_u8PortNum ,u8 Copy_u8PortValue)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	00 d0       	rcall	.+0      	; 0x174c <DIO_voidSetPortValue+0x6>
    174c:	00 d0       	rcall	.+0      	; 0x174e <DIO_voidSetPortValue+0x8>
    174e:	cd b7       	in	r28, 0x3d	; 61
    1750:	de b7       	in	r29, 0x3e	; 62
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	6a 83       	std	Y+2, r22	; 0x02
   switch(Copy_u8PortNum)
    1756:	89 81       	ldd	r24, Y+1	; 0x01
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3c 83       	std	Y+4, r19	; 0x04
    175e:	2b 83       	std	Y+3, r18	; 0x03
    1760:	8b 81       	ldd	r24, Y+3	; 0x03
    1762:	9c 81       	ldd	r25, Y+4	; 0x04
    1764:	82 30       	cpi	r24, 0x02	; 2
    1766:	91 05       	cpc	r25, r1
    1768:	d9 f0       	breq	.+54     	; 0x17a0 <DIO_voidSetPortValue+0x5a>
    176a:	2b 81       	ldd	r18, Y+3	; 0x03
    176c:	3c 81       	ldd	r19, Y+4	; 0x04
    176e:	23 30       	cpi	r18, 0x03	; 3
    1770:	31 05       	cpc	r19, r1
    1772:	34 f4       	brge	.+12     	; 0x1780 <DIO_voidSetPortValue+0x3a>
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	9c 81       	ldd	r25, Y+4	; 0x04
    1778:	81 30       	cpi	r24, 0x01	; 1
    177a:	91 05       	cpc	r25, r1
    177c:	61 f0       	breq	.+24     	; 0x1796 <DIO_voidSetPortValue+0x50>
    177e:	1e c0       	rjmp	.+60     	; 0x17bc <DIO_voidSetPortValue+0x76>
    1780:	2b 81       	ldd	r18, Y+3	; 0x03
    1782:	3c 81       	ldd	r19, Y+4	; 0x04
    1784:	23 30       	cpi	r18, 0x03	; 3
    1786:	31 05       	cpc	r19, r1
    1788:	81 f0       	breq	.+32     	; 0x17aa <DIO_voidSetPortValue+0x64>
    178a:	8b 81       	ldd	r24, Y+3	; 0x03
    178c:	9c 81       	ldd	r25, Y+4	; 0x04
    178e:	84 30       	cpi	r24, 0x04	; 4
    1790:	91 05       	cpc	r25, r1
    1792:	81 f0       	breq	.+32     	; 0x17b4 <DIO_voidSetPortValue+0x6e>
    1794:	13 c0       	rjmp	.+38     	; 0x17bc <DIO_voidSetPortValue+0x76>
	{
		case PORT_u8A:
		{
			PORTA=Copy_u8PortValue;
    1796:	eb e3       	ldi	r30, 0x3B	; 59
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	8a 81       	ldd	r24, Y+2	; 0x02
    179c:	80 83       	st	Z, r24
    179e:	0e c0       	rjmp	.+28     	; 0x17bc <DIO_voidSetPortValue+0x76>
			break;
		}
		case PORT_u8B:
		{
			PORTB=Copy_u8PortValue;
    17a0:	e8 e3       	ldi	r30, 0x38	; 56
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	8a 81       	ldd	r24, Y+2	; 0x02
    17a6:	80 83       	st	Z, r24
    17a8:	09 c0       	rjmp	.+18     	; 0x17bc <DIO_voidSetPortValue+0x76>
			break;
		}
		case PORT_u8C:
		{
			PORTC=Copy_u8PortValue;
    17aa:	e5 e3       	ldi	r30, 0x35	; 53
    17ac:	f0 e0       	ldi	r31, 0x00	; 0
    17ae:	8a 81       	ldd	r24, Y+2	; 0x02
    17b0:	80 83       	st	Z, r24
    17b2:	04 c0       	rjmp	.+8      	; 0x17bc <DIO_voidSetPortValue+0x76>
			break;
		}
		case PORT_u8D:
		{
			PORTD=Copy_u8PortValue;
    17b4:	e2 e3       	ldi	r30, 0x32	; 50
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	80 83       	st	Z, r24
			break;
		}
		
	}	
}
    17bc:	0f 90       	pop	r0
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	cf 91       	pop	r28
    17c6:	df 91       	pop	r29
    17c8:	08 95       	ret

000017ca <DIO_voidSetPinDirection>:
void DIO_voidSetPinDirection(u8 Copy_u8PortNum,u8 Copy_u8PinNum, u8 Copy_u8PinDir)
{
    17ca:	df 93       	push	r29
    17cc:	cf 93       	push	r28
    17ce:	cd b7       	in	r28, 0x3d	; 61
    17d0:	de b7       	in	r29, 0x3e	; 62
    17d2:	27 97       	sbiw	r28, 0x07	; 7
    17d4:	0f b6       	in	r0, 0x3f	; 63
    17d6:	f8 94       	cli
    17d8:	de bf       	out	0x3e, r29	; 62
    17da:	0f be       	out	0x3f, r0	; 63
    17dc:	cd bf       	out	0x3d, r28	; 61
    17de:	89 83       	std	Y+1, r24	; 0x01
    17e0:	6a 83       	std	Y+2, r22	; 0x02
    17e2:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinNum <= MAX_PIN_NUM)
    17e4:	8a 81       	ldd	r24, Y+2	; 0x02
    17e6:	88 30       	cpi	r24, 0x08	; 8
    17e8:	08 f0       	brcs	.+2      	; 0x17ec <DIO_voidSetPinDirection+0x22>
    17ea:	ec c0       	rjmp	.+472    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
	{
		if(Copy_u8PinDir == PIN_OUT)
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <DIO_voidSetPinDirection+0x2a>
    17f2:	70 c0       	rjmp	.+224    	; 0x18d4 <DIO_voidSetPinDirection+0x10a>
		{
			switch(Copy_u8PortNum)
    17f4:	89 81       	ldd	r24, Y+1	; 0x01
    17f6:	28 2f       	mov	r18, r24
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	3f 83       	std	Y+7, r19	; 0x07
    17fc:	2e 83       	std	Y+6, r18	; 0x06
    17fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1800:	9f 81       	ldd	r25, Y+7	; 0x07
    1802:	82 30       	cpi	r24, 0x02	; 2
    1804:	91 05       	cpc	r25, r1
    1806:	51 f1       	breq	.+84     	; 0x185c <DIO_voidSetPinDirection+0x92>
    1808:	2e 81       	ldd	r18, Y+6	; 0x06
    180a:	3f 81       	ldd	r19, Y+7	; 0x07
    180c:	23 30       	cpi	r18, 0x03	; 3
    180e:	31 05       	cpc	r19, r1
    1810:	34 f4       	brge	.+12     	; 0x181e <DIO_voidSetPinDirection+0x54>
    1812:	8e 81       	ldd	r24, Y+6	; 0x06
    1814:	9f 81       	ldd	r25, Y+7	; 0x07
    1816:	81 30       	cpi	r24, 0x01	; 1
    1818:	91 05       	cpc	r25, r1
    181a:	61 f0       	breq	.+24     	; 0x1834 <DIO_voidSetPinDirection+0x6a>
    181c:	d3 c0       	rjmp	.+422    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
    181e:	2e 81       	ldd	r18, Y+6	; 0x06
    1820:	3f 81       	ldd	r19, Y+7	; 0x07
    1822:	23 30       	cpi	r18, 0x03	; 3
    1824:	31 05       	cpc	r19, r1
    1826:	71 f1       	breq	.+92     	; 0x1884 <DIO_voidSetPinDirection+0xba>
    1828:	8e 81       	ldd	r24, Y+6	; 0x06
    182a:	9f 81       	ldd	r25, Y+7	; 0x07
    182c:	84 30       	cpi	r24, 0x04	; 4
    182e:	91 05       	cpc	r25, r1
    1830:	e9 f1       	breq	.+122    	; 0x18ac <DIO_voidSetPinDirection+0xe2>
    1832:	c8 c0       	rjmp	.+400    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
			{
				case PORT_u8A :
				{
					SET_BIT(DDRA,Copy_u8PinNum);
    1834:	aa e3       	ldi	r26, 0x3A	; 58
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	ea e3       	ldi	r30, 0x3A	; 58
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <DIO_voidSetPinDirection+0x88>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <DIO_voidSetPinDirection+0x84>
    1856:	84 2b       	or	r24, r20
    1858:	8c 93       	st	X, r24
    185a:	b4 c0       	rjmp	.+360    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
				case PORT_u8B :
				{
					SET_BIT(DDRB,Copy_u8PinNum);
    185c:	a7 e3       	ldi	r26, 0x37	; 55
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e7 e3       	ldi	r30, 0x37	; 55
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	48 2f       	mov	r20, r24
    1868:	8a 81       	ldd	r24, Y+2	; 0x02
    186a:	28 2f       	mov	r18, r24
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	02 2e       	mov	r0, r18
    1874:	02 c0       	rjmp	.+4      	; 0x187a <DIO_voidSetPinDirection+0xb0>
    1876:	88 0f       	add	r24, r24
    1878:	99 1f       	adc	r25, r25
    187a:	0a 94       	dec	r0
    187c:	e2 f7       	brpl	.-8      	; 0x1876 <DIO_voidSetPinDirection+0xac>
    187e:	84 2b       	or	r24, r20
    1880:	8c 93       	st	X, r24
    1882:	a0 c0       	rjmp	.+320    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
				case PORT_u8C :
				{
					SET_BIT(DDRC,Copy_u8PinNum);
    1884:	a4 e3       	ldi	r26, 0x34	; 52
    1886:	b0 e0       	ldi	r27, 0x00	; 0
    1888:	e4 e3       	ldi	r30, 0x34	; 52
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	80 81       	ld	r24, Z
    188e:	48 2f       	mov	r20, r24
    1890:	8a 81       	ldd	r24, Y+2	; 0x02
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	81 e0       	ldi	r24, 0x01	; 1
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	02 2e       	mov	r0, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <DIO_voidSetPinDirection+0xd8>
    189e:	88 0f       	add	r24, r24
    18a0:	99 1f       	adc	r25, r25
    18a2:	0a 94       	dec	r0
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <DIO_voidSetPinDirection+0xd4>
    18a6:	84 2b       	or	r24, r20
    18a8:	8c 93       	st	X, r24
    18aa:	8c c0       	rjmp	.+280    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
				case PORT_u8D :
				{
					SET_BIT(DDRD,Copy_u8PinNum);
    18ac:	a1 e3       	ldi	r26, 0x31	; 49
    18ae:	b0 e0       	ldi	r27, 0x00	; 0
    18b0:	e1 e3       	ldi	r30, 0x31	; 49
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	48 2f       	mov	r20, r24
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	81 e0       	ldi	r24, 0x01	; 1
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	02 2e       	mov	r0, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <DIO_voidSetPinDirection+0x100>
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	0a 94       	dec	r0
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <DIO_voidSetPinDirection+0xfc>
    18ce:	84 2b       	or	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	78 c0       	rjmp	.+240    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
			}
		}
		else if(Copy_u8PinDir == PIN_IN)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	88 23       	and	r24, r24
    18d8:	09 f0       	breq	.+2      	; 0x18dc <DIO_voidSetPinDirection+0x112>
    18da:	74 c0       	rjmp	.+232    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
		{
			switch(Copy_u8PortNum)
    18dc:	89 81       	ldd	r24, Y+1	; 0x01
    18de:	28 2f       	mov	r18, r24
    18e0:	30 e0       	ldi	r19, 0x00	; 0
    18e2:	3d 83       	std	Y+5, r19	; 0x05
    18e4:	2c 83       	std	Y+4, r18	; 0x04
    18e6:	8c 81       	ldd	r24, Y+4	; 0x04
    18e8:	9d 81       	ldd	r25, Y+5	; 0x05
    18ea:	82 30       	cpi	r24, 0x02	; 2
    18ec:	91 05       	cpc	r25, r1
    18ee:	61 f1       	breq	.+88     	; 0x1948 <DIO_voidSetPinDirection+0x17e>
    18f0:	2c 81       	ldd	r18, Y+4	; 0x04
    18f2:	3d 81       	ldd	r19, Y+5	; 0x05
    18f4:	23 30       	cpi	r18, 0x03	; 3
    18f6:	31 05       	cpc	r19, r1
    18f8:	34 f4       	brge	.+12     	; 0x1906 <DIO_voidSetPinDirection+0x13c>
    18fa:	8c 81       	ldd	r24, Y+4	; 0x04
    18fc:	9d 81       	ldd	r25, Y+5	; 0x05
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	91 05       	cpc	r25, r1
    1902:	69 f0       	breq	.+26     	; 0x191e <DIO_voidSetPinDirection+0x154>
    1904:	5f c0       	rjmp	.+190    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
    1906:	2c 81       	ldd	r18, Y+4	; 0x04
    1908:	3d 81       	ldd	r19, Y+5	; 0x05
    190a:	23 30       	cpi	r18, 0x03	; 3
    190c:	31 05       	cpc	r19, r1
    190e:	89 f1       	breq	.+98     	; 0x1972 <DIO_voidSetPinDirection+0x1a8>
    1910:	8c 81       	ldd	r24, Y+4	; 0x04
    1912:	9d 81       	ldd	r25, Y+5	; 0x05
    1914:	84 30       	cpi	r24, 0x04	; 4
    1916:	91 05       	cpc	r25, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <DIO_voidSetPinDirection+0x152>
    191a:	40 c0       	rjmp	.+128    	; 0x199c <DIO_voidSetPinDirection+0x1d2>
    191c:	53 c0       	rjmp	.+166    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
			{
				case PORT_u8A :
				{
					CLR_BIT(DDRA,Copy_u8PinNum);
    191e:	aa e3       	ldi	r26, 0x3A	; 58
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ea e3       	ldi	r30, 0x3A	; 58
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	48 2f       	mov	r20, r24
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	28 2f       	mov	r18, r24
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	81 e0       	ldi	r24, 0x01	; 1
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	02 2e       	mov	r0, r18
    1936:	02 c0       	rjmp	.+4      	; 0x193c <DIO_voidSetPinDirection+0x172>
    1938:	88 0f       	add	r24, r24
    193a:	99 1f       	adc	r25, r25
    193c:	0a 94       	dec	r0
    193e:	e2 f7       	brpl	.-8      	; 0x1938 <DIO_voidSetPinDirection+0x16e>
    1940:	80 95       	com	r24
    1942:	84 23       	and	r24, r20
    1944:	8c 93       	st	X, r24
    1946:	3e c0       	rjmp	.+124    	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
				case PORT_u8B :
				{
					CLR_BIT(DDRB,Copy_u8PinNum);
    1948:	a7 e3       	ldi	r26, 0x37	; 55
    194a:	b0 e0       	ldi	r27, 0x00	; 0
    194c:	e7 e3       	ldi	r30, 0x37	; 55
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	80 81       	ld	r24, Z
    1952:	48 2f       	mov	r20, r24
    1954:	8a 81       	ldd	r24, Y+2	; 0x02
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	02 2e       	mov	r0, r18
    1960:	02 c0       	rjmp	.+4      	; 0x1966 <DIO_voidSetPinDirection+0x19c>
    1962:	88 0f       	add	r24, r24
    1964:	99 1f       	adc	r25, r25
    1966:	0a 94       	dec	r0
    1968:	e2 f7       	brpl	.-8      	; 0x1962 <DIO_voidSetPinDirection+0x198>
    196a:	80 95       	com	r24
    196c:	84 23       	and	r24, r20
    196e:	8c 93       	st	X, r24
    1970:	29 c0       	rjmp	.+82     	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
				case PORT_u8C :
				{
					CLR_BIT(DDRC,Copy_u8PinNum);
    1972:	a4 e3       	ldi	r26, 0x34	; 52
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e4 e3       	ldi	r30, 0x34	; 52
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	48 2f       	mov	r20, r24
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	28 2f       	mov	r18, r24
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	02 2e       	mov	r0, r18
    198a:	02 c0       	rjmp	.+4      	; 0x1990 <DIO_voidSetPinDirection+0x1c6>
    198c:	88 0f       	add	r24, r24
    198e:	99 1f       	adc	r25, r25
    1990:	0a 94       	dec	r0
    1992:	e2 f7       	brpl	.-8      	; 0x198c <DIO_voidSetPinDirection+0x1c2>
    1994:	80 95       	com	r24
    1996:	84 23       	and	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	14 c0       	rjmp	.+40     	; 0x19c4 <DIO_voidSetPinDirection+0x1fa>
					break;
				}
				case PORT_u8D :
				{
					CLR_BIT(DDRD,Copy_u8PinNum);
    199c:	a1 e3       	ldi	r26, 0x31	; 49
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e1 e3       	ldi	r30, 0x31	; 49
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8a 81       	ldd	r24, Y+2	; 0x02
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_voidSetPinDirection+0x1f0>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_voidSetPinDirection+0x1ec>
    19be:	80 95       	com	r24
    19c0:	84 23       	and	r24, r20
    19c2:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    19c4:	27 96       	adiw	r28, 0x07	; 7
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <DIO_voidSetPinValue>:
void DIO_voidSetPinValue(u8 Copy_u8PortNum ,u8 Copy_u8PinNum , u8 Copy_u8PinValue)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	cd b7       	in	r28, 0x3d	; 61
    19dc:	de b7       	in	r29, 0x3e	; 62
    19de:	27 97       	sbiw	r28, 0x07	; 7
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	de bf       	out	0x3e, r29	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	cd bf       	out	0x3d, r28	; 61
    19ea:	89 83       	std	Y+1, r24	; 0x01
    19ec:	6a 83       	std	Y+2, r22	; 0x02
    19ee:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinNum <= MAX_PIN_NUM)
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	88 30       	cpi	r24, 0x08	; 8
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <DIO_voidSetPinValue+0x22>
    19f6:	ec c0       	rjmp	.+472    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
	{
		if(Copy_u8PinValue == PIN_HIGH)
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	81 30       	cpi	r24, 0x01	; 1
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <DIO_voidSetPinValue+0x2a>
    19fe:	70 c0       	rjmp	.+224    	; 0x1ae0 <DIO_voidSetPinValue+0x10a>
		{
			switch(Copy_u8PortNum)
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	28 2f       	mov	r18, r24
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	3f 83       	std	Y+7, r19	; 0x07
    1a08:	2e 83       	std	Y+6, r18	; 0x06
    1a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1a0e:	82 30       	cpi	r24, 0x02	; 2
    1a10:	91 05       	cpc	r25, r1
    1a12:	51 f1       	breq	.+84     	; 0x1a68 <DIO_voidSetPinValue+0x92>
    1a14:	2e 81       	ldd	r18, Y+6	; 0x06
    1a16:	3f 81       	ldd	r19, Y+7	; 0x07
    1a18:	23 30       	cpi	r18, 0x03	; 3
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	34 f4       	brge	.+12     	; 0x1a2a <DIO_voidSetPinValue+0x54>
    1a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a20:	9f 81       	ldd	r25, Y+7	; 0x07
    1a22:	81 30       	cpi	r24, 0x01	; 1
    1a24:	91 05       	cpc	r25, r1
    1a26:	61 f0       	breq	.+24     	; 0x1a40 <DIO_voidSetPinValue+0x6a>
    1a28:	d3 c0       	rjmp	.+422    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
    1a2a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a2c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a2e:	23 30       	cpi	r18, 0x03	; 3
    1a30:	31 05       	cpc	r19, r1
    1a32:	71 f1       	breq	.+92     	; 0x1a90 <DIO_voidSetPinValue+0xba>
    1a34:	8e 81       	ldd	r24, Y+6	; 0x06
    1a36:	9f 81       	ldd	r25, Y+7	; 0x07
    1a38:	84 30       	cpi	r24, 0x04	; 4
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	e9 f1       	breq	.+122    	; 0x1ab8 <DIO_voidSetPinValue+0xe2>
    1a3e:	c8 c0       	rjmp	.+400    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
			{
				case PORT_u8A :
				{
					SET_BIT(PORTA,Copy_u8PinNum);
    1a40:	ab e3       	ldi	r26, 0x3B	; 59
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	eb e3       	ldi	r30, 0x3B	; 59
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	48 2f       	mov	r20, r24
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	28 2f       	mov	r18, r24
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	02 2e       	mov	r0, r18
    1a58:	02 c0       	rjmp	.+4      	; 0x1a5e <DIO_voidSetPinValue+0x88>
    1a5a:	88 0f       	add	r24, r24
    1a5c:	99 1f       	adc	r25, r25
    1a5e:	0a 94       	dec	r0
    1a60:	e2 f7       	brpl	.-8      	; 0x1a5a <DIO_voidSetPinValue+0x84>
    1a62:	84 2b       	or	r24, r20
    1a64:	8c 93       	st	X, r24
    1a66:	b4 c0       	rjmp	.+360    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
				case PORT_u8B :
				{
					SET_BIT(PORTB,Copy_u8PinNum);
    1a68:	a8 e3       	ldi	r26, 0x38	; 56
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	e8 e3       	ldi	r30, 0x38	; 56
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	80 81       	ld	r24, Z
    1a72:	48 2f       	mov	r20, r24
    1a74:	8a 81       	ldd	r24, Y+2	; 0x02
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	81 e0       	ldi	r24, 0x01	; 1
    1a7c:	90 e0       	ldi	r25, 0x00	; 0
    1a7e:	02 2e       	mov	r0, r18
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <DIO_voidSetPinValue+0xb0>
    1a82:	88 0f       	add	r24, r24
    1a84:	99 1f       	adc	r25, r25
    1a86:	0a 94       	dec	r0
    1a88:	e2 f7       	brpl	.-8      	; 0x1a82 <DIO_voidSetPinValue+0xac>
    1a8a:	84 2b       	or	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	a0 c0       	rjmp	.+320    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
				case PORT_u8C :
				{
					SET_BIT(PORTC,Copy_u8PinNum);
    1a90:	a5 e3       	ldi	r26, 0x35	; 53
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e5 e3       	ldi	r30, 0x35	; 53
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_voidSetPinValue+0xd8>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_voidSetPinValue+0xd4>
    1ab2:	84 2b       	or	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	8c c0       	rjmp	.+280    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
				case PORT_u8D :
				{
					SET_BIT(PORTD,Copy_u8PinNum);
    1ab8:	a2 e3       	ldi	r26, 0x32	; 50
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e2 e3       	ldi	r30, 0x32	; 50
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_voidSetPinValue+0x100>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_voidSetPinValue+0xfc>
    1ada:	84 2b       	or	r24, r20
    1adc:	8c 93       	st	X, r24
    1ade:	78 c0       	rjmp	.+240    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
			}
		}
		else if(Copy_u8PinValue == PIN_LOW)
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	88 23       	and	r24, r24
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <DIO_voidSetPinValue+0x112>
    1ae6:	74 c0       	rjmp	.+232    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
		{
			switch(Copy_u8PortNum)
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3d 83       	std	Y+5, r19	; 0x05
    1af0:	2c 83       	std	Y+4, r18	; 0x04
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	82 30       	cpi	r24, 0x02	; 2
    1af8:	91 05       	cpc	r25, r1
    1afa:	61 f1       	breq	.+88     	; 0x1b54 <DIO_voidSetPinValue+0x17e>
    1afc:	2c 81       	ldd	r18, Y+4	; 0x04
    1afe:	3d 81       	ldd	r19, Y+5	; 0x05
    1b00:	23 30       	cpi	r18, 0x03	; 3
    1b02:	31 05       	cpc	r19, r1
    1b04:	34 f4       	brge	.+12     	; 0x1b12 <DIO_voidSetPinValue+0x13c>
    1b06:	8c 81       	ldd	r24, Y+4	; 0x04
    1b08:	9d 81       	ldd	r25, Y+5	; 0x05
    1b0a:	81 30       	cpi	r24, 0x01	; 1
    1b0c:	91 05       	cpc	r25, r1
    1b0e:	69 f0       	breq	.+26     	; 0x1b2a <DIO_voidSetPinValue+0x154>
    1b10:	5f c0       	rjmp	.+190    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
    1b12:	2c 81       	ldd	r18, Y+4	; 0x04
    1b14:	3d 81       	ldd	r19, Y+5	; 0x05
    1b16:	23 30       	cpi	r18, 0x03	; 3
    1b18:	31 05       	cpc	r19, r1
    1b1a:	89 f1       	breq	.+98     	; 0x1b7e <DIO_voidSetPinValue+0x1a8>
    1b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b20:	84 30       	cpi	r24, 0x04	; 4
    1b22:	91 05       	cpc	r25, r1
    1b24:	09 f4       	brne	.+2      	; 0x1b28 <DIO_voidSetPinValue+0x152>
    1b26:	40 c0       	rjmp	.+128    	; 0x1ba8 <DIO_voidSetPinValue+0x1d2>
    1b28:	53 c0       	rjmp	.+166    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
			{
				case PORT_u8A :
				{
					CLR_BIT(PORTA,Copy_u8PinNum);
    1b2a:	ab e3       	ldi	r26, 0x3B	; 59
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	eb e3       	ldi	r30, 0x3B	; 59
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	48 2f       	mov	r20, r24
    1b36:	8a 81       	ldd	r24, Y+2	; 0x02
    1b38:	28 2f       	mov	r18, r24
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	81 e0       	ldi	r24, 0x01	; 1
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	02 2e       	mov	r0, r18
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_voidSetPinValue+0x172>
    1b44:	88 0f       	add	r24, r24
    1b46:	99 1f       	adc	r25, r25
    1b48:	0a 94       	dec	r0
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_voidSetPinValue+0x16e>
    1b4c:	80 95       	com	r24
    1b4e:	84 23       	and	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	3e c0       	rjmp	.+124    	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
				case PORT_u8B :
				{
					CLR_BIT(PORTB,Copy_u8PinNum);
    1b54:	a8 e3       	ldi	r26, 0x38	; 56
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	e8 e3       	ldi	r30, 0x38	; 56
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	48 2f       	mov	r20, r24
    1b60:	8a 81       	ldd	r24, Y+2	; 0x02
    1b62:	28 2f       	mov	r18, r24
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	02 2e       	mov	r0, r18
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <DIO_voidSetPinValue+0x19c>
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
    1b72:	0a 94       	dec	r0
    1b74:	e2 f7       	brpl	.-8      	; 0x1b6e <DIO_voidSetPinValue+0x198>
    1b76:	80 95       	com	r24
    1b78:	84 23       	and	r24, r20
    1b7a:	8c 93       	st	X, r24
    1b7c:	29 c0       	rjmp	.+82     	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
				case PORT_u8C :
				{
					CLR_BIT(PORTC,Copy_u8PinNum);
    1b7e:	a5 e3       	ldi	r26, 0x35	; 53
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	e5 e3       	ldi	r30, 0x35	; 53
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	48 2f       	mov	r20, r24
    1b8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	02 2e       	mov	r0, r18
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <DIO_voidSetPinValue+0x1c6>
    1b98:	88 0f       	add	r24, r24
    1b9a:	99 1f       	adc	r25, r25
    1b9c:	0a 94       	dec	r0
    1b9e:	e2 f7       	brpl	.-8      	; 0x1b98 <DIO_voidSetPinValue+0x1c2>
    1ba0:	80 95       	com	r24
    1ba2:	84 23       	and	r24, r20
    1ba4:	8c 93       	st	X, r24
    1ba6:	14 c0       	rjmp	.+40     	; 0x1bd0 <DIO_voidSetPinValue+0x1fa>
					break;
				}
				case PORT_u8D :
				{
					CLR_BIT(PORTD,Copy_u8PinNum);
    1ba8:	a2 e3       	ldi	r26, 0x32	; 50
    1baa:	b0 e0       	ldi	r27, 0x00	; 0
    1bac:	e2 e3       	ldi	r30, 0x32	; 50
    1bae:	f0 e0       	ldi	r31, 0x00	; 0
    1bb0:	80 81       	ld	r24, Z
    1bb2:	48 2f       	mov	r20, r24
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	02 2e       	mov	r0, r18
    1bc0:	02 c0       	rjmp	.+4      	; 0x1bc6 <DIO_voidSetPinValue+0x1f0>
    1bc2:	88 0f       	add	r24, r24
    1bc4:	99 1f       	adc	r25, r25
    1bc6:	0a 94       	dec	r0
    1bc8:	e2 f7       	brpl	.-8      	; 0x1bc2 <DIO_voidSetPinValue+0x1ec>
    1bca:	80 95       	com	r24
    1bcc:	84 23       	and	r24, r20
    1bce:	8c 93       	st	X, r24
					break;
				}
			}
		}
	}
}
    1bd0:	27 96       	adiw	r28, 0x07	; 7
    1bd2:	0f b6       	in	r0, 0x3f	; 63
    1bd4:	f8 94       	cli
    1bd6:	de bf       	out	0x3e, r29	; 62
    1bd8:	0f be       	out	0x3f, r0	; 63
    1bda:	cd bf       	out	0x3d, r28	; 61
    1bdc:	cf 91       	pop	r28
    1bde:	df 91       	pop	r29
    1be0:	08 95       	ret

00001be2 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PortNum ,u8 Copy_u8PinNum)
{
    1be2:	df 93       	push	r29
    1be4:	cf 93       	push	r28
    1be6:	00 d0       	rcall	.+0      	; 0x1be8 <DIO_u8GetPinValue+0x6>
    1be8:	00 d0       	rcall	.+0      	; 0x1bea <DIO_u8GetPinValue+0x8>
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	8a 83       	std	Y+2, r24	; 0x02
    1bf2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8PinState=0;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
	
	switch(Copy_u8PortNum)
    1bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf8:	28 2f       	mov	r18, r24
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	3d 83       	std	Y+5, r19	; 0x05
    1bfe:	2c 83       	std	Y+4, r18	; 0x04
    1c00:	4c 81       	ldd	r20, Y+4	; 0x04
    1c02:	5d 81       	ldd	r21, Y+5	; 0x05
    1c04:	42 30       	cpi	r20, 0x02	; 2
    1c06:	51 05       	cpc	r21, r1
    1c08:	41 f1       	breq	.+80     	; 0x1c5a <DIO_u8GetPinValue+0x78>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	91 05       	cpc	r25, r1
    1c12:	34 f4       	brge	.+12     	; 0x1c20 <DIO_u8GetPinValue+0x3e>
    1c14:	2c 81       	ldd	r18, Y+4	; 0x04
    1c16:	3d 81       	ldd	r19, Y+5	; 0x05
    1c18:	21 30       	cpi	r18, 0x01	; 1
    1c1a:	31 05       	cpc	r19, r1
    1c1c:	61 f0       	breq	.+24     	; 0x1c36 <DIO_u8GetPinValue+0x54>
    1c1e:	52 c0       	rjmp	.+164    	; 0x1cc4 <DIO_u8GetPinValue+0xe2>
    1c20:	4c 81       	ldd	r20, Y+4	; 0x04
    1c22:	5d 81       	ldd	r21, Y+5	; 0x05
    1c24:	43 30       	cpi	r20, 0x03	; 3
    1c26:	51 05       	cpc	r21, r1
    1c28:	51 f1       	breq	.+84     	; 0x1c7e <DIO_u8GetPinValue+0x9c>
    1c2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c2e:	84 30       	cpi	r24, 0x04	; 4
    1c30:	91 05       	cpc	r25, r1
    1c32:	b9 f1       	breq	.+110    	; 0x1ca2 <DIO_u8GetPinValue+0xc0>
    1c34:	47 c0       	rjmp	.+142    	; 0x1cc4 <DIO_u8GetPinValue+0xe2>
	{
		case PORT_u8A:
		{
			Local_u8PinState = GET_BIT(PINA,Copy_u8PinNum);
    1c36:	e9 e3       	ldi	r30, 0x39	; 57
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	28 2f       	mov	r18, r24
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	88 2f       	mov	r24, r24
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	a9 01       	movw	r20, r18
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <DIO_u8GetPinValue+0x6c>
    1c4a:	55 95       	asr	r21
    1c4c:	47 95       	ror	r20
    1c4e:	8a 95       	dec	r24
    1c50:	e2 f7       	brpl	.-8      	; 0x1c4a <DIO_u8GetPinValue+0x68>
    1c52:	ca 01       	movw	r24, r20
    1c54:	81 70       	andi	r24, 0x01	; 1
    1c56:	89 83       	std	Y+1, r24	; 0x01
    1c58:	35 c0       	rjmp	.+106    	; 0x1cc4 <DIO_u8GetPinValue+0xe2>
			break;
		}
		case PORT_u8B:
		{
			Local_u8PinState = GET_BIT(PINB,Copy_u8PinNum);
    1c5a:	e6 e3       	ldi	r30, 0x36	; 54
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	28 2f       	mov	r18, r24
    1c62:	30 e0       	ldi	r19, 0x00	; 0
    1c64:	8b 81       	ldd	r24, Y+3	; 0x03
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	a9 01       	movw	r20, r18
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <DIO_u8GetPinValue+0x90>
    1c6e:	55 95       	asr	r21
    1c70:	47 95       	ror	r20
    1c72:	8a 95       	dec	r24
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <DIO_u8GetPinValue+0x8c>
    1c76:	ca 01       	movw	r24, r20
    1c78:	81 70       	andi	r24, 0x01	; 1
    1c7a:	89 83       	std	Y+1, r24	; 0x01
    1c7c:	23 c0       	rjmp	.+70     	; 0x1cc4 <DIO_u8GetPinValue+0xe2>
			break;
		}
		case PORT_u8C:
		{
			Local_u8PinState = GET_BIT(PINC,Copy_u8PinNum);
    1c7e:	e3 e3       	ldi	r30, 0x33	; 51
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8a:	88 2f       	mov	r24, r24
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	a9 01       	movw	r20, r18
    1c90:	02 c0       	rjmp	.+4      	; 0x1c96 <DIO_u8GetPinValue+0xb4>
    1c92:	55 95       	asr	r21
    1c94:	47 95       	ror	r20
    1c96:	8a 95       	dec	r24
    1c98:	e2 f7       	brpl	.-8      	; 0x1c92 <DIO_u8GetPinValue+0xb0>
    1c9a:	ca 01       	movw	r24, r20
    1c9c:	81 70       	andi	r24, 0x01	; 1
    1c9e:	89 83       	std	Y+1, r24	; 0x01
    1ca0:	11 c0       	rjmp	.+34     	; 0x1cc4 <DIO_u8GetPinValue+0xe2>
			break;
		}
		case PORT_u8D:
		{
			Local_u8PinState = GET_BIT(PIND,Copy_u8PinNum);
    1ca2:	e0 e3       	ldi	r30, 0x30	; 48
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	28 2f       	mov	r18, r24
    1caa:	30 e0       	ldi	r19, 0x00	; 0
    1cac:	8b 81       	ldd	r24, Y+3	; 0x03
    1cae:	88 2f       	mov	r24, r24
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a9 01       	movw	r20, r18
    1cb4:	02 c0       	rjmp	.+4      	; 0x1cba <DIO_u8GetPinValue+0xd8>
    1cb6:	55 95       	asr	r21
    1cb8:	47 95       	ror	r20
    1cba:	8a 95       	dec	r24
    1cbc:	e2 f7       	brpl	.-8      	; 0x1cb6 <DIO_u8GetPinValue+0xd4>
    1cbe:	ca 01       	movw	r24, r20
    1cc0:	81 70       	andi	r24, 0x01	; 1
    1cc2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
		
	}
	return Local_u8PinState;
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <DIO_voidTooglePin>:

void DIO_voidTooglePin(u8 Copy_u8PortNum , u8 Copy_u8PinNum)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <DIO_voidTooglePin+0x6>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <DIO_voidTooglePin+0x8>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	89 83       	std	Y+1, r24	; 0x01
    1ce4:	6a 83       	std	Y+2, r22	; 0x02
    	switch(Copy_u8PortNum)
    1ce6:	89 81       	ldd	r24, Y+1	; 0x01
    1ce8:	28 2f       	mov	r18, r24
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	3c 83       	std	Y+4, r19	; 0x04
    1cee:	2b 83       	std	Y+3, r18	; 0x03
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf4:	82 30       	cpi	r24, 0x02	; 2
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	51 f1       	breq	.+84     	; 0x1d4e <DIO_voidTooglePin+0x78>
    1cfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfe:	23 30       	cpi	r18, 0x03	; 3
    1d00:	31 05       	cpc	r19, r1
    1d02:	34 f4       	brge	.+12     	; 0x1d10 <DIO_voidTooglePin+0x3a>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	91 05       	cpc	r25, r1
    1d0c:	61 f0       	breq	.+24     	; 0x1d26 <DIO_voidTooglePin+0x50>
    1d0e:	5a c0       	rjmp	.+180    	; 0x1dc4 <DIO_voidTooglePin+0xee>
    1d10:	2b 81       	ldd	r18, Y+3	; 0x03
    1d12:	3c 81       	ldd	r19, Y+4	; 0x04
    1d14:	23 30       	cpi	r18, 0x03	; 3
    1d16:	31 05       	cpc	r19, r1
    1d18:	71 f1       	breq	.+92     	; 0x1d76 <DIO_voidTooglePin+0xa0>
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	84 30       	cpi	r24, 0x04	; 4
    1d20:	91 05       	cpc	r25, r1
    1d22:	e9 f1       	breq	.+122    	; 0x1d9e <DIO_voidTooglePin+0xc8>
    1d24:	4f c0       	rjmp	.+158    	; 0x1dc4 <DIO_voidTooglePin+0xee>
			{
				case PORT_u8A :
				{
					TOG_BIT(PORTA,Copy_u8PinNum);
    1d26:	ab e3       	ldi	r26, 0x3B	; 59
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <DIO_voidTooglePin+0x6e>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <DIO_voidTooglePin+0x6a>
    1d48:	84 27       	eor	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	3b c0       	rjmp	.+118    	; 0x1dc4 <DIO_voidTooglePin+0xee>
					break;
				}
				case PORT_u8B :
				{
					TOG_BIT(PORTB,Copy_u8PinNum);
    1d4e:	a8 e3       	ldi	r26, 0x38	; 56
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e8 e3       	ldi	r30, 0x38	; 56
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <DIO_voidTooglePin+0x96>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <DIO_voidTooglePin+0x92>
    1d70:	84 27       	eor	r24, r20
    1d72:	8c 93       	st	X, r24
    1d74:	27 c0       	rjmp	.+78     	; 0x1dc4 <DIO_voidTooglePin+0xee>
					break;
				}
				case PORT_u8C :
				{
					TOG_BIT(PORTC,Copy_u8PinNum);
    1d76:	a5 e3       	ldi	r26, 0x35	; 53
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e5 e3       	ldi	r30, 0x35	; 53
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_voidTooglePin+0xbe>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_voidTooglePin+0xba>
    1d98:	84 27       	eor	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	13 c0       	rjmp	.+38     	; 0x1dc4 <DIO_voidTooglePin+0xee>
					break;
				}
				case PORT_u8D :
				{
					TOG_BIT(PORTD,Copy_u8PinNum);
    1d9e:	a2 e3       	ldi	r26, 0x32	; 50
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e2 e3       	ldi	r30, 0x32	; 50
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_voidTooglePin+0xe6>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_voidTooglePin+0xe2>
    1dc0:	84 27       	eor	r24, r20
    1dc2:	8c 93       	st	X, r24
					break;
				}
			}
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	cf 91       	pop	r28
    1dce:	df 91       	pop	r29
    1dd0:	08 95       	ret

00001dd2 <EEPROM_voidWriteDataByte>:
#include "EEPROM_private.h"

#include <util/delay.h>

void EEPROM_voidWriteDataByte(u8 Copy_u8DeviceNumber,u16 Copy_u16Location,u8 Copy_u8DataByte)
{
    1dd2:	df 93       	push	r29
    1dd4:	cf 93       	push	r28
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	a1 97       	sbiw	r28, 0x21	; 33
    1ddc:	0f b6       	in	r0, 0x3f	; 63
    1dde:	f8 94       	cli
    1de0:	de bf       	out	0x3e, r29	; 62
    1de2:	0f be       	out	0x3f, r0	; 63
    1de4:	cd bf       	out	0x3d, r28	; 61
    1de6:	8e 8f       	std	Y+30, r24	; 0x1e
    1de8:	78 a3       	std	Y+32, r23	; 0x20
    1dea:	6f 8f       	std	Y+31, r22	; 0x1f
    1dec:	49 a3       	std	Y+33, r20	; 0x21
	u8 Copy_u8SlaveAddress;
	Copy_u8SlaveAddress=(0b01010000)|(Copy_u8DeviceNumber << 2)|(Copy_u16Location>>8);
    1dee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1df0:	28 2f       	mov	r18, r24
    1df2:	22 0f       	add	r18, r18
    1df4:	22 0f       	add	r18, r18
    1df6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1df8:	98 a1       	ldd	r25, Y+32	; 0x20
    1dfa:	89 2f       	mov	r24, r25
    1dfc:	99 27       	eor	r25, r25
    1dfe:	82 2b       	or	r24, r18
    1e00:	80 65       	ori	r24, 0x50	; 80
    1e02:	8d 8f       	std	Y+29, r24	; 0x1d
	TWI_voidSendStartCondition();
    1e04:	0e 94 00 16 	call	0x2c00	; 0x2c00 <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAdressWithWrite(Copy_u8SlaveAddress);
    1e08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e0a:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <TWI_voidSendSlaveAdressWithWrite>
	TWI_voidMasterSendDataByte((u8)Copy_u16Location);
    1e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e10:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TWI_voidMasterSendDataByte>
	TWI_voidMasterSendDataByte(Copy_u8DataByte);
    1e14:	89 a1       	ldd	r24, Y+33	; 0x21
    1e16:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TWI_voidMasterSendDataByte>
	TWI_voidSendStopCondition();
    1e1a:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <TWI_voidSendStopCondition>
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	a0 ea       	ldi	r26, 0xA0	; 160
    1e24:	b0 e4       	ldi	r27, 0x40	; 64
    1e26:	89 8f       	std	Y+25, r24	; 0x19
    1e28:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2a:	ab 8f       	std	Y+27, r26	; 0x1b
    1e2c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1e30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e36:	20 e0       	ldi	r18, 0x00	; 0
    1e38:	30 e0       	ldi	r19, 0x00	; 0
    1e3a:	4a ef       	ldi	r20, 0xFA	; 250
    1e3c:	54 e4       	ldi	r21, 0x44	; 68
    1e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	8d 8b       	std	Y+21, r24	; 0x15
    1e48:	9e 8b       	std	Y+22, r25	; 0x16
    1e4a:	af 8b       	std	Y+23, r26	; 0x17
    1e4c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e4e:	6d 89       	ldd	r22, Y+21	; 0x15
    1e50:	7e 89       	ldd	r23, Y+22	; 0x16
    1e52:	8f 89       	ldd	r24, Y+23	; 0x17
    1e54:	98 8d       	ldd	r25, Y+24	; 0x18
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e8       	ldi	r20, 0x80	; 128
    1e5c:	5f e3       	ldi	r21, 0x3F	; 63
    1e5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e62:	88 23       	and	r24, r24
    1e64:	2c f4       	brge	.+10     	; 0x1e70 <EEPROM_voidWriteDataByte+0x9e>
		__ticks = 1;
    1e66:	81 e0       	ldi	r24, 0x01	; 1
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	9c 8b       	std	Y+20, r25	; 0x14
    1e6c:	8b 8b       	std	Y+19, r24	; 0x13
    1e6e:	3f c0       	rjmp	.+126    	; 0x1eee <EEPROM_voidWriteDataByte+0x11c>
	else if (__tmp > 65535)
    1e70:	6d 89       	ldd	r22, Y+21	; 0x15
    1e72:	7e 89       	ldd	r23, Y+22	; 0x16
    1e74:	8f 89       	ldd	r24, Y+23	; 0x17
    1e76:	98 8d       	ldd	r25, Y+24	; 0x18
    1e78:	20 e0       	ldi	r18, 0x00	; 0
    1e7a:	3f ef       	ldi	r19, 0xFF	; 255
    1e7c:	4f e7       	ldi	r20, 0x7F	; 127
    1e7e:	57 e4       	ldi	r21, 0x47	; 71
    1e80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e84:	18 16       	cp	r1, r24
    1e86:	4c f5       	brge	.+82     	; 0x1eda <EEPROM_voidWriteDataByte+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e88:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	40 e2       	ldi	r20, 0x20	; 32
    1e96:	51 e4       	ldi	r21, 0x41	; 65
    1e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	9c 8b       	std	Y+20, r25	; 0x14
    1eae:	8b 8b       	std	Y+19, r24	; 0x13
    1eb0:	0f c0       	rjmp	.+30     	; 0x1ed0 <EEPROM_voidWriteDataByte+0xfe>
    1eb2:	88 ec       	ldi	r24, 0xC8	; 200
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	9a 8b       	std	Y+18, r25	; 0x12
    1eb8:	89 8b       	std	Y+17, r24	; 0x11
    1eba:	89 89       	ldd	r24, Y+17	; 0x11
    1ebc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ebe:	01 97       	sbiw	r24, 0x01	; 1
    1ec0:	f1 f7       	brne	.-4      	; 0x1ebe <EEPROM_voidWriteDataByte+0xec>
    1ec2:	9a 8b       	std	Y+18, r25	; 0x12
    1ec4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ec8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eca:	01 97       	sbiw	r24, 0x01	; 1
    1ecc:	9c 8b       	std	Y+20, r25	; 0x14
    1ece:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed4:	00 97       	sbiw	r24, 0x00	; 0
    1ed6:	69 f7       	brne	.-38     	; 0x1eb2 <EEPROM_voidWriteDataByte+0xe0>
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <EEPROM_voidWriteDataByte+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eda:	6d 89       	ldd	r22, Y+21	; 0x15
    1edc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ede:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee6:	dc 01       	movw	r26, r24
    1ee8:	cb 01       	movw	r24, r22
    1eea:	9c 8b       	std	Y+20, r25	; 0x14
    1eec:	8b 8b       	std	Y+19, r24	; 0x13
    1eee:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef2:	98 8b       	std	Y+16, r25	; 0x10
    1ef4:	8f 87       	std	Y+15, r24	; 0x0f
    1ef6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ef8:	98 89       	ldd	r25, Y+16	; 0x10
    1efa:	01 97       	sbiw	r24, 0x01	; 1
    1efc:	f1 f7       	brne	.-4      	; 0x1efa <EEPROM_voidWriteDataByte+0x128>
    1efe:	98 8b       	std	Y+16, r25	; 0x10
    1f00:	8f 87       	std	Y+15, r24	; 0x0f
    1f02:	80 e0       	ldi	r24, 0x00	; 0
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	a0 ea       	ldi	r26, 0xA0	; 160
    1f08:	b0 e4       	ldi	r27, 0x40	; 64
    1f0a:	8b 87       	std	Y+11, r24	; 0x0b
    1f0c:	9c 87       	std	Y+12, r25	; 0x0c
    1f0e:	ad 87       	std	Y+13, r26	; 0x0d
    1f10:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f12:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f14:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a ef       	ldi	r20, 0xFA	; 250
    1f20:	54 e4       	ldi	r21, 0x44	; 68
    1f22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	8f 83       	std	Y+7, r24	; 0x07
    1f2c:	98 87       	std	Y+8, r25	; 0x08
    1f2e:	a9 87       	std	Y+9, r26	; 0x09
    1f30:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f32:	6f 81       	ldd	r22, Y+7	; 0x07
    1f34:	78 85       	ldd	r23, Y+8	; 0x08
    1f36:	89 85       	ldd	r24, Y+9	; 0x09
    1f38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	30 e0       	ldi	r19, 0x00	; 0
    1f3e:	40 e8       	ldi	r20, 0x80	; 128
    1f40:	5f e3       	ldi	r21, 0x3F	; 63
    1f42:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f46:	88 23       	and	r24, r24
    1f48:	2c f4       	brge	.+10     	; 0x1f54 <EEPROM_voidWriteDataByte+0x182>
		__ticks = 1;
    1f4a:	81 e0       	ldi	r24, 0x01	; 1
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	9e 83       	std	Y+6, r25	; 0x06
    1f50:	8d 83       	std	Y+5, r24	; 0x05
    1f52:	3f c0       	rjmp	.+126    	; 0x1fd2 <EEPROM_voidWriteDataByte+0x200>
	else if (__tmp > 65535)
    1f54:	6f 81       	ldd	r22, Y+7	; 0x07
    1f56:	78 85       	ldd	r23, Y+8	; 0x08
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	3f ef       	ldi	r19, 0xFF	; 255
    1f60:	4f e7       	ldi	r20, 0x7F	; 127
    1f62:	57 e4       	ldi	r21, 0x47	; 71
    1f64:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f68:	18 16       	cp	r1, r24
    1f6a:	4c f5       	brge	.+82     	; 0x1fbe <EEPROM_voidWriteDataByte+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e2       	ldi	r20, 0x20	; 32
    1f7a:	51 e4       	ldi	r21, 0x41	; 65
    1f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <EEPROM_voidWriteDataByte+0x1e2>
    1f96:	88 ec       	ldi	r24, 0xC8	; 200
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	f1 f7       	brne	.-4      	; 0x1fa2 <EEPROM_voidWriteDataByte+0x1d0>
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	9e 81       	ldd	r25, Y+6	; 0x06
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	9e 83       	std	Y+6, r25	; 0x06
    1fb2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	69 f7       	brne	.-38     	; 0x1f96 <EEPROM_voidWriteDataByte+0x1c4>
    1fbc:	14 c0       	rjmp	.+40     	; 0x1fe6 <EEPROM_voidWriteDataByte+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc0:	78 85       	ldd	r23, Y+8	; 0x08
    1fc2:	89 85       	ldd	r24, Y+9	; 0x09
    1fc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9e 83       	std	Y+6, r25	; 0x06
    1fd0:	8d 83       	std	Y+5, r24	; 0x05
    1fd2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fd4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fde:	01 97       	sbiw	r24, 0x01	; 1
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <EEPROM_voidWriteDataByte+0x20c>
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	_delay_ms(5);
}
    1fe6:	a1 96       	adiw	r28, 0x21	; 33
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	cf 91       	pop	r28
    1ff4:	df 91       	pop	r29
    1ff6:	08 95       	ret

00001ff8 <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u8 Copy_u8DeviceNumber,u16 Copy_u16Location)
{
    1ff8:	df 93       	push	r29
    1ffa:	cf 93       	push	r28
    1ffc:	00 d0       	rcall	.+0      	; 0x1ffe <EEPROM_u8ReadDataByte+0x6>
    1ffe:	00 d0       	rcall	.+0      	; 0x2000 <EEPROM_u8ReadDataByte+0x8>
    2000:	0f 92       	push	r0
    2002:	cd b7       	in	r28, 0x3d	; 61
    2004:	de b7       	in	r29, 0x3e	; 62
    2006:	8b 83       	std	Y+3, r24	; 0x03
    2008:	7d 83       	std	Y+5, r23	; 0x05
    200a:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8ReturnData;
	u8 Copy_u8SlaveAddress;
	Copy_u8SlaveAddress=(0b01010000)|(Copy_u8DeviceNumber << 2)|(Copy_u16Location>>8);
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	28 2f       	mov	r18, r24
    2010:	22 0f       	add	r18, r18
    2012:	22 0f       	add	r18, r18
    2014:	8c 81       	ldd	r24, Y+4	; 0x04
    2016:	9d 81       	ldd	r25, Y+5	; 0x05
    2018:	89 2f       	mov	r24, r25
    201a:	99 27       	eor	r25, r25
    201c:	82 2b       	or	r24, r18
    201e:	80 65       	ori	r24, 0x50	; 80
    2020:	89 83       	std	Y+1, r24	; 0x01
	TWI_voidSendStartCondition();
    2022:	0e 94 00 16 	call	0x2c00	; 0x2c00 <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAdressWithWrite(Copy_u8SlaveAddress);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <TWI_voidSendSlaveAdressWithWrite>
	TWI_voidMasterSendDataByte((u8)Copy_u16Location);
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TWI_voidMasterSendDataByte>
	TWI_voidSendStartCondition();
    2032:	0e 94 00 16 	call	0x2c00	; 0x2c00 <TWI_voidSendStartCondition>
	TWI_voidSendSlaveAdressWithRead(Copy_u8SlaveAddress);
    2036:	89 81       	ldd	r24, Y+1	; 0x01
    2038:	0e 94 43 16 	call	0x2c86	; 0x2c86 <TWI_voidSendSlaveAdressWithRead>
	Local_u8ReturnData=TWI_u8MasterRecieveDataByte();
    203c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <TWI_u8MasterRecieveDataByte>
    2040:	8a 83       	std	Y+2, r24	; 0x02
	TWI_voidSendStopCondition();
    2042:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <TWI_voidSendStopCondition>

	return Local_u8ReturnData;
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2048:	0f 90       	pop	r0
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	cf 91       	pop	r28
    2054:	df 91       	pop	r29
    2056:	08 95       	ret

00002058 <EXTI_voidEnableDisable>:
#include "EXTI_config.h"

static void (*GlobalPtrTofunc[3])(void)={NULL};

void EXTI_voidEnableDisable(Int_num_e Copy_e_IntNum,Int_Mode_e Copy_e_Mode)
{
    2058:	df 93       	push	r29
    205a:	cf 93       	push	r28
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	2a 97       	sbiw	r28, 0x0a	; 10
    2062:	0f b6       	in	r0, 0x3f	; 63
    2064:	f8 94       	cli
    2066:	de bf       	out	0x3e, r29	; 62
    2068:	0f be       	out	0x3f, r0	; 63
    206a:	cd bf       	out	0x3d, r28	; 61
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_e_IntNum)
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	28 2f       	mov	r18, r24
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	3a 87       	std	Y+10, r19	; 0x0a
    2078:	29 87       	std	Y+9, r18	; 0x09
    207a:	89 85       	ldd	r24, Y+9	; 0x09
    207c:	9a 85       	ldd	r25, Y+10	; 0x0a
    207e:	81 30       	cpi	r24, 0x01	; 1
    2080:	91 05       	cpc	r25, r1
    2082:	51 f1       	breq	.+84     	; 0x20d8 <EXTI_voidEnableDisable+0x80>
    2084:	29 85       	ldd	r18, Y+9	; 0x09
    2086:	3a 85       	ldd	r19, Y+10	; 0x0a
    2088:	22 30       	cpi	r18, 0x02	; 2
    208a:	31 05       	cpc	r19, r1
    208c:	09 f4       	brne	.+2      	; 0x2090 <EXTI_voidEnableDisable+0x38>
    208e:	43 c0       	rjmp	.+134    	; 0x2116 <EXTI_voidEnableDisable+0xbe>
    2090:	89 85       	ldd	r24, Y+9	; 0x09
    2092:	9a 85       	ldd	r25, Y+10	; 0x0a
    2094:	00 97       	sbiw	r24, 0x00	; 0
    2096:	09 f0       	breq	.+2      	; 0x209a <EXTI_voidEnableDisable+0x42>
    2098:	5c c0       	rjmp	.+184    	; 0x2152 <EXTI_voidEnableDisable+0xfa>
	{
	case INT_0:
	{
		switch(Copy_e_Mode)
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	28 2f       	mov	r18, r24
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	38 87       	std	Y+8, r19	; 0x08
    20a2:	2f 83       	std	Y+7, r18	; 0x07
    20a4:	8f 81       	ldd	r24, Y+7	; 0x07
    20a6:	98 85       	ldd	r25, Y+8	; 0x08
    20a8:	00 97       	sbiw	r24, 0x00	; 0
    20aa:	31 f0       	breq	.+12     	; 0x20b8 <EXTI_voidEnableDisable+0x60>
    20ac:	2f 81       	ldd	r18, Y+7	; 0x07
    20ae:	38 85       	ldd	r19, Y+8	; 0x08
    20b0:	21 30       	cpi	r18, 0x01	; 1
    20b2:	31 05       	cpc	r19, r1
    20b4:	49 f0       	breq	.+18     	; 0x20c8 <EXTI_voidEnableDisable+0x70>
    20b6:	4d c0       	rjmp	.+154    	; 0x2152 <EXTI_voidEnableDisable+0xfa>
		{
		case Enabled :
		{
			SET_BIT(GICR,GICR_INT0);
    20b8:	ab e5       	ldi	r26, 0x5B	; 91
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	eb e5       	ldi	r30, 0x5B	; 91
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	80 64       	ori	r24, 0x40	; 64
    20c4:	8c 93       	st	X, r24
    20c6:	45 c0       	rjmp	.+138    	; 0x2152 <EXTI_voidEnableDisable+0xfa>
			break;
		}
		case Disabled :
		{
			CLR_BIT(GICR,GICR_INT0);
    20c8:	ab e5       	ldi	r26, 0x5B	; 91
    20ca:	b0 e0       	ldi	r27, 0x00	; 0
    20cc:	eb e5       	ldi	r30, 0x5B	; 91
    20ce:	f0 e0       	ldi	r31, 0x00	; 0
    20d0:	80 81       	ld	r24, Z
    20d2:	8f 7b       	andi	r24, 0xBF	; 191
    20d4:	8c 93       	st	X, r24
    20d6:	3d c0       	rjmp	.+122    	; 0x2152 <EXTI_voidEnableDisable+0xfa>
		}
		break;
	}
	case INT_1 :
	{
		switch(Copy_e_Mode)
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	28 2f       	mov	r18, r24
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	3e 83       	std	Y+6, r19	; 0x06
    20e0:	2d 83       	std	Y+5, r18	; 0x05
    20e2:	8d 81       	ldd	r24, Y+5	; 0x05
    20e4:	9e 81       	ldd	r25, Y+6	; 0x06
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	31 f0       	breq	.+12     	; 0x20f6 <EXTI_voidEnableDisable+0x9e>
    20ea:	2d 81       	ldd	r18, Y+5	; 0x05
    20ec:	3e 81       	ldd	r19, Y+6	; 0x06
    20ee:	21 30       	cpi	r18, 0x01	; 1
    20f0:	31 05       	cpc	r19, r1
    20f2:	49 f0       	breq	.+18     	; 0x2106 <EXTI_voidEnableDisable+0xae>
    20f4:	2e c0       	rjmp	.+92     	; 0x2152 <EXTI_voidEnableDisable+0xfa>
		{
		case Enabled :
		{
			SET_BIT(GICR,GICR_INT1);
    20f6:	ab e5       	ldi	r26, 0x5B	; 91
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	eb e5       	ldi	r30, 0x5B	; 91
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	80 68       	ori	r24, 0x80	; 128
    2102:	8c 93       	st	X, r24
    2104:	26 c0       	rjmp	.+76     	; 0x2152 <EXTI_voidEnableDisable+0xfa>
			break;
		}
		case Disabled :
		{
			CLR_BIT(GICR,GICR_INT1);
    2106:	ab e5       	ldi	r26, 0x5B	; 91
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	eb e5       	ldi	r30, 0x5B	; 91
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 81       	ld	r24, Z
    2110:	8f 77       	andi	r24, 0x7F	; 127
    2112:	8c 93       	st	X, r24
    2114:	1e c0       	rjmp	.+60     	; 0x2152 <EXTI_voidEnableDisable+0xfa>

		break;
	}
	case INT_2 :
	{
		switch(Copy_e_Mode)
    2116:	8a 81       	ldd	r24, Y+2	; 0x02
    2118:	28 2f       	mov	r18, r24
    211a:	30 e0       	ldi	r19, 0x00	; 0
    211c:	3c 83       	std	Y+4, r19	; 0x04
    211e:	2b 83       	std	Y+3, r18	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	00 97       	sbiw	r24, 0x00	; 0
    2126:	31 f0       	breq	.+12     	; 0x2134 <EXTI_voidEnableDisable+0xdc>
    2128:	2b 81       	ldd	r18, Y+3	; 0x03
    212a:	3c 81       	ldd	r19, Y+4	; 0x04
    212c:	21 30       	cpi	r18, 0x01	; 1
    212e:	31 05       	cpc	r19, r1
    2130:	49 f0       	breq	.+18     	; 0x2144 <EXTI_voidEnableDisable+0xec>
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <EXTI_voidEnableDisable+0xfa>
		{
		case Enabled :
		{
			SET_BIT(GICR,GICR_INT2);
    2134:	ab e5       	ldi	r26, 0x5B	; 91
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	eb e5       	ldi	r30, 0x5B	; 91
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 62       	ori	r24, 0x20	; 32
    2140:	8c 93       	st	X, r24
    2142:	07 c0       	rjmp	.+14     	; 0x2152 <EXTI_voidEnableDisable+0xfa>
			break;
		}
		case Disabled :
		{
			CLR_BIT(GICR,GICR_INT2);
    2144:	ab e5       	ldi	r26, 0x5B	; 91
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	eb e5       	ldi	r30, 0x5B	; 91
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	8f 7d       	andi	r24, 0xDF	; 223
    2150:	8c 93       	st	X, r24

		break;
	}

	}
}
    2152:	2a 96       	adiw	r28, 0x0a	; 10
    2154:	0f b6       	in	r0, 0x3f	; 63
    2156:	f8 94       	cli
    2158:	de bf       	out	0x3e, r29	; 62
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	cd bf       	out	0x3d, r28	; 61
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <EXTI_voidSetSenseCtrl>:
void EXTI_voidSetSenseCtrl(Int_num_e Copy_e_IntNum ,Int_SenseCtrl_e Copy_e_SenseCtrl)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
    216c:	2a 97       	sbiw	r28, 0x0a	; 10
    216e:	0f b6       	in	r0, 0x3f	; 63
    2170:	f8 94       	cli
    2172:	de bf       	out	0x3e, r29	; 62
    2174:	0f be       	out	0x3f, r0	; 63
    2176:	cd bf       	out	0x3d, r28	; 61
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_e_IntNum)
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	28 2f       	mov	r18, r24
    2180:	30 e0       	ldi	r19, 0x00	; 0
    2182:	3a 87       	std	Y+10, r19	; 0x0a
    2184:	29 87       	std	Y+9, r18	; 0x09
    2186:	89 85       	ldd	r24, Y+9	; 0x09
    2188:	9a 85       	ldd	r25, Y+10	; 0x0a
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	91 05       	cpc	r25, r1
    218e:	09 f4       	brne	.+2      	; 0x2192 <EXTI_voidSetSenseCtrl+0x2e>
    2190:	66 c0       	rjmp	.+204    	; 0x225e <EXTI_voidSetSenseCtrl+0xfa>
    2192:	29 85       	ldd	r18, Y+9	; 0x09
    2194:	3a 85       	ldd	r19, Y+10	; 0x0a
    2196:	22 30       	cpi	r18, 0x02	; 2
    2198:	31 05       	cpc	r19, r1
    219a:	09 f4       	brne	.+2      	; 0x219e <EXTI_voidSetSenseCtrl+0x3a>
    219c:	bb c0       	rjmp	.+374    	; 0x2314 <EXTI_voidSetSenseCtrl+0x1b0>
    219e:	89 85       	ldd	r24, Y+9	; 0x09
    21a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    21a2:	00 97       	sbiw	r24, 0x00	; 0
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <EXTI_voidSetSenseCtrl+0x44>
    21a6:	d5 c0       	rjmp	.+426    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
	{
	case INT_0:
	{
		switch(Copy_e_SenseCtrl)
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	38 87       	std	Y+8, r19	; 0x08
    21b0:	2f 83       	std	Y+7, r18	; 0x07
    21b2:	8f 81       	ldd	r24, Y+7	; 0x07
    21b4:	98 85       	ldd	r25, Y+8	; 0x08
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	21 f1       	breq	.+72     	; 0x2204 <EXTI_voidSetSenseCtrl+0xa0>
    21bc:	2f 81       	ldd	r18, Y+7	; 0x07
    21be:	38 85       	ldd	r19, Y+8	; 0x08
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <EXTI_voidSetSenseCtrl+0x6c>
    21c6:	8f 81       	ldd	r24, Y+7	; 0x07
    21c8:	98 85       	ldd	r25, Y+8	; 0x08
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <EXTI_voidSetSenseCtrl+0x82>
    21ce:	c1 c0       	rjmp	.+386    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
    21d0:	2f 81       	ldd	r18, Y+7	; 0x07
    21d2:	38 85       	ldd	r19, Y+8	; 0x08
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	21 f1       	breq	.+72     	; 0x2222 <EXTI_voidSetSenseCtrl+0xbe>
    21da:	8f 81       	ldd	r24, Y+7	; 0x07
    21dc:	98 85       	ldd	r25, Y+8	; 0x08
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	91 05       	cpc	r25, r1
    21e2:	71 f1       	breq	.+92     	; 0x2240 <EXTI_voidSetSenseCtrl+0xdc>
    21e4:	b6 c0       	rjmp	.+364    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
		{
		case low_level :
		{
			CLR_BIT(MCUCR,MCUCR_ISC00);
    21e6:	a5 e5       	ldi	r26, 0x55	; 85
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	e5 e5       	ldi	r30, 0x55	; 85
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8e 7f       	andi	r24, 0xFE	; 254
    21f2:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    21f4:	a5 e5       	ldi	r26, 0x55	; 85
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	e5 e5       	ldi	r30, 0x55	; 85
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	8d 7f       	andi	r24, 0xFD	; 253
    2200:	8c 93       	st	X, r24
    2202:	a7 c0       	rjmp	.+334    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case logical_change:
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
    2204:	a5 e5       	ldi	r26, 0x55	; 85
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e5 e5       	ldi	r30, 0x55	; 85
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	81 60       	ori	r24, 0x01	; 1
    2210:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC01);
    2212:	a5 e5       	ldi	r26, 0x55	; 85
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e5 e5       	ldi	r30, 0x55	; 85
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8d 7f       	andi	r24, 0xFD	; 253
    221e:	8c 93       	st	X, r24
    2220:	98 c0       	rjmp	.+304    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case falling_edge:
		{
			CLR_BIT(MCUCR,MCUCR_ISC00);
    2222:	a5 e5       	ldi	r26, 0x55	; 85
    2224:	b0 e0       	ldi	r27, 0x00	; 0
    2226:	e5 e5       	ldi	r30, 0x55	; 85
    2228:	f0 e0       	ldi	r31, 0x00	; 0
    222a:	80 81       	ld	r24, Z
    222c:	8e 7f       	andi	r24, 0xFE	; 254
    222e:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    2230:	a5 e5       	ldi	r26, 0x55	; 85
    2232:	b0 e0       	ldi	r27, 0x00	; 0
    2234:	e5 e5       	ldi	r30, 0x55	; 85
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	80 81       	ld	r24, Z
    223a:	82 60       	ori	r24, 0x02	; 2
    223c:	8c 93       	st	X, r24
    223e:	89 c0       	rjmp	.+274    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case rising_edge:
		{
			SET_BIT(MCUCR,MCUCR_ISC00);
    2240:	a5 e5       	ldi	r26, 0x55	; 85
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e5 e5       	ldi	r30, 0x55	; 85
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	81 60       	ori	r24, 0x01	; 1
    224c:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC01);
    224e:	a5 e5       	ldi	r26, 0x55	; 85
    2250:	b0 e0       	ldi	r27, 0x00	; 0
    2252:	e5 e5       	ldi	r30, 0x55	; 85
    2254:	f0 e0       	ldi	r31, 0x00	; 0
    2256:	80 81       	ld	r24, Z
    2258:	82 60       	ori	r24, 0x02	; 2
    225a:	8c 93       	st	X, r24
    225c:	7a c0       	rjmp	.+244    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
		}
		break;
	}
	case INT_1:
	{
		switch(Copy_e_SenseCtrl)
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	3e 83       	std	Y+6, r19	; 0x06
    2266:	2d 83       	std	Y+5, r18	; 0x05
    2268:	8d 81       	ldd	r24, Y+5	; 0x05
    226a:	9e 81       	ldd	r25, Y+6	; 0x06
    226c:	81 30       	cpi	r24, 0x01	; 1
    226e:	91 05       	cpc	r25, r1
    2270:	21 f1       	breq	.+72     	; 0x22ba <EXTI_voidSetSenseCtrl+0x156>
    2272:	2d 81       	ldd	r18, Y+5	; 0x05
    2274:	3e 81       	ldd	r19, Y+6	; 0x06
    2276:	22 30       	cpi	r18, 0x02	; 2
    2278:	31 05       	cpc	r19, r1
    227a:	2c f4       	brge	.+10     	; 0x2286 <EXTI_voidSetSenseCtrl+0x122>
    227c:	8d 81       	ldd	r24, Y+5	; 0x05
    227e:	9e 81       	ldd	r25, Y+6	; 0x06
    2280:	00 97       	sbiw	r24, 0x00	; 0
    2282:	61 f0       	breq	.+24     	; 0x229c <EXTI_voidSetSenseCtrl+0x138>
    2284:	66 c0       	rjmp	.+204    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
    2286:	2d 81       	ldd	r18, Y+5	; 0x05
    2288:	3e 81       	ldd	r19, Y+6	; 0x06
    228a:	22 30       	cpi	r18, 0x02	; 2
    228c:	31 05       	cpc	r19, r1
    228e:	21 f1       	breq	.+72     	; 0x22d8 <EXTI_voidSetSenseCtrl+0x174>
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	83 30       	cpi	r24, 0x03	; 3
    2296:	91 05       	cpc	r25, r1
    2298:	71 f1       	breq	.+92     	; 0x22f6 <EXTI_voidSetSenseCtrl+0x192>
    229a:	5b c0       	rjmp	.+182    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
		{
		case low_level :
		{
			CLR_BIT(MCUCR,MCUCR_ISC10);
    229c:	a5 e5       	ldi	r26, 0x55	; 85
    229e:	b0 e0       	ldi	r27, 0x00	; 0
    22a0:	e5 e5       	ldi	r30, 0x55	; 85
    22a2:	f0 e0       	ldi	r31, 0x00	; 0
    22a4:	80 81       	ld	r24, Z
    22a6:	8b 7f       	andi	r24, 0xFB	; 251
    22a8:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    22aa:	a5 e5       	ldi	r26, 0x55	; 85
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e5 e5       	ldi	r30, 0x55	; 85
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	87 7f       	andi	r24, 0xF7	; 247
    22b6:	8c 93       	st	X, r24
    22b8:	4c c0       	rjmp	.+152    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case logical_change:
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
    22ba:	a5 e5       	ldi	r26, 0x55	; 85
    22bc:	b0 e0       	ldi	r27, 0x00	; 0
    22be:	e5 e5       	ldi	r30, 0x55	; 85
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	80 81       	ld	r24, Z
    22c4:	84 60       	ori	r24, 0x04	; 4
    22c6:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,MCUCR_ISC11);
    22c8:	a5 e5       	ldi	r26, 0x55	; 85
    22ca:	b0 e0       	ldi	r27, 0x00	; 0
    22cc:	e5 e5       	ldi	r30, 0x55	; 85
    22ce:	f0 e0       	ldi	r31, 0x00	; 0
    22d0:	80 81       	ld	r24, Z
    22d2:	87 7f       	andi	r24, 0xF7	; 247
    22d4:	8c 93       	st	X, r24
    22d6:	3d c0       	rjmp	.+122    	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case falling_edge:
		{
			CLR_BIT(MCUCR,MCUCR_ISC10);
    22d8:	a5 e5       	ldi	r26, 0x55	; 85
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	e5 e5       	ldi	r30, 0x55	; 85
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	8b 7f       	andi	r24, 0xFB	; 251
    22e4:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    22e6:	a5 e5       	ldi	r26, 0x55	; 85
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e5 e5       	ldi	r30, 0x55	; 85
    22ec:	f0 e0       	ldi	r31, 0x00	; 0
    22ee:	80 81       	ld	r24, Z
    22f0:	88 60       	ori	r24, 0x08	; 8
    22f2:	8c 93       	st	X, r24
    22f4:	2e c0       	rjmp	.+92     	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case rising_edge:
		{
			SET_BIT(MCUCR,MCUCR_ISC10);
    22f6:	a5 e5       	ldi	r26, 0x55	; 85
    22f8:	b0 e0       	ldi	r27, 0x00	; 0
    22fa:	e5 e5       	ldi	r30, 0x55	; 85
    22fc:	f0 e0       	ldi	r31, 0x00	; 0
    22fe:	80 81       	ld	r24, Z
    2300:	84 60       	ori	r24, 0x04	; 4
    2302:	8c 93       	st	X, r24
			SET_BIT(MCUCR,MCUCR_ISC11);
    2304:	a5 e5       	ldi	r26, 0x55	; 85
    2306:	b0 e0       	ldi	r27, 0x00	; 0
    2308:	e5 e5       	ldi	r30, 0x55	; 85
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	80 81       	ld	r24, Z
    230e:	88 60       	ori	r24, 0x08	; 8
    2310:	8c 93       	st	X, r24
    2312:	1f c0       	rjmp	.+62     	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
		}
		break;
	}
	case INT_2:
	{
		switch(Copy_e_SenseCtrl)
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	3c 83       	std	Y+4, r19	; 0x04
    231c:	2b 83       	std	Y+3, r18	; 0x03
    231e:	8b 81       	ldd	r24, Y+3	; 0x03
    2320:	9c 81       	ldd	r25, Y+4	; 0x04
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	91 05       	cpc	r25, r1
    2326:	31 f0       	breq	.+12     	; 0x2334 <EXTI_voidSetSenseCtrl+0x1d0>
    2328:	2b 81       	ldd	r18, Y+3	; 0x03
    232a:	3c 81       	ldd	r19, Y+4	; 0x04
    232c:	23 30       	cpi	r18, 0x03	; 3
    232e:	31 05       	cpc	r19, r1
    2330:	49 f0       	breq	.+18     	; 0x2344 <EXTI_voidSetSenseCtrl+0x1e0>
    2332:	0f c0       	rjmp	.+30     	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
		{
		case falling_edge:
		{
			CLR_BIT(MCUCSR,MCUCSR_ISC2);
    2334:	a4 e5       	ldi	r26, 0x54	; 84
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	e4 e5       	ldi	r30, 0x54	; 84
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	8f 7b       	andi	r24, 0xBF	; 191
    2340:	8c 93       	st	X, r24
    2342:	07 c0       	rjmp	.+14     	; 0x2352 <EXTI_voidSetSenseCtrl+0x1ee>
			break;
		}
		case rising_edge:
		{
			SET_BIT(MCUCSR,MCUCSR_ISC2);
    2344:	a4 e5       	ldi	r26, 0x54	; 84
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e4 e5       	ldi	r30, 0x54	; 84
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	80 64       	ori	r24, 0x40	; 64
    2350:	8c 93       	st	X, r24
		}
		break;
	}

	}
}
    2352:	2a 96       	adiw	r28, 0x0a	; 10
    2354:	0f b6       	in	r0, 0x3f	; 63
    2356:	f8 94       	cli
    2358:	de bf       	out	0x3e, r29	; 62
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	cd bf       	out	0x3d, r28	; 61
    235e:	cf 91       	pop	r28
    2360:	df 91       	pop	r29
    2362:	08 95       	ret

00002364 <EXTI_voidSetCallBack>:
Std_err_e EXTI_voidSetCallBack(Int_num_e Copy_e_IntNum,void(*PvoidFunc)(void))
{
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	00 d0       	rcall	.+0      	; 0x236a <EXTI_voidSetCallBack+0x6>
    236a:	00 d0       	rcall	.+0      	; 0x236c <EXTI_voidSetCallBack+0x8>
    236c:	00 d0       	rcall	.+0      	; 0x236e <EXTI_voidSetCallBack+0xa>
    236e:	cd b7       	in	r28, 0x3d	; 61
    2370:	de b7       	in	r29, 0x3e	; 62
    2372:	8a 83       	std	Y+2, r24	; 0x02
    2374:	7c 83       	std	Y+4, r23	; 0x04
    2376:	6b 83       	std	Y+3, r22	; 0x03
	Std_err_e Local_estate = OK;
    2378:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_e_IntNum)
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	3e 83       	std	Y+6, r19	; 0x06
    2382:	2d 83       	std	Y+5, r18	; 0x05
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	b9 f0       	breq	.+46     	; 0x23bc <EXTI_voidSetCallBack+0x58>
    238e:	2d 81       	ldd	r18, Y+5	; 0x05
    2390:	3e 81       	ldd	r19, Y+6	; 0x06
    2392:	22 30       	cpi	r18, 0x02	; 2
    2394:	31 05       	cpc	r19, r1
    2396:	01 f1       	breq	.+64     	; 0x23d8 <EXTI_voidSetCallBack+0x74>
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	49 f5       	brne	.+82     	; 0x23f2 <EXTI_voidSetCallBack+0x8e>
	{
	case INT_0 :
	{
		if(PvoidFunc != NULL)
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	39 f0       	breq	.+14     	; 0x23b6 <EXTI_voidSetCallBack+0x52>
		{
			GlobalPtrTofunc[0]=PvoidFunc;
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	90 93 8d 00 	sts	0x008D, r25
    23b0:	80 93 8c 00 	sts	0x008C, r24
    23b4:	1e c0       	rjmp	.+60     	; 0x23f2 <EXTI_voidSetCallBack+0x8e>
		}
		else
		{
			Local_estate=NOK;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	89 83       	std	Y+1, r24	; 0x01
    23ba:	1b c0       	rjmp	.+54     	; 0x23f2 <EXTI_voidSetCallBack+0x8e>
		}
		break;
	}
	case INT_1 :
	{
		if(PvoidFunc != NULL)
    23bc:	8b 81       	ldd	r24, Y+3	; 0x03
    23be:	9c 81       	ldd	r25, Y+4	; 0x04
    23c0:	00 97       	sbiw	r24, 0x00	; 0
    23c2:	39 f0       	breq	.+14     	; 0x23d2 <EXTI_voidSetCallBack+0x6e>
		{
			GlobalPtrTofunc[1]=PvoidFunc;
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	90 93 8f 00 	sts	0x008F, r25
    23cc:	80 93 8e 00 	sts	0x008E, r24
    23d0:	10 c0       	rjmp	.+32     	; 0x23f2 <EXTI_voidSetCallBack+0x8e>
		}
		else
		{
			Local_estate=NOK;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	89 83       	std	Y+1, r24	; 0x01
    23d6:	0d c0       	rjmp	.+26     	; 0x23f2 <EXTI_voidSetCallBack+0x8e>
		}
		break;
	}
	case INT_2 :
	{
		if(PvoidFunc != NULL)
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	39 f0       	breq	.+14     	; 0x23ee <EXTI_voidSetCallBack+0x8a>
		{
			GlobalPtrTofunc[2]=PvoidFunc;
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	90 93 91 00 	sts	0x0091, r25
    23e8:	80 93 90 00 	sts	0x0090, r24
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <EXTI_voidSetCallBack+0x8e>
		}
		else
		{
			Local_estate=NOK;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	}
	return Local_estate;
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
}
    23f4:	26 96       	adiw	r28, 0x06	; 6
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <__vector_1>:
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    2406:	1f 92       	push	r1
    2408:	0f 92       	push	r0
    240a:	0f b6       	in	r0, 0x3f	; 63
    240c:	0f 92       	push	r0
    240e:	11 24       	eor	r1, r1
    2410:	2f 93       	push	r18
    2412:	3f 93       	push	r19
    2414:	4f 93       	push	r20
    2416:	5f 93       	push	r21
    2418:	6f 93       	push	r22
    241a:	7f 93       	push	r23
    241c:	8f 93       	push	r24
    241e:	9f 93       	push	r25
    2420:	af 93       	push	r26
    2422:	bf 93       	push	r27
    2424:	ef 93       	push	r30
    2426:	ff 93       	push	r31
    2428:	df 93       	push	r29
    242a:	cf 93       	push	r28
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrTofunc[0]();
    2430:	e0 91 8c 00 	lds	r30, 0x008C
    2434:	f0 91 8d 00 	lds	r31, 0x008D
    2438:	09 95       	icall
}
    243a:	cf 91       	pop	r28
    243c:	df 91       	pop	r29
    243e:	ff 91       	pop	r31
    2440:	ef 91       	pop	r30
    2442:	bf 91       	pop	r27
    2444:	af 91       	pop	r26
    2446:	9f 91       	pop	r25
    2448:	8f 91       	pop	r24
    244a:	7f 91       	pop	r23
    244c:	6f 91       	pop	r22
    244e:	5f 91       	pop	r21
    2450:	4f 91       	pop	r20
    2452:	3f 91       	pop	r19
    2454:	2f 91       	pop	r18
    2456:	0f 90       	pop	r0
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	0f 90       	pop	r0
    245c:	1f 90       	pop	r1
    245e:	18 95       	reti

00002460 <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    2460:	1f 92       	push	r1
    2462:	0f 92       	push	r0
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	0f 92       	push	r0
    2468:	11 24       	eor	r1, r1
    246a:	2f 93       	push	r18
    246c:	3f 93       	push	r19
    246e:	4f 93       	push	r20
    2470:	5f 93       	push	r21
    2472:	6f 93       	push	r22
    2474:	7f 93       	push	r23
    2476:	8f 93       	push	r24
    2478:	9f 93       	push	r25
    247a:	af 93       	push	r26
    247c:	bf 93       	push	r27
    247e:	ef 93       	push	r30
    2480:	ff 93       	push	r31
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrTofunc[1]();
    248a:	e0 91 8e 00 	lds	r30, 0x008E
    248e:	f0 91 8f 00 	lds	r31, 0x008F
    2492:	09 95       	icall
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	ff 91       	pop	r31
    249a:	ef 91       	pop	r30
    249c:	bf 91       	pop	r27
    249e:	af 91       	pop	r26
    24a0:	9f 91       	pop	r25
    24a2:	8f 91       	pop	r24
    24a4:	7f 91       	pop	r23
    24a6:	6f 91       	pop	r22
    24a8:	5f 91       	pop	r21
    24aa:	4f 91       	pop	r20
    24ac:	3f 91       	pop	r19
    24ae:	2f 91       	pop	r18
    24b0:	0f 90       	pop	r0
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	0f 90       	pop	r0
    24b6:	1f 90       	pop	r1
    24b8:	18 95       	reti

000024ba <__vector_3>:
void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    24ba:	1f 92       	push	r1
    24bc:	0f 92       	push	r0
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	0f 92       	push	r0
    24c2:	11 24       	eor	r1, r1
    24c4:	2f 93       	push	r18
    24c6:	3f 93       	push	r19
    24c8:	4f 93       	push	r20
    24ca:	5f 93       	push	r21
    24cc:	6f 93       	push	r22
    24ce:	7f 93       	push	r23
    24d0:	8f 93       	push	r24
    24d2:	9f 93       	push	r25
    24d4:	af 93       	push	r26
    24d6:	bf 93       	push	r27
    24d8:	ef 93       	push	r30
    24da:	ff 93       	push	r31
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrTofunc[2]();
    24e4:	e0 91 90 00 	lds	r30, 0x0090
    24e8:	f0 91 91 00 	lds	r31, 0x0091
    24ec:	09 95       	icall
}
    24ee:	cf 91       	pop	r28
    24f0:	df 91       	pop	r29
    24f2:	ff 91       	pop	r31
    24f4:	ef 91       	pop	r30
    24f6:	bf 91       	pop	r27
    24f8:	af 91       	pop	r26
    24fa:	9f 91       	pop	r25
    24fc:	8f 91       	pop	r24
    24fe:	7f 91       	pop	r23
    2500:	6f 91       	pop	r22
    2502:	5f 91       	pop	r21
    2504:	4f 91       	pop	r20
    2506:	3f 91       	pop	r19
    2508:	2f 91       	pop	r18
    250a:	0f 90       	pop	r0
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	0f 90       	pop	r0
    2510:	1f 90       	pop	r1
    2512:	18 95       	reti

00002514 <GI_voidEnable>:

#include "GI_interface.h"
#include "GI_private.h"

void GI_voidEnable(void)
{
    2514:	df 93       	push	r29
    2516:	cf 93       	push	r28
    2518:	cd b7       	in	r28, 0x3d	; 61
    251a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    251c:	af e5       	ldi	r26, 0x5F	; 95
    251e:	b0 e0       	ldi	r27, 0x00	; 0
    2520:	ef e5       	ldi	r30, 0x5F	; 95
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	80 68       	ori	r24, 0x80	; 128
    2528:	8c 93       	st	X, r24
}
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	08 95       	ret

00002530 <GI_voidDisable>:
void GI_voidDisable(void)
{
    2530:	df 93       	push	r29
    2532:	cf 93       	push	r28
    2534:	cd b7       	in	r28, 0x3d	; 61
    2536:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    2538:	af e5       	ldi	r26, 0x5F	; 95
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	ef e5       	ldi	r30, 0x5F	; 95
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	8f 77       	andi	r24, 0x7F	; 127
    2544:	8c 93       	st	X, r24
    2546:	cf 91       	pop	r28
    2548:	df 91       	pop	r29
    254a:	08 95       	ret

0000254c <Mapping>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "TIMER1_interface.h"
#include "DIO_interface.h"

u32 Mapping (u32 Range1_max,u32 Range1_min,u32 Range2_max,u32 Range2_min,u32 Range1_reading){
    254c:	af 92       	push	r10
    254e:	bf 92       	push	r11
    2550:	cf 92       	push	r12
    2552:	df 92       	push	r13
    2554:	ef 92       	push	r14
    2556:	ff 92       	push	r15
    2558:	0f 93       	push	r16
    255a:	1f 93       	push	r17
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	60 97       	sbiw	r28, 0x10	; 16
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	69 83       	std	Y+1, r22	; 0x01
    2572:	7a 83       	std	Y+2, r23	; 0x02
    2574:	8b 83       	std	Y+3, r24	; 0x03
    2576:	9c 83       	std	Y+4, r25	; 0x04
    2578:	2d 83       	std	Y+5, r18	; 0x05
    257a:	3e 83       	std	Y+6, r19	; 0x06
    257c:	4f 83       	std	Y+7, r20	; 0x07
    257e:	58 87       	std	Y+8, r21	; 0x08
    2580:	e9 86       	std	Y+9, r14	; 0x09
    2582:	fa 86       	std	Y+10, r15	; 0x0a
    2584:	0b 87       	std	Y+11, r16	; 0x0b
    2586:	1c 87       	std	Y+12, r17	; 0x0c
    2588:	ad 86       	std	Y+13, r10	; 0x0d
    258a:	be 86       	std	Y+14, r11	; 0x0e
    258c:	cf 86       	std	Y+15, r12	; 0x0f
    258e:	d8 8a       	std	Y+16, r13	; 0x10

	return (Range2_max-((Range2_max-Range2_min)*(Range1_max-Range1_reading)/(Range1_max-Range1_min)));
    2590:	29 85       	ldd	r18, Y+9	; 0x09
    2592:	3a 85       	ldd	r19, Y+10	; 0x0a
    2594:	4b 85       	ldd	r20, Y+11	; 0x0b
    2596:	5c 85       	ldd	r21, Y+12	; 0x0c
    2598:	8d 85       	ldd	r24, Y+13	; 0x0d
    259a:	9e 85       	ldd	r25, Y+14	; 0x0e
    259c:	af 85       	ldd	r26, Y+15	; 0x0f
    259e:	b8 89       	ldd	r27, Y+16	; 0x10
    25a0:	79 01       	movw	r14, r18
    25a2:	8a 01       	movw	r16, r20
    25a4:	e8 1a       	sub	r14, r24
    25a6:	f9 0a       	sbc	r15, r25
    25a8:	0a 0b       	sbc	r16, r26
    25aa:	1b 0b       	sbc	r17, r27
    25ac:	29 81       	ldd	r18, Y+1	; 0x01
    25ae:	3a 81       	ldd	r19, Y+2	; 0x02
    25b0:	4b 81       	ldd	r20, Y+3	; 0x03
    25b2:	5c 81       	ldd	r21, Y+4	; 0x04
    25b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25b8:	af 8d       	ldd	r26, Y+31	; 0x1f
    25ba:	b8 a1       	ldd	r27, Y+32	; 0x20
    25bc:	28 1b       	sub	r18, r24
    25be:	39 0b       	sbc	r19, r25
    25c0:	4a 0b       	sbc	r20, r26
    25c2:	5b 0b       	sbc	r21, r27
    25c4:	c8 01       	movw	r24, r16
    25c6:	b7 01       	movw	r22, r14
    25c8:	0e 94 b3 24 	call	0x4966	; 0x4966 <__mulsi3>
    25cc:	7b 01       	movw	r14, r22
    25ce:	8c 01       	movw	r16, r24
    25d0:	29 81       	ldd	r18, Y+1	; 0x01
    25d2:	3a 81       	ldd	r19, Y+2	; 0x02
    25d4:	4b 81       	ldd	r20, Y+3	; 0x03
    25d6:	5c 81       	ldd	r21, Y+4	; 0x04
    25d8:	8d 81       	ldd	r24, Y+5	; 0x05
    25da:	9e 81       	ldd	r25, Y+6	; 0x06
    25dc:	af 81       	ldd	r26, Y+7	; 0x07
    25de:	b8 85       	ldd	r27, Y+8	; 0x08
    25e0:	28 1b       	sub	r18, r24
    25e2:	39 0b       	sbc	r19, r25
    25e4:	4a 0b       	sbc	r20, r26
    25e6:	5b 0b       	sbc	r21, r27
    25e8:	c8 01       	movw	r24, r16
    25ea:	b7 01       	movw	r22, r14
    25ec:	0e 94 e6 24 	call	0x49cc	; 0x49cc <__udivmodsi4>
    25f0:	da 01       	movw	r26, r20
    25f2:	c9 01       	movw	r24, r18
    25f4:	9c 01       	movw	r18, r24
    25f6:	ad 01       	movw	r20, r26
    25f8:	89 85       	ldd	r24, Y+9	; 0x09
    25fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25fc:	ab 85       	ldd	r26, Y+11	; 0x0b
    25fe:	bc 85       	ldd	r27, Y+12	; 0x0c
    2600:	82 1b       	sub	r24, r18
    2602:	93 0b       	sbc	r25, r19
    2604:	a4 0b       	sbc	r26, r20
    2606:	b5 0b       	sbc	r27, r21
}
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	60 96       	adiw	r28, 0x10	; 16
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	de bf       	out	0x3e, r29	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	cd bf       	out	0x3d, r28	; 61
    2618:	cf 91       	pop	r28
    261a:	df 91       	pop	r29
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	df 90       	pop	r13
    2626:	cf 90       	pop	r12
    2628:	bf 90       	pop	r11
    262a:	af 90       	pop	r10
    262c:	08 95       	ret

0000262e <SERVO_voidInit>:

void SERVO_voidInit()
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(PORT_u8D,PIN_5,PIN_OUT);
    2636:	84 e0       	ldi	r24, 0x04	; 4
    2638:	65 e0       	ldi	r22, 0x05	; 5
    263a:	41 e0       	ldi	r20, 0x01	; 1
    263c:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	TIMER1_voidInit();
    2640:	0e 94 75 14 	call	0x28ea	; 0x28ea <TIMER1_voidInit>
}
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <SERVO_voidMoveToAngle>:

void SERVO_voidMoveToAngle(u8 Copy_u8Angle)
{
    264a:	af 92       	push	r10
    264c:	bf 92       	push	r11
    264e:	cf 92       	push	r12
    2650:	df 92       	push	r13
    2652:	ef 92       	push	r14
    2654:	ff 92       	push	r15
    2656:	0f 93       	push	r16
    2658:	1f 93       	push	r17
    265a:	df 93       	push	r29
    265c:	cf 93       	push	r28
    265e:	00 d0       	rcall	.+0      	; 0x2660 <SERVO_voidMoveToAngle+0x16>
    2660:	00 d0       	rcall	.+0      	; 0x2662 <SERVO_voidMoveToAngle+0x18>
    2662:	0f 92       	push	r0
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	8d 83       	std	Y+5, r24	; 0x05
	u32 Local_u32CMPValue=Mapping(180,0,2500,550,Copy_u8Angle);
    266a:	8d 81       	ldd	r24, Y+5	; 0x05
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	a0 e0       	ldi	r26, 0x00	; 0
    2672:	b0 e0       	ldi	r27, 0x00	; 0
    2674:	00 d0       	rcall	.+0      	; 0x2676 <SERVO_voidMoveToAngle+0x2c>
    2676:	00 d0       	rcall	.+0      	; 0x2678 <SERVO_voidMoveToAngle+0x2e>
    2678:	ed b7       	in	r30, 0x3d	; 61
    267a:	fe b7       	in	r31, 0x3e	; 62
    267c:	31 96       	adiw	r30, 0x01	; 1
    267e:	80 83       	st	Z, r24
    2680:	91 83       	std	Z+1, r25	; 0x01
    2682:	a2 83       	std	Z+2, r26	; 0x02
    2684:	b3 83       	std	Z+3, r27	; 0x03
    2686:	64 eb       	ldi	r22, 0xB4	; 180
    2688:	70 e0       	ldi	r23, 0x00	; 0
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	30 e0       	ldi	r19, 0x00	; 0
    2692:	40 e0       	ldi	r20, 0x00	; 0
    2694:	50 e0       	ldi	r21, 0x00	; 0
    2696:	0f 2e       	mov	r0, r31
    2698:	f4 ec       	ldi	r31, 0xC4	; 196
    269a:	ef 2e       	mov	r14, r31
    269c:	f9 e0       	ldi	r31, 0x09	; 9
    269e:	ff 2e       	mov	r15, r31
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	0f 2f       	mov	r16, r31
    26a4:	f0 e0       	ldi	r31, 0x00	; 0
    26a6:	1f 2f       	mov	r17, r31
    26a8:	f0 2d       	mov	r31, r0
    26aa:	0f 2e       	mov	r0, r31
    26ac:	f6 e2       	ldi	r31, 0x26	; 38
    26ae:	af 2e       	mov	r10, r31
    26b0:	f2 e0       	ldi	r31, 0x02	; 2
    26b2:	bf 2e       	mov	r11, r31
    26b4:	f0 e0       	ldi	r31, 0x00	; 0
    26b6:	cf 2e       	mov	r12, r31
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	df 2e       	mov	r13, r31
    26bc:	f0 2d       	mov	r31, r0
    26be:	0e 94 a6 12 	call	0x254c	; 0x254c <Mapping>
    26c2:	0f 90       	pop	r0
    26c4:	0f 90       	pop	r0
    26c6:	0f 90       	pop	r0
    26c8:	0f 90       	pop	r0
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	89 83       	std	Y+1, r24	; 0x01
    26d0:	9a 83       	std	Y+2, r25	; 0x02
    26d2:	ab 83       	std	Y+3, r26	; 0x03
    26d4:	bc 83       	std	Y+4, r27	; 0x04
	TIMER1_voidSeTCMPValue(Local_u32CMPValue);
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	9a 81       	ldd	r25, Y+2	; 0x02
    26da:	0e 94 c1 14 	call	0x2982	; 0x2982 <TIMER1_voidSeTCMPValue>
}
    26de:	0f 90       	pop	r0
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	cf 91       	pop	r28
    26ea:	df 91       	pop	r29
    26ec:	1f 91       	pop	r17
    26ee:	0f 91       	pop	r16
    26f0:	ff 90       	pop	r15
    26f2:	ef 90       	pop	r14
    26f4:	df 90       	pop	r13
    26f6:	cf 90       	pop	r12
    26f8:	bf 90       	pop	r11
    26fa:	af 90       	pop	r10
    26fc:	08 95       	ret

000026fe <TIMER0_voidInit>:

static void(*GlobalPtrFuncCMP)(void)=NULL;
static void(*GlobalPtrFuncOVF)(void)=NULL;

void TIMER0_voidInit(void)
{
    26fe:	df 93       	push	r29
    2700:	cf 93       	push	r28
    2702:	cd b7       	in	r28, 0x3d	; 61
    2704:	de b7       	in	r29, 0x3e	; 62
	//  CTC OR OVF
#if TIMER0_MODE == OVF_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
	CLR_BIT(TCCR0,TCCR0_WGM01);
#elif TIMER0_MODE == CTC_MODE
	CLR_BIT(TCCR0,TCCR0_WGM00);
    2706:	a3 e5       	ldi	r26, 0x53	; 83
    2708:	b0 e0       	ldi	r27, 0x00	; 0
    270a:	e3 e5       	ldi	r30, 0x53	; 83
    270c:	f0 e0       	ldi	r31, 0x00	; 0
    270e:	80 81       	ld	r24, Z
    2710:	8f 7b       	andi	r24, 0xBF	; 191
    2712:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM01);
    2714:	a3 e5       	ldi	r26, 0x53	; 83
    2716:	b0 e0       	ldi	r27, 0x00	; 0
    2718:	e3 e5       	ldi	r30, 0x53	; 83
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	80 81       	ld	r24, Z
    271e:	88 60       	ori	r24, 0x08	; 8
    2720:	8c 93       	st	X, r24
#endif
	// ENABLE INT -> MODE
#if INT_SRC == OVF_MODE
	SET_BIT(TIMSK,TIMSK_TOIE0);
#elif INT_SRC == CTC_MODE
	SET_BIT(TIMSK,TIMSK_OCIE0);
    2722:	a9 e5       	ldi	r26, 0x59	; 89
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e9 e5       	ldi	r30, 0x59	; 89
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	80 81       	ld	r24, Z
    272c:	82 60       	ori	r24, 0x02	; 2
    272e:	8c 93       	st	X, r24
	TCCR0 |= NO_DIV;
#elif PRE_SCALLER == DIV_8
	TCCR0 &= 0b11111000;
	TCCR0 |= DIV_8;
#elif PRE_SCALLER == DIV_64
	TCCR0 &= 0b11111000;
    2730:	a3 e5       	ldi	r26, 0x53	; 83
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e3 e5       	ldi	r30, 0x53	; 83
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	88 7f       	andi	r24, 0xF8	; 248
    273c:	8c 93       	st	X, r24
	TCCR0 |= DIV_64;
    273e:	a3 e5       	ldi	r26, 0x53	; 83
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	e3 e5       	ldi	r30, 0x53	; 83
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	83 60       	ori	r24, 0x03	; 3
    274a:	8c 93       	st	X, r24
	TCCR0 &= 0b11111000;
	TCCR0 |= DIV_1024;
#else
#error("Wrong PreScaler")
#endif
}
    274c:	cf 91       	pop	r28
    274e:	df 91       	pop	r29
    2750:	08 95       	ret

00002752 <TIMER0_voidSetPreLoadValue>:
void TIMER0_voidSetPreLoadValue(u8 Copy_u8Ticks)
{
    2752:	df 93       	push	r29
    2754:	cf 93       	push	r28
    2756:	0f 92       	push	r0
    2758:	cd b7       	in	r28, 0x3d	; 61
    275a:	de b7       	in	r29, 0x3e	; 62
    275c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0=Copy_u8Ticks;
    275e:	e2 e5       	ldi	r30, 0x52	; 82
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	80 83       	st	Z, r24
}
    2766:	0f 90       	pop	r0
    2768:	cf 91       	pop	r28
    276a:	df 91       	pop	r29
    276c:	08 95       	ret

0000276e <TIMER0_voidSetCmpValue>:
void TIMER0_voidSetCmpValue(u8 Copy_u8Ticks)
{
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	0f 92       	push	r0
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	89 83       	std	Y+1, r24	; 0x01
	OCR0=Copy_u8Ticks;
    277a:	ec e5       	ldi	r30, 0x5C	; 92
    277c:	f0 e0       	ldi	r31, 0x00	; 0
    277e:	89 81       	ldd	r24, Y+1	; 0x01
    2780:	80 83       	st	Z, r24
}
    2782:	0f 90       	pop	r0
    2784:	cf 91       	pop	r28
    2786:	df 91       	pop	r29
    2788:	08 95       	ret

0000278a <TIMER0_e_SetCallBackOVF>:
Std_err_e TIMER0_e_SetCallBackOVF(void(*PtrFunc)(void))
{
    278a:	df 93       	push	r29
    278c:	cf 93       	push	r28
    278e:	00 d0       	rcall	.+0      	; 0x2790 <TIMER0_e_SetCallBackOVF+0x6>
    2790:	0f 92       	push	r0
    2792:	cd b7       	in	r28, 0x3d	; 61
    2794:	de b7       	in	r29, 0x3e	; 62
    2796:	9b 83       	std	Y+3, r25	; 0x03
    2798:	8a 83       	std	Y+2, r24	; 0x02
	Std_err_e Local_e_ErrorStatus=OK;
    279a:	19 82       	std	Y+1, r1	; 0x01
	if(PtrFunc != NULL)
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	9b 81       	ldd	r25, Y+3	; 0x03
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	39 f0       	breq	.+14     	; 0x27b2 <TIMER0_e_SetCallBackOVF+0x28>
	{
		GlobalPtrFuncOVF=PtrFunc;
    27a4:	8a 81       	ldd	r24, Y+2	; 0x02
    27a6:	9b 81       	ldd	r25, Y+3	; 0x03
    27a8:	90 93 95 00 	sts	0x0095, r25
    27ac:	80 93 94 00 	sts	0x0094, r24
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <TIMER0_e_SetCallBackOVF+0x2c>
	}
	else
	{
		Local_e_ErrorStatus=NOK;
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrorStatus;
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
}
    27b8:	0f 90       	pop	r0
    27ba:	0f 90       	pop	r0
    27bc:	0f 90       	pop	r0
    27be:	cf 91       	pop	r28
    27c0:	df 91       	pop	r29
    27c2:	08 95       	ret

000027c4 <TIMER0_e_SetCallBackCMP>:

Std_err_e TIMER0_e_SetCallBackCMP(void(*PtrFunc)(void))
{
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <TIMER0_e_SetCallBackCMP+0x6>
    27ca:	0f 92       	push	r0
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	9b 83       	std	Y+3, r25	; 0x03
    27d2:	8a 83       	std	Y+2, r24	; 0x02
	Std_err_e Local_e_ErrorStatus=OK;
    27d4:	19 82       	std	Y+1, r1	; 0x01
	if(PtrFunc != NULL)
    27d6:	8a 81       	ldd	r24, Y+2	; 0x02
    27d8:	9b 81       	ldd	r25, Y+3	; 0x03
    27da:	00 97       	sbiw	r24, 0x00	; 0
    27dc:	39 f0       	breq	.+14     	; 0x27ec <TIMER0_e_SetCallBackCMP+0x28>
	{
		GlobalPtrFuncCMP=PtrFunc;
    27de:	8a 81       	ldd	r24, Y+2	; 0x02
    27e0:	9b 81       	ldd	r25, Y+3	; 0x03
    27e2:	90 93 93 00 	sts	0x0093, r25
    27e6:	80 93 92 00 	sts	0x0092, r24
    27ea:	02 c0       	rjmp	.+4      	; 0x27f0 <TIMER0_e_SetCallBackCMP+0x2c>
	}
	else
	{
		Local_e_ErrorStatus=NOK;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrorStatus;
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	cf 91       	pop	r28
    27fa:	df 91       	pop	r29
    27fc:	08 95       	ret

000027fe <CTC_voidCTCEnable>:
void CTC_voidCTCEnable(void)
{
    27fe:	df 93       	push	r29
    2800:	cf 93       	push	r28
    2802:	cd b7       	in	r28, 0x3d	; 61
    2804:	de b7       	in	r29, 0x3e	; 62
  SET_BIT(TIMSK,TIMSK_OCIE0);
    2806:	a9 e5       	ldi	r26, 0x59	; 89
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	e9 e5       	ldi	r30, 0x59	; 89
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	82 60       	ori	r24, 0x02	; 2
    2812:	8c 93       	st	X, r24
}
    2814:	cf 91       	pop	r28
    2816:	df 91       	pop	r29
    2818:	08 95       	ret

0000281a <CTC_voidCTCDisable>:
void CTC_voidCTCDisable(void)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK,TIMSK_OCIE0);
    2822:	a9 e5       	ldi	r26, 0x59	; 89
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e9 e5       	ldi	r30, 0x59	; 89
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	80 81       	ld	r24, Z
    282c:	8d 7f       	andi	r24, 0xFD	; 253
    282e:	8c 93       	st	X, r24
}
    2830:	cf 91       	pop	r28
    2832:	df 91       	pop	r29
    2834:	08 95       	ret

00002836 <__vector_11>:
// ISR OVF
void __vector_11(void) __attribute__((signal));
void __vector_11(void)
{
    2836:	1f 92       	push	r1
    2838:	0f 92       	push	r0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	0f 92       	push	r0
    283e:	11 24       	eor	r1, r1
    2840:	2f 93       	push	r18
    2842:	3f 93       	push	r19
    2844:	4f 93       	push	r20
    2846:	5f 93       	push	r21
    2848:	6f 93       	push	r22
    284a:	7f 93       	push	r23
    284c:	8f 93       	push	r24
    284e:	9f 93       	push	r25
    2850:	af 93       	push	r26
    2852:	bf 93       	push	r27
    2854:	ef 93       	push	r30
    2856:	ff 93       	push	r31
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	// INVOKE FUNCTION
	GlobalPtrFuncOVF();
    2860:	e0 91 94 00 	lds	r30, 0x0094
    2864:	f0 91 95 00 	lds	r31, 0x0095
    2868:	09 95       	icall
}
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	ff 91       	pop	r31
    2870:	ef 91       	pop	r30
    2872:	bf 91       	pop	r27
    2874:	af 91       	pop	r26
    2876:	9f 91       	pop	r25
    2878:	8f 91       	pop	r24
    287a:	7f 91       	pop	r23
    287c:	6f 91       	pop	r22
    287e:	5f 91       	pop	r21
    2880:	4f 91       	pop	r20
    2882:	3f 91       	pop	r19
    2884:	2f 91       	pop	r18
    2886:	0f 90       	pop	r0
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	0f 90       	pop	r0
    288c:	1f 90       	pop	r1
    288e:	18 95       	reti

00002890 <__vector_10>:
//ISR CTC
void __vector_10(void) __attribute__((signal));
void __vector_10(void)
{
    2890:	1f 92       	push	r1
    2892:	0f 92       	push	r0
    2894:	0f b6       	in	r0, 0x3f	; 63
    2896:	0f 92       	push	r0
    2898:	11 24       	eor	r1, r1
    289a:	2f 93       	push	r18
    289c:	3f 93       	push	r19
    289e:	4f 93       	push	r20
    28a0:	5f 93       	push	r21
    28a2:	6f 93       	push	r22
    28a4:	7f 93       	push	r23
    28a6:	8f 93       	push	r24
    28a8:	9f 93       	push	r25
    28aa:	af 93       	push	r26
    28ac:	bf 93       	push	r27
    28ae:	ef 93       	push	r30
    28b0:	ff 93       	push	r31
    28b2:	df 93       	push	r29
    28b4:	cf 93       	push	r28
    28b6:	cd b7       	in	r28, 0x3d	; 61
    28b8:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrFuncCMP();
    28ba:	e0 91 92 00 	lds	r30, 0x0092
    28be:	f0 91 93 00 	lds	r31, 0x0093
    28c2:	09 95       	icall
}
    28c4:	cf 91       	pop	r28
    28c6:	df 91       	pop	r29
    28c8:	ff 91       	pop	r31
    28ca:	ef 91       	pop	r30
    28cc:	bf 91       	pop	r27
    28ce:	af 91       	pop	r26
    28d0:	9f 91       	pop	r25
    28d2:	8f 91       	pop	r24
    28d4:	7f 91       	pop	r23
    28d6:	6f 91       	pop	r22
    28d8:	5f 91       	pop	r21
    28da:	4f 91       	pop	r20
    28dc:	3f 91       	pop	r19
    28de:	2f 91       	pop	r18
    28e0:	0f 90       	pop	r0
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	0f 90       	pop	r0
    28e6:	1f 90       	pop	r1
    28e8:	18 95       	reti

000028ea <TIMER1_voidInit>:
#include "TIMER1_interface.h"
#include "TIMER1_config.h"
#include "TIMER1_private.h"

void TIMER1_voidInit(void)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
  // WGM ->14
	CLR_BIT(TCCR1A,TCCR1A_WGM10);
    28f2:	af e4       	ldi	r26, 0x4F	; 79
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	ef e4       	ldi	r30, 0x4F	; 79
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	8e 7f       	andi	r24, 0xFE	; 254
    28fe:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    2900:	af e4       	ldi	r26, 0x4F	; 79
    2902:	b0 e0       	ldi	r27, 0x00	; 0
    2904:	ef e4       	ldi	r30, 0x4F	; 79
    2906:	f0 e0       	ldi	r31, 0x00	; 0
    2908:	80 81       	ld	r24, Z
    290a:	82 60       	ori	r24, 0x02	; 2
    290c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    290e:	ae e4       	ldi	r26, 0x4E	; 78
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	ee e4       	ldi	r30, 0x4E	; 78
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	80 81       	ld	r24, Z
    2918:	88 60       	ori	r24, 0x08	; 8
    291a:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    291c:	ae e4       	ldi	r26, 0x4E	; 78
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	ee e4       	ldi	r30, 0x4E	; 78
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	80 61       	ori	r24, 0x10	; 16
    2928:	8c 93       	st	X, r24
	CLR_BIT(TCCR1A,TCCR1A_COM1A0);
    292a:	af e4       	ldi	r26, 0x4F	; 79
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ef e4       	ldi	r30, 0x4F	; 79
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	8f 7b       	andi	r24, 0xBF	; 191
    2936:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2938:	af e4       	ldi	r26, 0x4F	; 79
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	ef e4       	ldi	r30, 0x4F	; 79
    293e:	f0 e0       	ldi	r31, 0x00	; 0
    2940:	80 81       	ld	r24, Z
    2942:	80 68       	ori	r24, 0x80	; 128
    2944:	8c 93       	st	X, r24
  // MAX VALUE OF TICKS = 20000
	ICR1=20000;
    2946:	e6 e4       	ldi	r30, 0x46	; 70
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	80 e2       	ldi	r24, 0x20	; 32
    294c:	9e e4       	ldi	r25, 0x4E	; 78
    294e:	91 83       	std	Z+1, r25	; 0x01
    2950:	80 83       	st	Z, r24
  // PRESCALLER/8
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    2952:	ae e4       	ldi	r26, 0x4E	; 78
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	ee e4       	ldi	r30, 0x4E	; 78
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	8e 7f       	andi	r24, 0xFE	; 254
    295e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    2960:	ae e4       	ldi	r26, 0x4E	; 78
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	ee e4       	ldi	r30, 0x4E	; 78
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	82 60       	ori	r24, 0x02	; 2
    296c:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    296e:	ae e4       	ldi	r26, 0x4E	; 78
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	ee e4       	ldi	r30, 0x4E	; 78
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	8b 7f       	andi	r24, 0xFB	; 251
    297a:	8c 93       	st	X, r24
}
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <TIMER1_voidSeTCMPValue>:
void TIMER1_voidSeTCMPValue(u16 Copy_u16Ticks)
{
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	00 d0       	rcall	.+0      	; 0x2988 <TIMER1_voidSeTCMPValue+0x6>
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	9a 83       	std	Y+2, r25	; 0x02
    298e:	89 83       	std	Y+1, r24	; 0x01
  OCRA=Copy_u16Ticks;
    2990:	ea e4       	ldi	r30, 0x4A	; 74
    2992:	f0 e0       	ldi	r31, 0x00	; 0
    2994:	89 81       	ldd	r24, Y+1	; 0x01
    2996:	9a 81       	ldd	r25, Y+2	; 0x02
    2998:	91 83       	std	Z+1, r25	; 0x01
    299a:	80 83       	st	Z, r24
}
    299c:	0f 90       	pop	r0
    299e:	0f 90       	pop	r0
    29a0:	cf 91       	pop	r28
    29a2:	df 91       	pop	r29
    29a4:	08 95       	ret

000029a6 <TIMER2_voidInit>:

static void(*GlobalPtrFuncCMP)(void)=NULL;
static void(*GlobalPtrFuncOVF)(void)=NULL;

void TIMER2_voidInit(void)
{
    29a6:	df 93       	push	r29
    29a8:	cf 93       	push	r28
    29aa:	cd b7       	in	r28, 0x3d	; 61
    29ac:	de b7       	in	r29, 0x3e	; 62
#if TIMER2_MODE == CTC_MODE
	CLR_BIT(TCCR2,TCCR2_WGM20);
    29ae:	a5 e4       	ldi	r26, 0x45	; 69
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e5 e4       	ldi	r30, 0x45	; 69
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	8f 7b       	andi	r24, 0xBF	; 191
    29ba:	8c 93       	st	X, r24
	SET_BIT(TCCR2,TCCR2_WGM21);
    29bc:	a5 e4       	ldi	r26, 0x45	; 69
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e5 e4       	ldi	r30, 0x45	; 69
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	88 60       	ori	r24, 0x08	; 8
    29c8:	8c 93       	st	X, r24
#elif PRESCALER == DIV_32
	CLR_BIT(TCCR2,TCCR2_CS22);
	SET_BIT(TCCR2,TCCR2_CS21);
	SET_BIT(TCCR2,TCCR2_CS20);
#elif PRESCALER == DIV_64
	SET_BIT(TCCR2,TCCR2_CS22);
    29ca:	a5 e4       	ldi	r26, 0x45	; 69
    29cc:	b0 e0       	ldi	r27, 0x00	; 0
    29ce:	e5 e4       	ldi	r30, 0x45	; 69
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	80 81       	ld	r24, Z
    29d4:	84 60       	ori	r24, 0x04	; 4
    29d6:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS21);
    29d8:	a5 e4       	ldi	r26, 0x45	; 69
    29da:	b0 e0       	ldi	r27, 0x00	; 0
    29dc:	e5 e4       	ldi	r30, 0x45	; 69
    29de:	f0 e0       	ldi	r31, 0x00	; 0
    29e0:	80 81       	ld	r24, Z
    29e2:	8d 7f       	andi	r24, 0xFD	; 253
    29e4:	8c 93       	st	X, r24
	CLR_BIT(TCCR2,TCCR2_CS20);
    29e6:	a5 e4       	ldi	r26, 0x45	; 69
    29e8:	b0 e0       	ldi	r27, 0x00	; 0
    29ea:	e5 e4       	ldi	r30, 0x45	; 69
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	80 81       	ld	r24, Z
    29f0:	8e 7f       	andi	r24, 0xFE	; 254
    29f2:	8c 93       	st	X, r24
#else
#error("WRONG PRE SCALER")
#endif

#if INT_SOURCE == CTC
	SET_BIT(TIMSK,TIMSK_OCIE2);
    29f4:	a9 e5       	ldi	r26, 0x59	; 89
    29f6:	b0 e0       	ldi	r27, 0x00	; 0
    29f8:	e9 e5       	ldi	r30, 0x59	; 89
    29fa:	f0 e0       	ldi	r31, 0x00	; 0
    29fc:	80 81       	ld	r24, Z
    29fe:	80 68       	ori	r24, 0x80	; 128
    2a00:	8c 93       	st	X, r24
#elif INT_SOURCE == OVF
	SET_BIT(TIMSK,TIMSK_TOIE2);
#else
#error("WRONG INT SOURCE")
#endif
}
    2a02:	cf 91       	pop	r28
    2a04:	df 91       	pop	r29
    2a06:	08 95       	ret

00002a08 <TIMER2_voidSetPreLoadValue>:
void TIMER2_voidSetPreLoadValue(u8 Copy_u8Ticks)
{
    2a08:	df 93       	push	r29
    2a0a:	cf 93       	push	r28
    2a0c:	0f 92       	push	r0
    2a0e:	cd b7       	in	r28, 0x3d	; 61
    2a10:	de b7       	in	r29, 0x3e	; 62
    2a12:	89 83       	std	Y+1, r24	; 0x01
	TCNT2=Copy_u8Ticks;
    2a14:	e4 e4       	ldi	r30, 0x44	; 68
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	80 83       	st	Z, r24
}
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <TIMER2_voidSetCmpValue>:
void TIMER2_voidSetCmpValue(u8 Copy_u8Ticks)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	0f 92       	push	r0
    2a2a:	cd b7       	in	r28, 0x3d	; 61
    2a2c:	de b7       	in	r29, 0x3e	; 62
    2a2e:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = Copy_u8Ticks;
    2a30:	e3 e4       	ldi	r30, 0x43	; 67
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	89 81       	ldd	r24, Y+1	; 0x01
    2a36:	80 83       	st	Z, r24
}
    2a38:	0f 90       	pop	r0
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	08 95       	ret

00002a40 <TIMER2_e_SetCallBackOVF>:
Std_err_e TIMER2_e_SetCallBackOVF(void(*PtrFunc)(void))
{
    2a40:	df 93       	push	r29
    2a42:	cf 93       	push	r28
    2a44:	00 d0       	rcall	.+0      	; 0x2a46 <TIMER2_e_SetCallBackOVF+0x6>
    2a46:	0f 92       	push	r0
    2a48:	cd b7       	in	r28, 0x3d	; 61
    2a4a:	de b7       	in	r29, 0x3e	; 62
    2a4c:	9b 83       	std	Y+3, r25	; 0x03
    2a4e:	8a 83       	std	Y+2, r24	; 0x02
	Std_err_e Local_e_ErrorStatus=OK;
    2a50:	19 82       	std	Y+1, r1	; 0x01
	if(PtrFunc != NULL)
    2a52:	8a 81       	ldd	r24, Y+2	; 0x02
    2a54:	9b 81       	ldd	r25, Y+3	; 0x03
    2a56:	00 97       	sbiw	r24, 0x00	; 0
    2a58:	39 f0       	breq	.+14     	; 0x2a68 <TIMER2_e_SetCallBackOVF+0x28>
	{
		GlobalPtrFuncOVF=PtrFunc;
    2a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5e:	90 93 99 00 	sts	0x0099, r25
    2a62:	80 93 98 00 	sts	0x0098, r24
    2a66:	02 c0       	rjmp	.+4      	; 0x2a6c <TIMER2_e_SetCallBackOVF+0x2c>
	}
	else
	{
		Local_e_ErrorStatus=NOK;
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrorStatus;
    2a6c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <TIMER2_e_SetCallBackCMP>:
Std_err_e TIMER2_e_SetCallBackCMP(void(*PtrFunc)(void))
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <TIMER2_e_SetCallBackCMP+0x6>
    2a80:	0f 92       	push	r0
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	9b 83       	std	Y+3, r25	; 0x03
    2a88:	8a 83       	std	Y+2, r24	; 0x02
	Std_err_e Local_e_ErrorStatus=OK;
    2a8a:	19 82       	std	Y+1, r1	; 0x01
	if(PtrFunc != NULL)
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a90:	00 97       	sbiw	r24, 0x00	; 0
    2a92:	39 f0       	breq	.+14     	; 0x2aa2 <TIMER2_e_SetCallBackCMP+0x28>
	{
		GlobalPtrFuncCMP=PtrFunc;
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	9b 81       	ldd	r25, Y+3	; 0x03
    2a98:	90 93 97 00 	sts	0x0097, r25
    2a9c:	80 93 96 00 	sts	0x0096, r24
    2aa0:	02 c0       	rjmp	.+4      	; 0x2aa6 <TIMER2_e_SetCallBackCMP+0x2c>
	}
	else
	{
		Local_e_ErrorStatus=NOK;
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrorStatus;
    2aa6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2aa8:	0f 90       	pop	r0
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
    2aae:	cf 91       	pop	r28
    2ab0:	df 91       	pop	r29
    2ab2:	08 95       	ret

00002ab4 <__vector_4>:

void __vector_4(void) __attribute__((signal));
void __vector_4(void)
{
    2ab4:	1f 92       	push	r1
    2ab6:	0f 92       	push	r0
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	0f 92       	push	r0
    2abc:	11 24       	eor	r1, r1
    2abe:	2f 93       	push	r18
    2ac0:	3f 93       	push	r19
    2ac2:	4f 93       	push	r20
    2ac4:	5f 93       	push	r21
    2ac6:	6f 93       	push	r22
    2ac8:	7f 93       	push	r23
    2aca:	8f 93       	push	r24
    2acc:	9f 93       	push	r25
    2ace:	af 93       	push	r26
    2ad0:	bf 93       	push	r27
    2ad2:	ef 93       	push	r30
    2ad4:	ff 93       	push	r31
    2ad6:	df 93       	push	r29
    2ad8:	cf 93       	push	r28
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrFuncCMP();
    2ade:	e0 91 96 00 	lds	r30, 0x0096
    2ae2:	f0 91 97 00 	lds	r31, 0x0097
    2ae6:	09 95       	icall
}
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	ff 91       	pop	r31
    2aee:	ef 91       	pop	r30
    2af0:	bf 91       	pop	r27
    2af2:	af 91       	pop	r26
    2af4:	9f 91       	pop	r25
    2af6:	8f 91       	pop	r24
    2af8:	7f 91       	pop	r23
    2afa:	6f 91       	pop	r22
    2afc:	5f 91       	pop	r21
    2afe:	4f 91       	pop	r20
    2b00:	3f 91       	pop	r19
    2b02:	2f 91       	pop	r18
    2b04:	0f 90       	pop	r0
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	0f 90       	pop	r0
    2b0a:	1f 90       	pop	r1
    2b0c:	18 95       	reti

00002b0e <__vector_5>:
void __vector_5(void) __attribute__((signal));
void __vector_5(void)
{
    2b0e:	1f 92       	push	r1
    2b10:	0f 92       	push	r0
    2b12:	0f b6       	in	r0, 0x3f	; 63
    2b14:	0f 92       	push	r0
    2b16:	11 24       	eor	r1, r1
    2b18:	2f 93       	push	r18
    2b1a:	3f 93       	push	r19
    2b1c:	4f 93       	push	r20
    2b1e:	5f 93       	push	r21
    2b20:	6f 93       	push	r22
    2b22:	7f 93       	push	r23
    2b24:	8f 93       	push	r24
    2b26:	9f 93       	push	r25
    2b28:	af 93       	push	r26
    2b2a:	bf 93       	push	r27
    2b2c:	ef 93       	push	r30
    2b2e:	ff 93       	push	r31
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
	GlobalPtrFuncOVF();
    2b38:	e0 91 98 00 	lds	r30, 0x0098
    2b3c:	f0 91 99 00 	lds	r31, 0x0099
    2b40:	09 95       	icall
}
    2b42:	cf 91       	pop	r28
    2b44:	df 91       	pop	r29
    2b46:	ff 91       	pop	r31
    2b48:	ef 91       	pop	r30
    2b4a:	bf 91       	pop	r27
    2b4c:	af 91       	pop	r26
    2b4e:	9f 91       	pop	r25
    2b50:	8f 91       	pop	r24
    2b52:	7f 91       	pop	r23
    2b54:	6f 91       	pop	r22
    2b56:	5f 91       	pop	r21
    2b58:	4f 91       	pop	r20
    2b5a:	3f 91       	pop	r19
    2b5c:	2f 91       	pop	r18
    2b5e:	0f 90       	pop	r0
    2b60:	0f be       	out	0x3f, r0	; 63
    2b62:	0f 90       	pop	r0
    2b64:	1f 90       	pop	r1
    2b66:	18 95       	reti

00002b68 <TWI_voidMasterInit>:
#include "TWI_interface.h"
#include "TWI_private.h"
#include "TWI_config.h"

void TWI_voidMasterInit(u8 Copy_u8Address)
{
    2b68:	df 93       	push	r29
    2b6a:	cf 93       	push	r28
    2b6c:	0f 92       	push	r0
    2b6e:	cd b7       	in	r28, 0x3d	; 61
    2b70:	de b7       	in	r29, 0x3e	; 62
    2b72:	89 83       	std	Y+1, r24	; 0x01
	// Set Clock Frequency TWPR= 12 CLR PS1,PS0 -> 200KHZ
	TWBR=12;
    2b74:	e0 e2       	ldi	r30, 0x20	; 32
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	8c e0       	ldi	r24, 0x0C	; 12
    2b7a:	80 83       	st	Z, r24
	CLR_BIT(TWSR,TWSR_TWPS0);
    2b7c:	a1 e2       	ldi	r26, 0x21	; 33
    2b7e:	b0 e0       	ldi	r27, 0x00	; 0
    2b80:	e1 e2       	ldi	r30, 0x21	; 33
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8e 7f       	andi	r24, 0xFE	; 254
    2b88:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
    2b8a:	a1 e2       	ldi	r26, 0x21	; 33
    2b8c:	b0 e0       	ldi	r27, 0x00	; 0
    2b8e:	e1 e2       	ldi	r30, 0x21	; 33
    2b90:	f0 e0       	ldi	r31, 0x00	; 0
    2b92:	80 81       	ld	r24, Z
    2b94:	8d 7f       	andi	r24, 0xFD	; 253
    2b96:	8c 93       	st	X, r24
	// ENABLE ACK
	SET_BIT(TWCR,TWCR_TWEA);
    2b98:	a6 e5       	ldi	r26, 0x56	; 86
    2b9a:	b0 e0       	ldi	r27, 0x00	; 0
    2b9c:	e6 e5       	ldi	r30, 0x56	; 86
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
    2ba2:	80 64       	ori	r24, 0x40	; 64
    2ba4:	8c 93       	st	X, r24
	// SET ADDRESS
	TWAR=Copy_u8Address<<1;
    2ba6:	e2 e2       	ldi	r30, 0x22	; 34
    2ba8:	f0 e0       	ldi	r31, 0x00	; 0
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	88 0f       	add	r24, r24
    2bae:	80 83       	st	Z, r24
	// ENABLE ERIPHRAL
	SET_BIT(TWCR,TWCR_TWEN);
    2bb0:	a6 e5       	ldi	r26, 0x56	; 86
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
    2bb4:	e6 e5       	ldi	r30, 0x56	; 86
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	80 81       	ld	r24, Z
    2bba:	84 60       	ori	r24, 0x04	; 4
    2bbc:	8c 93       	st	X, r24
}
    2bbe:	0f 90       	pop	r0
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <TWI_voidSlaveInit>:

void TWI_voidSlaveInit(u8 Copy_u8Address)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	0f 92       	push	r0
    2bcc:	cd b7       	in	r28, 0x3d	; 61
    2bce:	de b7       	in	r29, 0x3e	; 62
    2bd0:	89 83       	std	Y+1, r24	; 0x01
	// ENABLE ACK
	SET_BIT(TWCR,TWCR_TWEA);
    2bd2:	a6 e5       	ldi	r26, 0x56	; 86
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	e6 e5       	ldi	r30, 0x56	; 86
    2bd8:	f0 e0       	ldi	r31, 0x00	; 0
    2bda:	80 81       	ld	r24, Z
    2bdc:	80 64       	ori	r24, 0x40	; 64
    2bde:	8c 93       	st	X, r24
	// SET ADDRESS
	TWAR=Copy_u8Address<<1;
    2be0:	e2 e2       	ldi	r30, 0x22	; 34
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	88 0f       	add	r24, r24
    2be8:	80 83       	st	Z, r24
	// ENABLE ERIPHRAL
	SET_BIT(TWCR,TWCR_TWEN);
    2bea:	a6 e5       	ldi	r26, 0x56	; 86
    2bec:	b0 e0       	ldi	r27, 0x00	; 0
    2bee:	e6 e5       	ldi	r30, 0x56	; 86
    2bf0:	f0 e0       	ldi	r31, 0x00	; 0
    2bf2:	80 81       	ld	r24, Z
    2bf4:	84 60       	ori	r24, 0x04	; 4
    2bf6:	8c 93       	st	X, r24
}
    2bf8:	0f 90       	pop	r0
    2bfa:	cf 91       	pop	r28
    2bfc:	df 91       	pop	r29
    2bfe:	08 95       	ret

00002c00 <TWI_voidSendStartCondition>:

void TWI_voidSendStartCondition(void)
{
    2c00:	df 93       	push	r29
    2c02:	cf 93       	push	r28
    2c04:	cd b7       	in	r28, 0x3d	; 61
    2c06:	de b7       	in	r29, 0x3e	; 62
	// SEND START CONDITION
	SET_BIT(TWCR,TWCR_TWSTA);
    2c08:	a6 e5       	ldi	r26, 0x56	; 86
    2c0a:	b0 e0       	ldi	r27, 0x00	; 0
    2c0c:	e6 e5       	ldi	r30, 0x56	; 86
    2c0e:	f0 e0       	ldi	r31, 0x00	; 0
    2c10:	80 81       	ld	r24, Z
    2c12:	80 62       	ori	r24, 0x20	; 32
    2c14:	8c 93       	st	X, r24
	// DOWN FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    2c16:	a6 e5       	ldi	r26, 0x56	; 86
    2c18:	b0 e0       	ldi	r27, 0x00	; 0
    2c1a:	e6 e5       	ldi	r30, 0x56	; 86
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
    2c20:	80 68       	ori	r24, 0x80	; 128
    2c22:	8c 93       	st	X, r24
	// WAIT FLAG
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    2c24:	e6 e5       	ldi	r30, 0x56	; 86
    2c26:	f0 e0       	ldi	r31, 0x00	; 0
    2c28:	80 81       	ld	r24, Z
    2c2a:	88 23       	and	r24, r24
    2c2c:	dc f7       	brge	.-10     	; 0x2c24 <TWI_voidSendStartCondition+0x24>
}
    2c2e:	cf 91       	pop	r28
    2c30:	df 91       	pop	r29
    2c32:	08 95       	ret

00002c34 <TWI_voidSendSlaveAdressWithWrite>:

void TWI_voidSendSlaveAdressWithWrite(u8 Copy_u8Address)
{
    2c34:	df 93       	push	r29
    2c36:	cf 93       	push	r28
    2c38:	0f 92       	push	r0
    2c3a:	cd b7       	in	r28, 0x3d	; 61
    2c3c:	de b7       	in	r29, 0x3e	; 62
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	//Set slave Adrees in Data Reg  -> 7MSB ,CLR BIT0
	TWDR=Copy_u8Address<<1;
    2c40:	e3 e2       	ldi	r30, 0x23	; 35
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	88 0f       	add	r24, r24
    2c48:	80 83       	st	Z, r24
	CLR_BIT(TWDR,0);
    2c4a:	a3 e2       	ldi	r26, 0x23	; 35
    2c4c:	b0 e0       	ldi	r27, 0x00	; 0
    2c4e:	e3 e2       	ldi	r30, 0x23	; 35
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	80 81       	ld	r24, Z
    2c54:	8e 7f       	andi	r24, 0xFE	; 254
    2c56:	8c 93       	st	X, r24
	//CLR BIT START CONDITION
	CLR_BIT(TWCR,TWCR_TWSTA);
    2c58:	a6 e5       	ldi	r26, 0x56	; 86
    2c5a:	b0 e0       	ldi	r27, 0x00	; 0
    2c5c:	e6 e5       	ldi	r30, 0x56	; 86
    2c5e:	f0 e0       	ldi	r31, 0x00	; 0
    2c60:	80 81       	ld	r24, Z
    2c62:	8f 7d       	andi	r24, 0xDF	; 223
    2c64:	8c 93       	st	X, r24
	// FLAG DOWN
	SET_BIT(TWCR,TWCR_TWINT);
    2c66:	a6 e5       	ldi	r26, 0x56	; 86
    2c68:	b0 e0       	ldi	r27, 0x00	; 0
    2c6a:	e6 e5       	ldi	r30, 0x56	; 86
    2c6c:	f0 e0       	ldi	r31, 0x00	; 0
    2c6e:	80 81       	ld	r24, Z
    2c70:	80 68       	ori	r24, 0x80	; 128
    2c72:	8c 93       	st	X, r24
	//wait for flag
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    2c74:	e6 e5       	ldi	r30, 0x56	; 86
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	88 23       	and	r24, r24
    2c7c:	dc f7       	brge	.-10     	; 0x2c74 <TWI_voidSendSlaveAdressWithWrite+0x40>
}
    2c7e:	0f 90       	pop	r0
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <TWI_voidSendSlaveAdressWithRead>:

void TWI_voidSendSlaveAdressWithRead(u8 Copy_u8Address)
{
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	0f 92       	push	r0
    2c8c:	cd b7       	in	r28, 0x3d	; 61
    2c8e:	de b7       	in	r29, 0x3e	; 62
    2c90:	89 83       	std	Y+1, r24	; 0x01
	//Set slave Adrees in Data Reg  -> 7MSB ,CLR BIT0
	TWDR=Copy_u8Address<<1;
    2c92:	e3 e2       	ldi	r30, 0x23	; 35
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	88 0f       	add	r24, r24
    2c9a:	80 83       	st	Z, r24
	SET_BIT(TWDR,0);
    2c9c:	a3 e2       	ldi	r26, 0x23	; 35
    2c9e:	b0 e0       	ldi	r27, 0x00	; 0
    2ca0:	e3 e2       	ldi	r30, 0x23	; 35
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	81 60       	ori	r24, 0x01	; 1
    2ca8:	8c 93       	st	X, r24
	//CLR BIT START CONDITION
	CLR_BIT(TWCR,TWCR_TWSTA);
    2caa:	a6 e5       	ldi	r26, 0x56	; 86
    2cac:	b0 e0       	ldi	r27, 0x00	; 0
    2cae:	e6 e5       	ldi	r30, 0x56	; 86
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	80 81       	ld	r24, Z
    2cb4:	8f 7d       	andi	r24, 0xDF	; 223
    2cb6:	8c 93       	st	X, r24
	// FLAG DOWN
	SET_BIT(TWCR,TWCR_TWINT);
    2cb8:	a6 e5       	ldi	r26, 0x56	; 86
    2cba:	b0 e0       	ldi	r27, 0x00	; 0
    2cbc:	e6 e5       	ldi	r30, 0x56	; 86
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	80 68       	ori	r24, 0x80	; 128
    2cc4:	8c 93       	st	X, r24
	//wait for flag
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    2cc6:	e6 e5       	ldi	r30, 0x56	; 86
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	88 23       	and	r24, r24
    2cce:	dc f7       	brge	.-10     	; 0x2cc6 <TWI_voidSendSlaveAdressWithRead+0x40>

}
    2cd0:	0f 90       	pop	r0
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	08 95       	ret

00002cd8 <TWI_voidMasterSendDataByte>:

void TWI_voidMasterSendDataByte(u8 Copy_u8DataByte)
{
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	0f 92       	push	r0
    2cde:	cd b7       	in	r28, 0x3d	; 61
    2ce0:	de b7       	in	r29, 0x3e	; 62
    2ce2:	89 83       	std	Y+1, r24	; 0x01
	TWDR=Copy_u8DataByte;
    2ce4:	e3 e2       	ldi	r30, 0x23	; 35
    2ce6:	f0 e0       	ldi	r31, 0x00	; 0
    2ce8:	89 81       	ldd	r24, Y+1	; 0x01
    2cea:	80 83       	st	Z, r24
	// DOWN FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    2cec:	a6 e5       	ldi	r26, 0x56	; 86
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	e6 e5       	ldi	r30, 0x56	; 86
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	80 68       	ori	r24, 0x80	; 128
    2cf8:	8c 93       	st	X, r24
	// WAIT FLAG
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    2cfa:	e6 e5       	ldi	r30, 0x56	; 86
    2cfc:	f0 e0       	ldi	r31, 0x00	; 0
    2cfe:	80 81       	ld	r24, Z
    2d00:	88 23       	and	r24, r24
    2d02:	dc f7       	brge	.-10     	; 0x2cfa <TWI_voidMasterSendDataByte+0x22>
}
    2d04:	0f 90       	pop	r0
    2d06:	cf 91       	pop	r28
    2d08:	df 91       	pop	r29
    2d0a:	08 95       	ret

00002d0c <TWI_u8MasterRecieveDataByte>:

u8 TWI_u8MasterRecieveDataByte(void)
{
    2d0c:	df 93       	push	r29
    2d0e:	cf 93       	push	r28
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
	// DOWN FLAG
	SET_BIT(TWCR,TWCR_TWINT);
    2d14:	a6 e5       	ldi	r26, 0x56	; 86
    2d16:	b0 e0       	ldi	r27, 0x00	; 0
    2d18:	e6 e5       	ldi	r30, 0x56	; 86
    2d1a:	f0 e0       	ldi	r31, 0x00	; 0
    2d1c:	80 81       	ld	r24, Z
    2d1e:	80 68       	ori	r24, 0x80	; 128
    2d20:	8c 93       	st	X, r24
	// WAIT FLAG
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
    2d22:	e6 e5       	ldi	r30, 0x56	; 86
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	80 81       	ld	r24, Z
    2d28:	88 23       	and	r24, r24
    2d2a:	dc f7       	brge	.-10     	; 0x2d22 <TWI_u8MasterRecieveDataByte+0x16>
	return TWDR;
    2d2c:	e3 e2       	ldi	r30, 0x23	; 35
    2d2e:	f0 e0       	ldi	r31, 0x00	; 0
    2d30:	80 81       	ld	r24, Z
}
    2d32:	cf 91       	pop	r28
    2d34:	df 91       	pop	r29
    2d36:	08 95       	ret

00002d38 <TWI_voidSendStopCondition>:

void TWI_voidSendStopCondition(void)
{
    2d38:	df 93       	push	r29
    2d3a:	cf 93       	push	r28
    2d3c:	cd b7       	in	r28, 0x3d	; 61
    2d3e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWCR_TWSTO);
    2d40:	a6 e5       	ldi	r26, 0x56	; 86
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e6 e5       	ldi	r30, 0x56	; 86
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	80 61       	ori	r24, 0x10	; 16
    2d4c:	8c 93       	st	X, r24
}
    2d4e:	cf 91       	pop	r28
    2d50:	df 91       	pop	r29
    2d52:	08 95       	ret

00002d54 <UART_voidInit>:
static void(*Global_voidPtrFuncSend)(void)=NULL;
static void(*Global_voidPtrFuncRecieve)(void)=NULL;
static u8 Global_u8PtrSend=0;
static u8*Global_u8PtrRecive=NULL;
void UART_voidInit(void)
{
    2d54:	df 93       	push	r29
    2d56:	cf 93       	push	r28
    2d58:	0f 92       	push	r0
    2d5a:	cd b7       	in	r28, 0x3d	; 61
    2d5c:	de b7       	in	r29, 0x3e	; 62
	// CHOOSE CHAR SIZE
	u8 Local_u8CTRLCValue=0;
    2d5e:	19 82       	std	Y+1, r1	; 0x01
#elif CHAR_SIZE == BIT_7
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
	SET_BIT(Local_u8CTRLCValue,UCSRC_UCSZ1);
	CLR_BIT(Local_u8CTRLCValue,UCSRC_UCSZ0);
#elif  CHAR_SIZE == BIT_8
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
    2d60:	aa e2       	ldi	r26, 0x2A	; 42
    2d62:	b0 e0       	ldi	r27, 0x00	; 0
    2d64:	ea e2       	ldi	r30, 0x2A	; 42
    2d66:	f0 e0       	ldi	r31, 0x00	; 0
    2d68:	80 81       	ld	r24, Z
    2d6a:	8b 7f       	andi	r24, 0xFB	; 251
    2d6c:	8c 93       	st	X, r24
	SET_BIT(Local_u8CTRLCValue,UCSRC_UCSZ1);
    2d6e:	89 81       	ldd	r24, Y+1	; 0x01
    2d70:	84 60       	ori	r24, 0x04	; 4
    2d72:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(Local_u8CTRLCValue,UCSRC_UCSZ0);
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	82 60       	ori	r24, 0x02	; 2
    2d78:	89 83       	std	Y+1, r24	; 0x01
#if BAUD_RATE == BAUD_2400
	UPRRL=207;
#elif  BAUD_RATE == BAUD_4800
	UPRRL=103;
#elif BAUD_RATE == BAUD_9600
	UPRRL=51;
    2d7a:	e9 e2       	ldi	r30, 0x29	; 41
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	83 e3       	ldi	r24, 0x33	; 51
    2d80:	80 83       	st	Z, r24
	UPRRL=0;
#else
#error("WRONG BAUD RATE")
#endif
	// NO INT
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    2d82:	aa e2       	ldi	r26, 0x2A	; 42
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	ea e2       	ldi	r30, 0x2A	; 42
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	80 81       	ld	r24, Z
    2d8c:	8f 77       	andi	r24, 0x7F	; 127
    2d8e:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_TXCIE);
    2d90:	aa e2       	ldi	r26, 0x2A	; 42
    2d92:	b0 e0       	ldi	r27, 0x00	; 0
    2d94:	ea e2       	ldi	r30, 0x2A	; 42
    2d96:	f0 e0       	ldi	r31, 0x00	; 0
    2d98:	80 81       	ld	r24, Z
    2d9a:	8f 7b       	andi	r24, 0xBF	; 191
    2d9c:	8c 93       	st	X, r24
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    2d9e:	aa e2       	ldi	r26, 0x2A	; 42
    2da0:	b0 e0       	ldi	r27, 0x00	; 0
    2da2:	ea e2       	ldi	r30, 0x2A	; 42
    2da4:	f0 e0       	ldi	r31, 0x00	; 0
    2da6:	80 81       	ld	r24, Z
    2da8:	8f 7d       	andi	r24, 0xDF	; 223
    2daa:	8c 93       	st	X, r24
	// ENABLE RECIEVER TRANSIMETTER
	SET_BIT(UCSRB,UCSRB_RXEN);
    2dac:	aa e2       	ldi	r26, 0x2A	; 42
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	ea e2       	ldi	r30, 0x2A	; 42
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	80 81       	ld	r24, Z
    2db6:	80 61       	ori	r24, 0x10	; 16
    2db8:	8c 93       	st	X, r24
	SET_BIT(UCSRB,UCSRB_TXEN);
    2dba:	aa e2       	ldi	r26, 0x2A	; 42
    2dbc:	b0 e0       	ldi	r27, 0x00	; 0
    2dbe:	ea e2       	ldi	r30, 0x2A	; 42
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	80 81       	ld	r24, Z
    2dc4:	88 60       	ori	r24, 0x08	; 8
    2dc6:	8c 93       	st	X, r24
	// select ucsrc
	SET_BIT(Local_u8CTRLCValue,UCSRC_URSEL);
    2dc8:	89 81       	ldd	r24, Y+1	; 0x01
    2dca:	80 68       	ori	r24, 0x80	; 128
    2dcc:	89 83       	std	Y+1, r24	; 0x01
	// set asunchronus mode
#if MODE_OPERATION == ASYNCHRONOUS
	CLR_BIT(Local_u8CTRLCValue,UCSRC_UMSEL);
    2dce:	89 81       	ldd	r24, Y+1	; 0x01
    2dd0:	8f 7b       	andi	r24, 0xBF	; 191
    2dd2:	89 83       	std	Y+1, r24	; 0x01
#else
#error ("WRONG MODE")
#endif

#if PARITY_MODE == NO_PARITY
	CLR_BIT(Local_u8CTRLCValue,UCSRC_UPM1);
    2dd4:	89 81       	ldd	r24, Y+1	; 0x01
    2dd6:	8f 7d       	andi	r24, 0xDF	; 223
    2dd8:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(Local_u8CTRLCValue,UCSRC_UPM0);
    2dda:	89 81       	ldd	r24, Y+1	; 0x01
    2ddc:	8f 7e       	andi	r24, 0xEF	; 239
    2dde:	89 83       	std	Y+1, r24	; 0x01
#else
#error("WRONG PARITY MODE")
#endif

#if STOP_BITS == BIT_1
	CLR_BIT(Local_u8CTRLCValue,UCSRC_USBS);
    2de0:	89 81       	ldd	r24, Y+1	; 0x01
    2de2:	87 7f       	andi	r24, 0xF7	; 247
    2de4:	89 83       	std	Y+1, r24	; 0x01
#elif STOP_BITS == BIT_2
	SET_BIT(UCSRC,UCSRC_USBS);
#else
#error("WRONG NUMBER OF STOP BITS")
#endif
UCSRC=Local_u8CTRLCValue;
    2de6:	e0 e4       	ldi	r30, 0x40	; 64
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	80 83       	st	Z, r24
}
    2dee:	0f 90       	pop	r0
    2df0:	cf 91       	pop	r28
    2df2:	df 91       	pop	r29
    2df4:	08 95       	ret

00002df6 <UART_voidSendDataSynch>:

Std_err_e UART_voidSendDataSynch(u8 Copy_u8Data)
{
    2df6:	df 93       	push	r29
    2df8:	cf 93       	push	r28
    2dfa:	00 d0       	rcall	.+0      	; 0x2dfc <UART_voidSendDataSynch+0x6>
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <UART_voidSendDataSynch+0x8>
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <UART_voidSendDataSynch+0xa>
    2e00:	cd b7       	in	r28, 0x3d	; 61
    2e02:	de b7       	in	r29, 0x3e	; 62
    2e04:	8e 83       	std	Y+6, r24	; 0x06
	Std_err_e Local_e_ErrStatus = OK;
    2e06:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
    2e08:	19 82       	std	Y+1, r1	; 0x01
    2e0a:	1a 82       	std	Y+2, r1	; 0x02
    2e0c:	1b 82       	std	Y+3, r1	; 0x03
    2e0e:	1c 82       	std	Y+4, r1	; 0x04
    2e10:	0b c0       	rjmp	.+22     	; 0x2e28 <UART_voidSendDataSynch+0x32>

		while((!GET_BIT(UCSRA,UCSRA_UDRE)) && (Local_u32Counter < TIME_OUT_CYCLE))
		{
			Local_u32Counter++;
    2e12:	89 81       	ldd	r24, Y+1	; 0x01
    2e14:	9a 81       	ldd	r25, Y+2	; 0x02
    2e16:	ab 81       	ldd	r26, Y+3	; 0x03
    2e18:	bc 81       	ldd	r27, Y+4	; 0x04
    2e1a:	01 96       	adiw	r24, 0x01	; 1
    2e1c:	a1 1d       	adc	r26, r1
    2e1e:	b1 1d       	adc	r27, r1
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	9a 83       	std	Y+2, r25	; 0x02
    2e24:	ab 83       	std	Y+3, r26	; 0x03
    2e26:	bc 83       	std	Y+4, r27	; 0x04
Std_err_e UART_voidSendDataSynch(u8 Copy_u8Data)
{
	Std_err_e Local_e_ErrStatus = OK;
	u32 Local_u32Counter=0;

		while((!GET_BIT(UCSRA,UCSRA_UDRE)) && (Local_u32Counter < TIME_OUT_CYCLE))
    2e28:	eb e2       	ldi	r30, 0x2B	; 43
    2e2a:	f0 e0       	ldi	r31, 0x00	; 0
    2e2c:	80 81       	ld	r24, Z
    2e2e:	82 95       	swap	r24
    2e30:	86 95       	lsr	r24
    2e32:	87 70       	andi	r24, 0x07	; 7
    2e34:	88 2f       	mov	r24, r24
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	81 70       	andi	r24, 0x01	; 1
    2e3a:	90 70       	andi	r25, 0x00	; 0
    2e3c:	00 97       	sbiw	r24, 0x00	; 0
    2e3e:	61 f4       	brne	.+24     	; 0x2e58 <UART_voidSendDataSynch+0x62>
    2e40:	89 81       	ldd	r24, Y+1	; 0x01
    2e42:	9a 81       	ldd	r25, Y+2	; 0x02
    2e44:	ab 81       	ldd	r26, Y+3	; 0x03
    2e46:	bc 81       	ldd	r27, Y+4	; 0x04
    2e48:	80 3f       	cpi	r24, 0xF0	; 240
    2e4a:	29 e4       	ldi	r18, 0x49	; 73
    2e4c:	92 07       	cpc	r25, r18
    2e4e:	22 e0       	ldi	r18, 0x02	; 2
    2e50:	a2 07       	cpc	r26, r18
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	b2 07       	cpc	r27, r18
    2e56:	e8 f2       	brcs	.-70     	; 0x2e12 <UART_voidSendDataSynch+0x1c>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter == TIME_OUT_CYCLE)
    2e58:	89 81       	ldd	r24, Y+1	; 0x01
    2e5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e5c:	ab 81       	ldd	r26, Y+3	; 0x03
    2e5e:	bc 81       	ldd	r27, Y+4	; 0x04
    2e60:	80 3f       	cpi	r24, 0xF0	; 240
    2e62:	29 e4       	ldi	r18, 0x49	; 73
    2e64:	92 07       	cpc	r25, r18
    2e66:	22 e0       	ldi	r18, 0x02	; 2
    2e68:	a2 07       	cpc	r26, r18
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	b2 07       	cpc	r27, r18
    2e6e:	19 f4       	brne	.+6      	; 0x2e76 <UART_voidSendDataSynch+0x80>
		{
			Local_e_ErrStatus=TIME_OUT_ERR;
    2e70:	82 e0       	ldi	r24, 0x02	; 2
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	04 c0       	rjmp	.+8      	; 0x2e7e <UART_voidSendDataSynch+0x88>
		}
		else
		{
			UDR = Copy_u8Data;
    2e76:	ec e2       	ldi	r30, 0x2C	; 44
    2e78:	f0 e0       	ldi	r31, 0x00	; 0
    2e7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2e7c:	80 83       	st	Z, r24
		}

	return Local_e_ErrStatus;
    2e7e:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2e80:	26 96       	adiw	r28, 0x06	; 6
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
    2e8c:	cf 91       	pop	r28
    2e8e:	df 91       	pop	r29
    2e90:	08 95       	ret

00002e92 <UART_u8RecieveDataSynch>:
Std_err_e UART_u8RecieveDataSynch(u8 *Copy_u8Reading)
{
    2e92:	df 93       	push	r29
    2e94:	cf 93       	push	r28
    2e96:	cd b7       	in	r28, 0x3d	; 61
    2e98:	de b7       	in	r29, 0x3e	; 62
    2e9a:	27 97       	sbiw	r28, 0x07	; 7
    2e9c:	0f b6       	in	r0, 0x3f	; 63
    2e9e:	f8 94       	cli
    2ea0:	de bf       	out	0x3e, r29	; 62
    2ea2:	0f be       	out	0x3f, r0	; 63
    2ea4:	cd bf       	out	0x3d, r28	; 61
    2ea6:	9f 83       	std	Y+7, r25	; 0x07
    2ea8:	8e 83       	std	Y+6, r24	; 0x06
	Std_err_e Local_e_ErrStatus = OK;
    2eaa:	1d 82       	std	Y+5, r1	; 0x05
	u32 Local_u32Counter=0;
    2eac:	19 82       	std	Y+1, r1	; 0x01
    2eae:	1a 82       	std	Y+2, r1	; 0x02
    2eb0:	1b 82       	std	Y+3, r1	; 0x03
    2eb2:	1c 82       	std	Y+4, r1	; 0x04
	if(Copy_u8Reading != NULL)
    2eb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb8:	00 97       	sbiw	r24, 0x00	; 0
    2eba:	99 f1       	breq	.+102    	; 0x2f22 <UART_u8RecieveDataSynch+0x90>
    2ebc:	0b c0       	rjmp	.+22     	; 0x2ed4 <UART_u8RecieveDataSynch+0x42>
	{
		while((!GET_BIT(UCSRA,UCSRA_RXC)) && Local_u32Counter < TIME_OUT_CYCLE)
		{
			Local_u32Counter++;
    2ebe:	89 81       	ldd	r24, Y+1	; 0x01
    2ec0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ec4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ec6:	01 96       	adiw	r24, 0x01	; 1
    2ec8:	a1 1d       	adc	r26, r1
    2eca:	b1 1d       	adc	r27, r1
    2ecc:	89 83       	std	Y+1, r24	; 0x01
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	ab 83       	std	Y+3, r26	; 0x03
    2ed2:	bc 83       	std	Y+4, r27	; 0x04
{
	Std_err_e Local_e_ErrStatus = OK;
	u32 Local_u32Counter=0;
	if(Copy_u8Reading != NULL)
	{
		while((!GET_BIT(UCSRA,UCSRA_RXC)) && Local_u32Counter < TIME_OUT_CYCLE)
    2ed4:	eb e2       	ldi	r30, 0x2B	; 43
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	80 81       	ld	r24, Z
    2eda:	88 23       	and	r24, r24
    2edc:	64 f0       	brlt	.+24     	; 0x2ef6 <UART_u8RecieveDataSynch+0x64>
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	ab 81       	ldd	r26, Y+3	; 0x03
    2ee4:	bc 81       	ldd	r27, Y+4	; 0x04
    2ee6:	80 3f       	cpi	r24, 0xF0	; 240
    2ee8:	29 e4       	ldi	r18, 0x49	; 73
    2eea:	92 07       	cpc	r25, r18
    2eec:	22 e0       	ldi	r18, 0x02	; 2
    2eee:	a2 07       	cpc	r26, r18
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	b2 07       	cpc	r27, r18
    2ef4:	20 f3       	brcs	.-56     	; 0x2ebe <UART_u8RecieveDataSynch+0x2c>
		{
			Local_u32Counter++;
		}
		if(Local_u32Counter == TIME_OUT_CYCLE)
    2ef6:	89 81       	ldd	r24, Y+1	; 0x01
    2ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    2efa:	ab 81       	ldd	r26, Y+3	; 0x03
    2efc:	bc 81       	ldd	r27, Y+4	; 0x04
    2efe:	80 3f       	cpi	r24, 0xF0	; 240
    2f00:	29 e4       	ldi	r18, 0x49	; 73
    2f02:	92 07       	cpc	r25, r18
    2f04:	22 e0       	ldi	r18, 0x02	; 2
    2f06:	a2 07       	cpc	r26, r18
    2f08:	20 e0       	ldi	r18, 0x00	; 0
    2f0a:	b2 07       	cpc	r27, r18
    2f0c:	19 f4       	brne	.+6      	; 0x2f14 <UART_u8RecieveDataSynch+0x82>
		{
			Local_e_ErrStatus=TIME_OUT_ERR;
    2f0e:	82 e0       	ldi	r24, 0x02	; 2
    2f10:	8d 83       	std	Y+5, r24	; 0x05
    2f12:	09 c0       	rjmp	.+18     	; 0x2f26 <UART_u8RecieveDataSynch+0x94>
		}
		else
		{
			*Copy_u8Reading = UDR;
    2f14:	ec e2       	ldi	r30, 0x2C	; 44
    2f16:	f0 e0       	ldi	r31, 0x00	; 0
    2f18:	80 81       	ld	r24, Z
    2f1a:	ee 81       	ldd	r30, Y+6	; 0x06
    2f1c:	ff 81       	ldd	r31, Y+7	; 0x07
    2f1e:	80 83       	st	Z, r24
    2f20:	02 c0       	rjmp	.+4      	; 0x2f26 <UART_u8RecieveDataSynch+0x94>
		}
	}
	else
	{
		Local_e_ErrStatus=NOK;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	8d 83       	std	Y+5, r24	; 0x05
	}
	return Local_e_ErrStatus;
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2f28:	27 96       	adiw	r28, 0x07	; 7
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <UART_voidSendDataAsynch>:
Std_err_e UART_voidSendDataAsynch(u8 Copy_u8Data,void(*PtrFuncNot)(void))
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	00 d0       	rcall	.+0      	; 0x2f40 <UART_voidSendDataAsynch+0x6>
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <UART_voidSendDataAsynch+0x8>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	8a 83       	std	Y+2, r24	; 0x02
    2f48:	7c 83       	std	Y+4, r23	; 0x04
    2f4a:	6b 83       	std	Y+3, r22	; 0x03
	Std_err_e Local_e_ErrStatus = OK;
    2f4c:	19 82       	std	Y+1, r1	; 0x01
	if(UART_u8Status == IDLE)
    2f4e:	80 91 86 00 	lds	r24, 0x0086
    2f52:	81 30       	cpi	r24, 0x01	; 1
    2f54:	c1 f4       	brne	.+48     	; 0x2f86 <UART_voidSendDataAsynch+0x4c>
	{
		if(PtrFuncNot != NULL)
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	00 97       	sbiw	r24, 0x00	; 0
    2f5c:	b1 f0       	breq	.+44     	; 0x2f8a <UART_voidSendDataAsynch+0x50>
		{
			UART_u8Status = BUSY;
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	80 93 86 00 	sts	0x0086, r24
			Global_u8PtrSend=Copy_u8Data;
    2f64:	8a 81       	ldd	r24, Y+2	; 0x02
    2f66:	80 93 9e 00 	sts	0x009E, r24
			Global_voidPtrFuncSend = PtrFuncNot;
    2f6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2f6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2f6e:	90 93 9b 00 	sts	0x009B, r25
    2f72:	80 93 9a 00 	sts	0x009A, r24
			SET_BIT(UCSRB,UCSRB_UDRIE);
    2f76:	aa e2       	ldi	r26, 0x2A	; 42
    2f78:	b0 e0       	ldi	r27, 0x00	; 0
    2f7a:	ea e2       	ldi	r30, 0x2A	; 42
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	80 81       	ld	r24, Z
    2f80:	80 62       	ori	r24, 0x20	; 32
    2f82:	8c 93       	st	X, r24
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <UART_voidSendDataAsynch+0x50>
		}
	}
	else
	{
		Local_e_ErrStatus = NOK;
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrStatus;
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	0f 90       	pop	r0
    2f94:	cf 91       	pop	r28
    2f96:	df 91       	pop	r29
    2f98:	08 95       	ret

00002f9a <UART_u8RecieveDataAsynch>:

Std_err_e UART_u8RecieveDataAsynch(u8 *Copy_u8Reading,void(*PtrFuncNot)(void))
{
    2f9a:	df 93       	push	r29
    2f9c:	cf 93       	push	r28
    2f9e:	00 d0       	rcall	.+0      	; 0x2fa0 <UART_u8RecieveDataAsynch+0x6>
    2fa0:	00 d0       	rcall	.+0      	; 0x2fa2 <UART_u8RecieveDataAsynch+0x8>
    2fa2:	0f 92       	push	r0
    2fa4:	cd b7       	in	r28, 0x3d	; 61
    2fa6:	de b7       	in	r29, 0x3e	; 62
    2fa8:	9b 83       	std	Y+3, r25	; 0x03
    2faa:	8a 83       	std	Y+2, r24	; 0x02
    2fac:	7d 83       	std	Y+5, r23	; 0x05
    2fae:	6c 83       	std	Y+4, r22	; 0x04
	Std_err_e Local_e_ErrStatus = OK;
    2fb0:	19 82       	std	Y+1, r1	; 0x01
	if(UART_u8Status == IDLE)
    2fb2:	80 91 86 00 	lds	r24, 0x0086
    2fb6:	81 30       	cpi	r24, 0x01	; 1
    2fb8:	f9 f4       	brne	.+62     	; 0x2ff8 <UART_u8RecieveDataAsynch+0x5e>
	{
		if((Copy_u8Reading != NULL) && (PtrFuncNot != NULL))
    2fba:	8a 81       	ldd	r24, Y+2	; 0x02
    2fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbe:	00 97       	sbiw	r24, 0x00	; 0
    2fc0:	e9 f0       	breq	.+58     	; 0x2ffc <UART_u8RecieveDataAsynch+0x62>
    2fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	c9 f0       	breq	.+50     	; 0x2ffc <UART_u8RecieveDataAsynch+0x62>
		{
			UART_u8Status = BUSY;
    2fca:	82 e0       	ldi	r24, 0x02	; 2
    2fcc:	80 93 86 00 	sts	0x0086, r24
			Global_voidPtrFuncRecieve = PtrFuncNot;
    2fd0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fd2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fd4:	90 93 9d 00 	sts	0x009D, r25
    2fd8:	80 93 9c 00 	sts	0x009C, r24
			Global_u8PtrRecive = Copy_u8Reading;
    2fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fde:	9b 81       	ldd	r25, Y+3	; 0x03
    2fe0:	90 93 a0 00 	sts	0x00A0, r25
    2fe4:	80 93 9f 00 	sts	0x009F, r24
			SET_BIT(UCSRB,UCSRB_RXCIE);
    2fe8:	aa e2       	ldi	r26, 0x2A	; 42
    2fea:	b0 e0       	ldi	r27, 0x00	; 0
    2fec:	ea e2       	ldi	r30, 0x2A	; 42
    2fee:	f0 e0       	ldi	r31, 0x00	; 0
    2ff0:	80 81       	ld	r24, Z
    2ff2:	80 68       	ori	r24, 0x80	; 128
    2ff4:	8c 93       	st	X, r24
    2ff6:	02 c0       	rjmp	.+4      	; 0x2ffc <UART_u8RecieveDataAsynch+0x62>
		}
	}
	else
	{
		Local_e_ErrStatus=NOK;
    2ff8:	81 e0       	ldi	r24, 0x01	; 1
    2ffa:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_e_ErrStatus;
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
}
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <__vector_13>:
void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
    300e:	1f 92       	push	r1
    3010:	0f 92       	push	r0
    3012:	0f b6       	in	r0, 0x3f	; 63
    3014:	0f 92       	push	r0
    3016:	11 24       	eor	r1, r1
    3018:	2f 93       	push	r18
    301a:	3f 93       	push	r19
    301c:	4f 93       	push	r20
    301e:	5f 93       	push	r21
    3020:	6f 93       	push	r22
    3022:	7f 93       	push	r23
    3024:	8f 93       	push	r24
    3026:	9f 93       	push	r25
    3028:	af 93       	push	r26
    302a:	bf 93       	push	r27
    302c:	ef 93       	push	r30
    302e:	ff 93       	push	r31
    3030:	df 93       	push	r29
    3032:	cf 93       	push	r28
    3034:	cd b7       	in	r28, 0x3d	; 61
    3036:	de b7       	in	r29, 0x3e	; 62
	UART_u8Status = IDLE;
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	80 93 86 00 	sts	0x0086, r24
	*Global_u8PtrRecive=UDR;
    303e:	a0 91 9f 00 	lds	r26, 0x009F
    3042:	b0 91 a0 00 	lds	r27, 0x00A0
    3046:	ec e2       	ldi	r30, 0x2C	; 44
    3048:	f0 e0       	ldi	r31, 0x00	; 0
    304a:	80 81       	ld	r24, Z
    304c:	8c 93       	st	X, r24
	Global_voidPtrFuncRecieve();
    304e:	e0 91 9c 00 	lds	r30, 0x009C
    3052:	f0 91 9d 00 	lds	r31, 0x009D
    3056:	09 95       	icall
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    3058:	aa e2       	ldi	r26, 0x2A	; 42
    305a:	b0 e0       	ldi	r27, 0x00	; 0
    305c:	ea e2       	ldi	r30, 0x2A	; 42
    305e:	f0 e0       	ldi	r31, 0x00	; 0
    3060:	80 81       	ld	r24, Z
    3062:	8f 77       	andi	r24, 0x7F	; 127
    3064:	8c 93       	st	X, r24
}
    3066:	cf 91       	pop	r28
    3068:	df 91       	pop	r29
    306a:	ff 91       	pop	r31
    306c:	ef 91       	pop	r30
    306e:	bf 91       	pop	r27
    3070:	af 91       	pop	r26
    3072:	9f 91       	pop	r25
    3074:	8f 91       	pop	r24
    3076:	7f 91       	pop	r23
    3078:	6f 91       	pop	r22
    307a:	5f 91       	pop	r21
    307c:	4f 91       	pop	r20
    307e:	3f 91       	pop	r19
    3080:	2f 91       	pop	r18
    3082:	0f 90       	pop	r0
    3084:	0f be       	out	0x3f, r0	; 63
    3086:	0f 90       	pop	r0
    3088:	1f 90       	pop	r1
    308a:	18 95       	reti

0000308c <__vector_14>:
void __vector_14(void)  __attribute__((signal));
void __vector_14(void)
{
    308c:	1f 92       	push	r1
    308e:	0f 92       	push	r0
    3090:	0f b6       	in	r0, 0x3f	; 63
    3092:	0f 92       	push	r0
    3094:	11 24       	eor	r1, r1
    3096:	2f 93       	push	r18
    3098:	3f 93       	push	r19
    309a:	4f 93       	push	r20
    309c:	5f 93       	push	r21
    309e:	6f 93       	push	r22
    30a0:	7f 93       	push	r23
    30a2:	8f 93       	push	r24
    30a4:	9f 93       	push	r25
    30a6:	af 93       	push	r26
    30a8:	bf 93       	push	r27
    30aa:	ef 93       	push	r30
    30ac:	ff 93       	push	r31
    30ae:	df 93       	push	r29
    30b0:	cf 93       	push	r28
    30b2:	cd b7       	in	r28, 0x3d	; 61
    30b4:	de b7       	in	r29, 0x3e	; 62
	UART_u8Status = IDLE;
    30b6:	81 e0       	ldi	r24, 0x01	; 1
    30b8:	80 93 86 00 	sts	0x0086, r24
	UDR = Global_u8PtrSend;
    30bc:	ec e2       	ldi	r30, 0x2C	; 44
    30be:	f0 e0       	ldi	r31, 0x00	; 0
    30c0:	80 91 9e 00 	lds	r24, 0x009E
    30c4:	80 83       	st	Z, r24
	Global_voidPtrFuncSend();
    30c6:	e0 91 9a 00 	lds	r30, 0x009A
    30ca:	f0 91 9b 00 	lds	r31, 0x009B
    30ce:	09 95       	icall
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    30d0:	aa e2       	ldi	r26, 0x2A	; 42
    30d2:	b0 e0       	ldi	r27, 0x00	; 0
    30d4:	ea e2       	ldi	r30, 0x2A	; 42
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	80 81       	ld	r24, Z
    30da:	8f 7d       	andi	r24, 0xDF	; 223
    30dc:	8c 93       	st	X, r24
}
    30de:	cf 91       	pop	r28
    30e0:	df 91       	pop	r29
    30e2:	ff 91       	pop	r31
    30e4:	ef 91       	pop	r30
    30e6:	bf 91       	pop	r27
    30e8:	af 91       	pop	r26
    30ea:	9f 91       	pop	r25
    30ec:	8f 91       	pop	r24
    30ee:	7f 91       	pop	r23
    30f0:	6f 91       	pop	r22
    30f2:	5f 91       	pop	r21
    30f4:	4f 91       	pop	r20
    30f6:	3f 91       	pop	r19
    30f8:	2f 91       	pop	r18
    30fa:	0f 90       	pop	r0
    30fc:	0f be       	out	0x3f, r0	; 63
    30fe:	0f 90       	pop	r0
    3100:	1f 90       	pop	r1
    3102:	18 95       	reti

00003104 <TimeCalculation>:
f64 *Global_f64Reading=0;

//u8 ECHO_FLAG=0;

static void TimeCalculation(void)
{
    3104:	df 93       	push	r29
    3106:	cf 93       	push	r28
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
	Global_f64time+=100;
    310c:	80 91 a1 00 	lds	r24, 0x00A1
    3110:	90 91 a2 00 	lds	r25, 0x00A2
    3114:	a0 91 a3 00 	lds	r26, 0x00A3
    3118:	b0 91 a4 00 	lds	r27, 0x00A4
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	20 e0       	ldi	r18, 0x00	; 0
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	48 ec       	ldi	r20, 0xC8	; 200
    3126:	52 e4       	ldi	r21, 0x42	; 66
    3128:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    312c:	dc 01       	movw	r26, r24
    312e:	cb 01       	movw	r24, r22
    3130:	80 93 a1 00 	sts	0x00A1, r24
    3134:	90 93 a2 00 	sts	0x00A2, r25
    3138:	a0 93 a3 00 	sts	0x00A3, r26
    313c:	b0 93 a4 00 	sts	0x00A4, r27
}
    3140:	cf 91       	pop	r28
    3142:	df 91       	pop	r29
    3144:	08 95       	ret

00003146 <FuncOfTime>:
 void FuncOfTime(void)
{
    3146:	df 93       	push	r29
    3148:	cf 93       	push	r28
    314a:	cd b7       	in	r28, 0x3d	; 61
    314c:	de b7       	in	r29, 0x3e	; 62
	static u8 Local_u8Counter=0;
	Local_u8Counter++;
    314e:	80 91 a7 00 	lds	r24, 0x00A7
    3152:	8f 5f       	subi	r24, 0xFF	; 255
    3154:	80 93 a7 00 	sts	0x00A7, r24
	if (Local_u8Counter==1)
    3158:	80 91 a7 00 	lds	r24, 0x00A7
    315c:	81 30       	cpi	r24, 0x01	; 1
    315e:	99 f4       	brne	.+38     	; 0x3186 <FuncOfTime+0x40>
	{
		CTC_voidCTCEnable();
    3160:	0e 94 ff 13 	call	0x27fe	; 0x27fe <CTC_voidCTCEnable>
		Global_f64time=0;
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	a0 e0       	ldi	r26, 0x00	; 0
    316a:	b0 e0       	ldi	r27, 0x00	; 0
    316c:	80 93 a1 00 	sts	0x00A1, r24
    3170:	90 93 a2 00 	sts	0x00A2, r25
    3174:	a0 93 a3 00 	sts	0x00A3, r26
    3178:	b0 93 a4 00 	sts	0x00A4, r27
		EXTI_voidSetSenseCtrl(INT_0,falling_edge);
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	62 e0       	ldi	r22, 0x02	; 2
    3180:	0e 94 b2 10 	call	0x2164	; 0x2164 <EXTI_voidSetSenseCtrl>
    3184:	18 c0       	rjmp	.+48     	; 0x31b6 <FuncOfTime+0x70>
		//ECHO_FLAG++;
	}
	else if (Local_u8Counter==2)
    3186:	80 91 a7 00 	lds	r24, 0x00A7
    318a:	82 30       	cpi	r24, 0x02	; 2
    318c:	a1 f4       	brne	.+40     	; 0x31b6 <FuncOfTime+0x70>
	{

		Local_u8Counter=0;
    318e:	10 92 a7 00 	sts	0x00A7, r1
		*Global_f64Reading=Global_f64time;
    3192:	e0 91 a5 00 	lds	r30, 0x00A5
    3196:	f0 91 a6 00 	lds	r31, 0x00A6
    319a:	80 91 a1 00 	lds	r24, 0x00A1
    319e:	90 91 a2 00 	lds	r25, 0x00A2
    31a2:	a0 91 a3 00 	lds	r26, 0x00A3
    31a6:	b0 91 a4 00 	lds	r27, 0x00A4
    31aa:	80 83       	st	Z, r24
    31ac:	91 83       	std	Z+1, r25	; 0x01
    31ae:	a2 83       	std	Z+2, r26	; 0x02
    31b0:	b3 83       	std	Z+3, r27	; 0x03
		CTC_voidCTCDisable();
    31b2:	0e 94 0d 14 	call	0x281a	; 0x281a <CTC_voidCTCDisable>
		//ECHO_FLAG--;
	}
}
    31b6:	cf 91       	pop	r28
    31b8:	df 91       	pop	r29
    31ba:	08 95       	ret

000031bc <US_voidGetDistance>:

void US_voidGetDistance(u8 Copy_u8TrigPort,u8 Copy_u8TrigPin,f64 *Copy_f64Reading)
{
    31bc:	df 93       	push	r29
    31be:	cf 93       	push	r28
    31c0:	cd b7       	in	r28, 0x3d	; 61
    31c2:	de b7       	in	r29, 0x3e	; 62
    31c4:	c2 54       	subi	r28, 0x42	; 66
    31c6:	d0 40       	sbci	r29, 0x00	; 0
    31c8:	0f b6       	in	r0, 0x3f	; 63
    31ca:	f8 94       	cli
    31cc:	de bf       	out	0x3e, r29	; 62
    31ce:	0f be       	out	0x3f, r0	; 63
    31d0:	cd bf       	out	0x3d, r28	; 61
    31d2:	8f af       	std	Y+63, r24	; 0x3f
    31d4:	fe 01       	movw	r30, r28
    31d6:	e0 5c       	subi	r30, 0xC0	; 192
    31d8:	ff 4f       	sbci	r31, 0xFF	; 255
    31da:	60 83       	st	Z, r22
    31dc:	fe 01       	movw	r30, r28
    31de:	ef 5b       	subi	r30, 0xBF	; 191
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	51 83       	std	Z+1, r21	; 0x01
    31e4:	40 83       	st	Z, r20
	GI_voidEnable();
    31e6:	0e 94 8a 12 	call	0x2514	; 0x2514 <GI_voidEnable>
	Global_f64Reading=Copy_f64Reading;
    31ea:	fe 01       	movw	r30, r28
    31ec:	ef 5b       	subi	r30, 0xBF	; 191
    31ee:	ff 4f       	sbci	r31, 0xFF	; 255
    31f0:	80 81       	ld	r24, Z
    31f2:	91 81       	ldd	r25, Z+1	; 0x01
    31f4:	90 93 a6 00 	sts	0x00A6, r25
    31f8:	80 93 a5 00 	sts	0x00A5, r24
	TIMER0_e_SetCallBackCMP(TimeCalculation);
    31fc:	82 e8       	ldi	r24, 0x82	; 130
    31fe:	98 e1       	ldi	r25, 0x18	; 24
    3200:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <TIMER0_e_SetCallBackCMP>
	TIMER0_voidSetCmpValue(100);
    3204:	84 e6       	ldi	r24, 0x64	; 100
    3206:	0e 94 b7 13 	call	0x276e	; 0x276e <TIMER0_voidSetCmpValue>
	TIMER0_voidInit();
    320a:	0e 94 7f 13 	call	0x26fe	; 0x26fe <TIMER0_voidInit>
	CTC_voidCTCDisable();
    320e:	0e 94 0d 14 	call	0x281a	; 0x281a <CTC_voidCTCDisable>
	DIO_voidSetPinValue(Copy_u8TrigPort,Copy_u8TrigPin,PIN_LOW);
    3212:	8f ad       	ldd	r24, Y+63	; 0x3f
    3214:	fe 01       	movw	r30, r28
    3216:	e0 5c       	subi	r30, 0xC0	; 192
    3218:	ff 4f       	sbci	r31, 0xFF	; 255
    321a:	60 81       	ld	r22, Z
    321c:	40 e0       	ldi	r20, 0x00	; 0
    321e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    3222:	80 e0       	ldi	r24, 0x00	; 0
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	a0 e0       	ldi	r26, 0x00	; 0
    3228:	b0 e4       	ldi	r27, 0x40	; 64
    322a:	8b af       	std	Y+59, r24	; 0x3b
    322c:	9c af       	std	Y+60, r25	; 0x3c
    322e:	ad af       	std	Y+61, r26	; 0x3d
    3230:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3232:	6b ad       	ldd	r22, Y+59	; 0x3b
    3234:	7c ad       	ldd	r23, Y+60	; 0x3c
    3236:	8d ad       	ldd	r24, Y+61	; 0x3d
    3238:	9e ad       	ldd	r25, Y+62	; 0x3e
    323a:	2b ea       	ldi	r18, 0xAB	; 171
    323c:	3a ea       	ldi	r19, 0xAA	; 170
    323e:	4a e2       	ldi	r20, 0x2A	; 42
    3240:	50 e4       	ldi	r21, 0x40	; 64
    3242:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3246:	dc 01       	movw	r26, r24
    3248:	cb 01       	movw	r24, r22
    324a:	8f ab       	std	Y+55, r24	; 0x37
    324c:	98 af       	std	Y+56, r25	; 0x38
    324e:	a9 af       	std	Y+57, r26	; 0x39
    3250:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3252:	6f a9       	ldd	r22, Y+55	; 0x37
    3254:	78 ad       	ldd	r23, Y+56	; 0x38
    3256:	89 ad       	ldd	r24, Y+57	; 0x39
    3258:	9a ad       	ldd	r25, Y+58	; 0x3a
    325a:	20 e0       	ldi	r18, 0x00	; 0
    325c:	30 e0       	ldi	r19, 0x00	; 0
    325e:	40 e8       	ldi	r20, 0x80	; 128
    3260:	5f e3       	ldi	r21, 0x3F	; 63
    3262:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3266:	88 23       	and	r24, r24
    3268:	1c f4       	brge	.+6      	; 0x3270 <US_voidGetDistance+0xb4>
		__ticks = 1;
    326a:	81 e0       	ldi	r24, 0x01	; 1
    326c:	8e ab       	std	Y+54, r24	; 0x36
    326e:	91 c0       	rjmp	.+290    	; 0x3392 <US_voidGetDistance+0x1d6>
	else if (__tmp > 255)
    3270:	6f a9       	ldd	r22, Y+55	; 0x37
    3272:	78 ad       	ldd	r23, Y+56	; 0x38
    3274:	89 ad       	ldd	r24, Y+57	; 0x39
    3276:	9a ad       	ldd	r25, Y+58	; 0x3a
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	4f e7       	ldi	r20, 0x7F	; 127
    327e:	53 e4       	ldi	r21, 0x43	; 67
    3280:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3284:	18 16       	cp	r1, r24
    3286:	0c f0       	brlt	.+2      	; 0x328a <US_voidGetDistance+0xce>
    3288:	7b c0       	rjmp	.+246    	; 0x3380 <US_voidGetDistance+0x1c4>
	{
		_delay_ms(__us / 1000.0);
    328a:	6b ad       	ldd	r22, Y+59	; 0x3b
    328c:	7c ad       	ldd	r23, Y+60	; 0x3c
    328e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3290:	9e ad       	ldd	r25, Y+62	; 0x3e
    3292:	20 e0       	ldi	r18, 0x00	; 0
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	4a e7       	ldi	r20, 0x7A	; 122
    3298:	54 e4       	ldi	r21, 0x44	; 68
    329a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    329e:	dc 01       	movw	r26, r24
    32a0:	cb 01       	movw	r24, r22
    32a2:	8a ab       	std	Y+50, r24	; 0x32
    32a4:	9b ab       	std	Y+51, r25	; 0x33
    32a6:	ac ab       	std	Y+52, r26	; 0x34
    32a8:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32aa:	6a a9       	ldd	r22, Y+50	; 0x32
    32ac:	7b a9       	ldd	r23, Y+51	; 0x33
    32ae:	8c a9       	ldd	r24, Y+52	; 0x34
    32b0:	9d a9       	ldd	r25, Y+53	; 0x35
    32b2:	20 e0       	ldi	r18, 0x00	; 0
    32b4:	30 e0       	ldi	r19, 0x00	; 0
    32b6:	4a ef       	ldi	r20, 0xFA	; 250
    32b8:	54 e4       	ldi	r21, 0x44	; 68
    32ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32be:	dc 01       	movw	r26, r24
    32c0:	cb 01       	movw	r24, r22
    32c2:	8e a7       	std	Y+46, r24	; 0x2e
    32c4:	9f a7       	std	Y+47, r25	; 0x2f
    32c6:	a8 ab       	std	Y+48, r26	; 0x30
    32c8:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    32ca:	6e a5       	ldd	r22, Y+46	; 0x2e
    32cc:	7f a5       	ldd	r23, Y+47	; 0x2f
    32ce:	88 a9       	ldd	r24, Y+48	; 0x30
    32d0:	99 a9       	ldd	r25, Y+49	; 0x31
    32d2:	20 e0       	ldi	r18, 0x00	; 0
    32d4:	30 e0       	ldi	r19, 0x00	; 0
    32d6:	40 e8       	ldi	r20, 0x80	; 128
    32d8:	5f e3       	ldi	r21, 0x3F	; 63
    32da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32de:	88 23       	and	r24, r24
    32e0:	2c f4       	brge	.+10     	; 0x32ec <US_voidGetDistance+0x130>
		__ticks = 1;
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	9d a7       	std	Y+45, r25	; 0x2d
    32e8:	8c a7       	std	Y+44, r24	; 0x2c
    32ea:	3f c0       	rjmp	.+126    	; 0x336a <US_voidGetDistance+0x1ae>
	else if (__tmp > 65535)
    32ec:	6e a5       	ldd	r22, Y+46	; 0x2e
    32ee:	7f a5       	ldd	r23, Y+47	; 0x2f
    32f0:	88 a9       	ldd	r24, Y+48	; 0x30
    32f2:	99 a9       	ldd	r25, Y+49	; 0x31
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	3f ef       	ldi	r19, 0xFF	; 255
    32f8:	4f e7       	ldi	r20, 0x7F	; 127
    32fa:	57 e4       	ldi	r21, 0x47	; 71
    32fc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3300:	18 16       	cp	r1, r24
    3302:	4c f5       	brge	.+82     	; 0x3356 <US_voidGetDistance+0x19a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3304:	6a a9       	ldd	r22, Y+50	; 0x32
    3306:	7b a9       	ldd	r23, Y+51	; 0x33
    3308:	8c a9       	ldd	r24, Y+52	; 0x34
    330a:	9d a9       	ldd	r25, Y+53	; 0x35
    330c:	20 e0       	ldi	r18, 0x00	; 0
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	40 e2       	ldi	r20, 0x20	; 32
    3312:	51 e4       	ldi	r21, 0x41	; 65
    3314:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3318:	dc 01       	movw	r26, r24
    331a:	cb 01       	movw	r24, r22
    331c:	bc 01       	movw	r22, r24
    331e:	cd 01       	movw	r24, r26
    3320:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3324:	dc 01       	movw	r26, r24
    3326:	cb 01       	movw	r24, r22
    3328:	9d a7       	std	Y+45, r25	; 0x2d
    332a:	8c a7       	std	Y+44, r24	; 0x2c
    332c:	0f c0       	rjmp	.+30     	; 0x334c <US_voidGetDistance+0x190>
    332e:	88 ec       	ldi	r24, 0xC8	; 200
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	9b a7       	std	Y+43, r25	; 0x2b
    3334:	8a a7       	std	Y+42, r24	; 0x2a
    3336:	8a a5       	ldd	r24, Y+42	; 0x2a
    3338:	9b a5       	ldd	r25, Y+43	; 0x2b
    333a:	01 97       	sbiw	r24, 0x01	; 1
    333c:	f1 f7       	brne	.-4      	; 0x333a <US_voidGetDistance+0x17e>
    333e:	9b a7       	std	Y+43, r25	; 0x2b
    3340:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3342:	8c a5       	ldd	r24, Y+44	; 0x2c
    3344:	9d a5       	ldd	r25, Y+45	; 0x2d
    3346:	01 97       	sbiw	r24, 0x01	; 1
    3348:	9d a7       	std	Y+45, r25	; 0x2d
    334a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    334c:	8c a5       	ldd	r24, Y+44	; 0x2c
    334e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	69 f7       	brne	.-38     	; 0x332e <US_voidGetDistance+0x172>
    3354:	24 c0       	rjmp	.+72     	; 0x339e <US_voidGetDistance+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3356:	6e a5       	ldd	r22, Y+46	; 0x2e
    3358:	7f a5       	ldd	r23, Y+47	; 0x2f
    335a:	88 a9       	ldd	r24, Y+48	; 0x30
    335c:	99 a9       	ldd	r25, Y+49	; 0x31
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
    3366:	9d a7       	std	Y+45, r25	; 0x2d
    3368:	8c a7       	std	Y+44, r24	; 0x2c
    336a:	8c a5       	ldd	r24, Y+44	; 0x2c
    336c:	9d a5       	ldd	r25, Y+45	; 0x2d
    336e:	99 a7       	std	Y+41, r25	; 0x29
    3370:	88 a7       	std	Y+40, r24	; 0x28
    3372:	88 a5       	ldd	r24, Y+40	; 0x28
    3374:	99 a5       	ldd	r25, Y+41	; 0x29
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <US_voidGetDistance+0x1ba>
    337a:	99 a7       	std	Y+41, r25	; 0x29
    337c:	88 a7       	std	Y+40, r24	; 0x28
    337e:	0f c0       	rjmp	.+30     	; 0x339e <US_voidGetDistance+0x1e2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3380:	6f a9       	ldd	r22, Y+55	; 0x37
    3382:	78 ad       	ldd	r23, Y+56	; 0x38
    3384:	89 ad       	ldd	r24, Y+57	; 0x39
    3386:	9a ad       	ldd	r25, Y+58	; 0x3a
    3388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338c:	dc 01       	movw	r26, r24
    338e:	cb 01       	movw	r24, r22
    3390:	8e ab       	std	Y+54, r24	; 0x36
    3392:	8e a9       	ldd	r24, Y+54	; 0x36
    3394:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3396:	8f a1       	ldd	r24, Y+39	; 0x27
    3398:	8a 95       	dec	r24
    339a:	f1 f7       	brne	.-4      	; 0x3398 <US_voidGetDistance+0x1dc>
    339c:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(2);
	DIO_voidSetPinValue(Copy_u8TrigPort,Copy_u8TrigPin,PIN_HIGH);
    339e:	8f ad       	ldd	r24, Y+63	; 0x3f
    33a0:	fe 01       	movw	r30, r28
    33a2:	e0 5c       	subi	r30, 0xC0	; 192
    33a4:	ff 4f       	sbci	r31, 0xFF	; 255
    33a6:	60 81       	ld	r22, Z
    33a8:	41 e0       	ldi	r20, 0x01	; 1
    33aa:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    33ae:	80 e0       	ldi	r24, 0x00	; 0
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	a0 e2       	ldi	r26, 0x20	; 32
    33b4:	b1 e4       	ldi	r27, 0x41	; 65
    33b6:	8b a3       	std	Y+35, r24	; 0x23
    33b8:	9c a3       	std	Y+36, r25	; 0x24
    33ba:	ad a3       	std	Y+37, r26	; 0x25
    33bc:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33be:	6b a1       	ldd	r22, Y+35	; 0x23
    33c0:	7c a1       	ldd	r23, Y+36	; 0x24
    33c2:	8d a1       	ldd	r24, Y+37	; 0x25
    33c4:	9e a1       	ldd	r25, Y+38	; 0x26
    33c6:	2b ea       	ldi	r18, 0xAB	; 171
    33c8:	3a ea       	ldi	r19, 0xAA	; 170
    33ca:	4a e2       	ldi	r20, 0x2A	; 42
    33cc:	50 e4       	ldi	r21, 0x40	; 64
    33ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33d2:	dc 01       	movw	r26, r24
    33d4:	cb 01       	movw	r24, r22
    33d6:	8f 8f       	std	Y+31, r24	; 0x1f
    33d8:	98 a3       	std	Y+32, r25	; 0x20
    33da:	a9 a3       	std	Y+33, r26	; 0x21
    33dc:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    33de:	6f 8d       	ldd	r22, Y+31	; 0x1f
    33e0:	78 a1       	ldd	r23, Y+32	; 0x20
    33e2:	89 a1       	ldd	r24, Y+33	; 0x21
    33e4:	9a a1       	ldd	r25, Y+34	; 0x22
    33e6:	20 e0       	ldi	r18, 0x00	; 0
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	40 e8       	ldi	r20, 0x80	; 128
    33ec:	5f e3       	ldi	r21, 0x3F	; 63
    33ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    33f2:	88 23       	and	r24, r24
    33f4:	1c f4       	brge	.+6      	; 0x33fc <US_voidGetDistance+0x240>
		__ticks = 1;
    33f6:	81 e0       	ldi	r24, 0x01	; 1
    33f8:	8e 8f       	std	Y+30, r24	; 0x1e
    33fa:	91 c0       	rjmp	.+290    	; 0x351e <US_voidGetDistance+0x362>
	else if (__tmp > 255)
    33fc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    33fe:	78 a1       	ldd	r23, Y+32	; 0x20
    3400:	89 a1       	ldd	r24, Y+33	; 0x21
    3402:	9a a1       	ldd	r25, Y+34	; 0x22
    3404:	20 e0       	ldi	r18, 0x00	; 0
    3406:	30 e0       	ldi	r19, 0x00	; 0
    3408:	4f e7       	ldi	r20, 0x7F	; 127
    340a:	53 e4       	ldi	r21, 0x43	; 67
    340c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3410:	18 16       	cp	r1, r24
    3412:	0c f0       	brlt	.+2      	; 0x3416 <US_voidGetDistance+0x25a>
    3414:	7b c0       	rjmp	.+246    	; 0x350c <US_voidGetDistance+0x350>
	{
		_delay_ms(__us / 1000.0);
    3416:	6b a1       	ldd	r22, Y+35	; 0x23
    3418:	7c a1       	ldd	r23, Y+36	; 0x24
    341a:	8d a1       	ldd	r24, Y+37	; 0x25
    341c:	9e a1       	ldd	r25, Y+38	; 0x26
    341e:	20 e0       	ldi	r18, 0x00	; 0
    3420:	30 e0       	ldi	r19, 0x00	; 0
    3422:	4a e7       	ldi	r20, 0x7A	; 122
    3424:	54 e4       	ldi	r21, 0x44	; 68
    3426:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    342a:	dc 01       	movw	r26, r24
    342c:	cb 01       	movw	r24, r22
    342e:	8a 8f       	std	Y+26, r24	; 0x1a
    3430:	9b 8f       	std	Y+27, r25	; 0x1b
    3432:	ac 8f       	std	Y+28, r26	; 0x1c
    3434:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3436:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3438:	7b 8d       	ldd	r23, Y+27	; 0x1b
    343a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    343c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	4a ef       	ldi	r20, 0xFA	; 250
    3444:	54 e4       	ldi	r21, 0x44	; 68
    3446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	8e 8b       	std	Y+22, r24	; 0x16
    3450:	9f 8b       	std	Y+23, r25	; 0x17
    3452:	a8 8f       	std	Y+24, r26	; 0x18
    3454:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3456:	6e 89       	ldd	r22, Y+22	; 0x16
    3458:	7f 89       	ldd	r23, Y+23	; 0x17
    345a:	88 8d       	ldd	r24, Y+24	; 0x18
    345c:	99 8d       	ldd	r25, Y+25	; 0x19
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e8       	ldi	r20, 0x80	; 128
    3464:	5f e3       	ldi	r21, 0x3F	; 63
    3466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    346a:	88 23       	and	r24, r24
    346c:	2c f4       	brge	.+10     	; 0x3478 <US_voidGetDistance+0x2bc>
		__ticks = 1;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9d 8b       	std	Y+21, r25	; 0x15
    3474:	8c 8b       	std	Y+20, r24	; 0x14
    3476:	3f c0       	rjmp	.+126    	; 0x34f6 <US_voidGetDistance+0x33a>
	else if (__tmp > 65535)
    3478:	6e 89       	ldd	r22, Y+22	; 0x16
    347a:	7f 89       	ldd	r23, Y+23	; 0x17
    347c:	88 8d       	ldd	r24, Y+24	; 0x18
    347e:	99 8d       	ldd	r25, Y+25	; 0x19
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	3f ef       	ldi	r19, 0xFF	; 255
    3484:	4f e7       	ldi	r20, 0x7F	; 127
    3486:	57 e4       	ldi	r21, 0x47	; 71
    3488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    348c:	18 16       	cp	r1, r24
    348e:	4c f5       	brge	.+82     	; 0x34e2 <US_voidGetDistance+0x326>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3490:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3492:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3494:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3496:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e2       	ldi	r20, 0x20	; 32
    349e:	51 e4       	ldi	r21, 0x41	; 65
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9d 8b       	std	Y+21, r25	; 0x15
    34b6:	8c 8b       	std	Y+20, r24	; 0x14
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <US_voidGetDistance+0x31c>
    34ba:	88 ec       	ldi	r24, 0xC8	; 200
    34bc:	90 e0       	ldi	r25, 0x00	; 0
    34be:	9b 8b       	std	Y+19, r25	; 0x13
    34c0:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    34c2:	8a 89       	ldd	r24, Y+18	; 0x12
    34c4:	9b 89       	ldd	r25, Y+19	; 0x13
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <US_voidGetDistance+0x30a>
    34ca:	9b 8b       	std	Y+19, r25	; 0x13
    34cc:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ce:	8c 89       	ldd	r24, Y+20	; 0x14
    34d0:	9d 89       	ldd	r25, Y+21	; 0x15
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	9d 8b       	std	Y+21, r25	; 0x15
    34d6:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d8:	8c 89       	ldd	r24, Y+20	; 0x14
    34da:	9d 89       	ldd	r25, Y+21	; 0x15
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	69 f7       	brne	.-38     	; 0x34ba <US_voidGetDistance+0x2fe>
    34e0:	24 c0       	rjmp	.+72     	; 0x352a <US_voidGetDistance+0x36e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e2:	6e 89       	ldd	r22, Y+22	; 0x16
    34e4:	7f 89       	ldd	r23, Y+23	; 0x17
    34e6:	88 8d       	ldd	r24, Y+24	; 0x18
    34e8:	99 8d       	ldd	r25, Y+25	; 0x19
    34ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	9d 8b       	std	Y+21, r25	; 0x15
    34f4:	8c 8b       	std	Y+20, r24	; 0x14
    34f6:	8c 89       	ldd	r24, Y+20	; 0x14
    34f8:	9d 89       	ldd	r25, Y+21	; 0x15
    34fa:	99 8b       	std	Y+17, r25	; 0x11
    34fc:	88 8b       	std	Y+16, r24	; 0x10
    34fe:	88 89       	ldd	r24, Y+16	; 0x10
    3500:	99 89       	ldd	r25, Y+17	; 0x11
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <US_voidGetDistance+0x346>
    3506:	99 8b       	std	Y+17, r25	; 0x11
    3508:	88 8b       	std	Y+16, r24	; 0x10
    350a:	0f c0       	rjmp	.+30     	; 0x352a <US_voidGetDistance+0x36e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    350c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    350e:	78 a1       	ldd	r23, Y+32	; 0x20
    3510:	89 a1       	ldd	r24, Y+33	; 0x21
    3512:	9a a1       	ldd	r25, Y+34	; 0x22
    3514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3518:	dc 01       	movw	r26, r24
    351a:	cb 01       	movw	r24, r22
    351c:	8e 8f       	std	Y+30, r24	; 0x1e
    351e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3520:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3522:	8f 85       	ldd	r24, Y+15	; 0x0f
    3524:	8a 95       	dec	r24
    3526:	f1 f7       	brne	.-4      	; 0x3524 <US_voidGetDistance+0x368>
    3528:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(10);
	DIO_voidSetPinValue(Copy_u8TrigPort,Copy_u8TrigPin,PIN_LOW);
    352a:	8f ad       	ldd	r24, Y+63	; 0x3f
    352c:	fe 01       	movw	r30, r28
    352e:	e0 5c       	subi	r30, 0xC0	; 192
    3530:	ff 4f       	sbci	r31, 0xFF	; 255
    3532:	60 81       	ld	r22, Z
    3534:	40 e0       	ldi	r20, 0x00	; 0
    3536:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	EXTI_voidEnableDisable(INT_0,Enabled);
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	0e 94 2c 10 	call	0x2058	; 0x2058 <EXTI_voidEnableDisable>
	EXTI_voidSetSenseCtrl(INT_0,rising_edge);
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	63 e0       	ldi	r22, 0x03	; 3
    3546:	0e 94 b2 10 	call	0x2164	; 0x2164 <EXTI_voidSetSenseCtrl>
	EXTI_voidSetCallBack(INT_0,FuncOfTime);
    354a:	23 ea       	ldi	r18, 0xA3	; 163
    354c:	38 e1       	ldi	r19, 0x18	; 24
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	b9 01       	movw	r22, r18
    3552:	0e 94 b2 11 	call	0x2364	; 0x2364 <EXTI_voidSetCallBack>
    3556:	80 e0       	ldi	r24, 0x00	; 0
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	a0 ea       	ldi	r26, 0xA0	; 160
    355c:	b1 e4       	ldi	r27, 0x41	; 65
    355e:	8b 87       	std	Y+11, r24	; 0x0b
    3560:	9c 87       	std	Y+12, r25	; 0x0c
    3562:	ad 87       	std	Y+13, r26	; 0x0d
    3564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3566:	6b 85       	ldd	r22, Y+11	; 0x0b
    3568:	7c 85       	ldd	r23, Y+12	; 0x0c
    356a:	8d 85       	ldd	r24, Y+13	; 0x0d
    356c:	9e 85       	ldd	r25, Y+14	; 0x0e
    356e:	20 e0       	ldi	r18, 0x00	; 0
    3570:	30 e0       	ldi	r19, 0x00	; 0
    3572:	4a ef       	ldi	r20, 0xFA	; 250
    3574:	54 e4       	ldi	r21, 0x44	; 68
    3576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    357a:	dc 01       	movw	r26, r24
    357c:	cb 01       	movw	r24, r22
    357e:	8f 83       	std	Y+7, r24	; 0x07
    3580:	98 87       	std	Y+8, r25	; 0x08
    3582:	a9 87       	std	Y+9, r26	; 0x09
    3584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3586:	6f 81       	ldd	r22, Y+7	; 0x07
    3588:	78 85       	ldd	r23, Y+8	; 0x08
    358a:	89 85       	ldd	r24, Y+9	; 0x09
    358c:	9a 85       	ldd	r25, Y+10	; 0x0a
    358e:	20 e0       	ldi	r18, 0x00	; 0
    3590:	30 e0       	ldi	r19, 0x00	; 0
    3592:	40 e8       	ldi	r20, 0x80	; 128
    3594:	5f e3       	ldi	r21, 0x3F	; 63
    3596:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    359a:	88 23       	and	r24, r24
    359c:	2c f4       	brge	.+10     	; 0x35a8 <US_voidGetDistance+0x3ec>
		__ticks = 1;
    359e:	81 e0       	ldi	r24, 0x01	; 1
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	9e 83       	std	Y+6, r25	; 0x06
    35a4:	8d 83       	std	Y+5, r24	; 0x05
    35a6:	3f c0       	rjmp	.+126    	; 0x3626 <US_voidGetDistance+0x46a>
	else if (__tmp > 65535)
    35a8:	6f 81       	ldd	r22, Y+7	; 0x07
    35aa:	78 85       	ldd	r23, Y+8	; 0x08
    35ac:	89 85       	ldd	r24, Y+9	; 0x09
    35ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    35b0:	20 e0       	ldi	r18, 0x00	; 0
    35b2:	3f ef       	ldi	r19, 0xFF	; 255
    35b4:	4f e7       	ldi	r20, 0x7F	; 127
    35b6:	57 e4       	ldi	r21, 0x47	; 71
    35b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    35bc:	18 16       	cp	r1, r24
    35be:	4c f5       	brge	.+82     	; 0x3612 <US_voidGetDistance+0x456>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c8:	20 e0       	ldi	r18, 0x00	; 0
    35ca:	30 e0       	ldi	r19, 0x00	; 0
    35cc:	40 e2       	ldi	r20, 0x20	; 32
    35ce:	51 e4       	ldi	r21, 0x41	; 65
    35d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d4:	dc 01       	movw	r26, r24
    35d6:	cb 01       	movw	r24, r22
    35d8:	bc 01       	movw	r22, r24
    35da:	cd 01       	movw	r24, r26
    35dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35e0:	dc 01       	movw	r26, r24
    35e2:	cb 01       	movw	r24, r22
    35e4:	9e 83       	std	Y+6, r25	; 0x06
    35e6:	8d 83       	std	Y+5, r24	; 0x05
    35e8:	0f c0       	rjmp	.+30     	; 0x3608 <US_voidGetDistance+0x44c>
    35ea:	88 ec       	ldi	r24, 0xC8	; 200
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	9c 83       	std	Y+4, r25	; 0x04
    35f0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    35f2:	8b 81       	ldd	r24, Y+3	; 0x03
    35f4:	9c 81       	ldd	r25, Y+4	; 0x04
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <US_voidGetDistance+0x43a>
    35fa:	9c 83       	std	Y+4, r25	; 0x04
    35fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35fe:	8d 81       	ldd	r24, Y+5	; 0x05
    3600:	9e 81       	ldd	r25, Y+6	; 0x06
    3602:	01 97       	sbiw	r24, 0x01	; 1
    3604:	9e 83       	std	Y+6, r25	; 0x06
    3606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3608:	8d 81       	ldd	r24, Y+5	; 0x05
    360a:	9e 81       	ldd	r25, Y+6	; 0x06
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	69 f7       	brne	.-38     	; 0x35ea <US_voidGetDistance+0x42e>
    3610:	14 c0       	rjmp	.+40     	; 0x363a <US_voidGetDistance+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3612:	6f 81       	ldd	r22, Y+7	; 0x07
    3614:	78 85       	ldd	r23, Y+8	; 0x08
    3616:	89 85       	ldd	r24, Y+9	; 0x09
    3618:	9a 85       	ldd	r25, Y+10	; 0x0a
    361a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361e:	dc 01       	movw	r26, r24
    3620:	cb 01       	movw	r24, r22
    3622:	9e 83       	std	Y+6, r25	; 0x06
    3624:	8d 83       	std	Y+5, r24	; 0x05
    3626:	8d 81       	ldd	r24, Y+5	; 0x05
    3628:	9e 81       	ldd	r25, Y+6	; 0x06
    362a:	9a 83       	std	Y+2, r25	; 0x02
    362c:	89 83       	std	Y+1, r24	; 0x01
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	9a 81       	ldd	r25, Y+2	; 0x02
    3632:	01 97       	sbiw	r24, 0x01	; 1
    3634:	f1 f7       	brne	.-4      	; 0x3632 <US_voidGetDistance+0x476>
    3636:	9a 83       	std	Y+2, r25	; 0x02
    3638:	89 83       	std	Y+1, r24	; 0x01
 //  while(ECHO_FLAG == 0);
	_delay_ms(20);
}
    363a:	ce 5b       	subi	r28, 0xBE	; 190
    363c:	df 4f       	sbci	r29, 0xFF	; 255
    363e:	0f b6       	in	r0, 0x3f	; 63
    3640:	f8 94       	cli
    3642:	de bf       	out	0x3e, r29	; 62
    3644:	0f be       	out	0x3f, r0	; 63
    3646:	cd bf       	out	0x3d, r28	; 61
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <Display>:
f32 Global_f32ForwardDistance=0;
f32 Global_f32RightDistance=0;
f32 Global_f32LeftDistance=0;
f32 Global_f32LastForwardDistance=0;
void Display(void)
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <Display+0x6>
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidClearDisplay();
    3658:	0e 94 82 0a 	call	0x1504	; 0x1504 <CLCD_voidClearDisplay>
	switch(CaseFlag)
    365c:	80 91 a9 00 	lds	r24, 0x00A9
    3660:	28 2f       	mov	r18, r24
    3662:	30 e0       	ldi	r19, 0x00	; 0
    3664:	3a 83       	std	Y+2, r19	; 0x02
    3666:	29 83       	std	Y+1, r18	; 0x01
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	9a 81       	ldd	r25, Y+2	; 0x02
    366c:	00 97       	sbiw	r24, 0x00	; 0
    366e:	51 f0       	breq	.+20     	; 0x3684 <Display+0x36>
    3670:	29 81       	ldd	r18, Y+1	; 0x01
    3672:	3a 81       	ldd	r19, Y+2	; 0x02
    3674:	21 30       	cpi	r18, 0x01	; 1
    3676:	31 05       	cpc	r19, r1
    3678:	49 f4       	brne	.+18     	; 0x368c <Display+0x3e>
	{
	case BLUETOOTH:
	{
		CLCD_voidSendString("BLUETOOTH");
    367a:	80 e6       	ldi	r24, 0x60	; 96
    367c:	90 e0       	ldi	r25, 0x00	; 0
    367e:	0e 94 ef 09 	call	0x13de	; 0x13de <CLCD_voidSendString>
    3682:	04 c0       	rjmp	.+8      	; 0x368c <Display+0x3e>
		break;
	}
	case ULTRASONIC:
	{
		CLCD_voidSendString("ULTRASONIC");
    3684:	8a e6       	ldi	r24, 0x6A	; 106
    3686:	90 e0       	ldi	r25, 0x00	; 0
    3688:	0e 94 ef 09 	call	0x13de	; 0x13de <CLCD_voidSendString>
		break;
	}
	}
	CLCD_voidSetPosition(0,11);
    368c:	80 e0       	ldi	r24, 0x00	; 0
    368e:	6b e0       	ldi	r22, 0x0B	; 11
    3690:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSetPosition>
	CLCD_voidSendString("SP:");
    3694:	85 e7       	ldi	r24, 0x75	; 117
    3696:	90 e0       	ldi	r25, 0x00	; 0
    3698:	0e 94 ef 09 	call	0x13de	; 0x13de <CLCD_voidSendString>
	if(CaseFlag==BLUETOOTH)
    369c:	80 91 a9 00 	lds	r24, 0x00A9
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	39 f4       	brne	.+14     	; 0x36b2 <Display+0x64>
	{
		CLCD_voidSendNum(SPEEDCARRIER_B);
    36a4:	80 91 ad 00 	lds	r24, 0x00AD
    36a8:	88 2f       	mov	r24, r24
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	0e 94 0a 0b 	call	0x1614	; 0x1614 <CLCD_voidSendNum>
    36b0:	06 c0       	rjmp	.+12     	; 0x36be <Display+0x70>
	}
	else
	{
	CLCD_voidSendNum(SPEEDCARRIER);
    36b2:	80 91 ab 00 	lds	r24, 0x00AB
    36b6:	88 2f       	mov	r24, r24
    36b8:	90 e0       	ldi	r25, 0x00	; 0
    36ba:	0e 94 0a 0b 	call	0x1614	; 0x1614 <CLCD_voidSendNum>
	}
	CLCD_voidSetPosition(1,0);
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	0e 94 18 0a 	call	0x1430	; 0x1430 <CLCD_voidSetPosition>
	CLCD_voidSendString("OBS:");
    36c6:	89 e7       	ldi	r24, 0x79	; 121
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 ef 09 	call	0x13de	; 0x13de <CLCD_voidSendString>
	CLCD_voidSendNum(OBSTECLSNUM);
    36ce:	80 91 ac 00 	lds	r24, 0x00AC
    36d2:	88 2f       	mov	r24, r24
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 0a 0b 	call	0x1614	; 0x1614 <CLCD_voidSendNum>
}
    36da:	0f 90       	pop	r0
    36dc:	0f 90       	pop	r0
    36de:	cf 91       	pop	r28
    36e0:	df 91       	pop	r29
    36e2:	08 95       	ret

000036e4 <Forward>:
void Forward(void)
{
    36e4:	df 93       	push	r29
    36e6:	cf 93       	push	r28
    36e8:	cd b7       	in	r28, 0x3d	; 61
    36ea:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    36ec:	84 e0       	ldi	r24, 0x04	; 4
    36ee:	67 e0       	ldi	r22, 0x07	; 7
    36f0:	40 e0       	ldi	r20, 0x00	; 0
    36f2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    36f6:	84 e0       	ldi	r24, 0x04	; 4
    36f8:	66 e0       	ldi	r22, 0x06	; 6
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    36fc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    3700:	84 e0       	ldi	r24, 0x04	; 4
    3702:	64 e0       	ldi	r22, 0x04	; 4
    3704:	40 e0       	ldi	r20, 0x00	; 0
    3706:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    370a:	83 e0       	ldi	r24, 0x03	; 3
    370c:	63 e0       	ldi	r22, 0x03	; 3
    370e:	40 e0       	ldi	r20, 0x00	; 0
    3710:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    3714:	83 e0       	ldi	r24, 0x03	; 3
    3716:	64 e0       	ldi	r22, 0x04	; 4
    3718:	40 e0       	ldi	r20, 0x00	; 0
    371a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	ANALOG_voidSendSignal(PORT_u8B,PIN_7,10);
    371e:	82 e0       	ldi	r24, 0x02	; 2
    3720:	67 e0       	ldi	r22, 0x07	; 7
    3722:	4a e0       	ldi	r20, 0x0A	; 10
    3724:	0e 94 a8 06 	call	0xd50	; 0xd50 <ANALOG_voidSendSignal>
	SPEEDCARRIER=10;
    3728:	8a e0       	ldi	r24, 0x0A	; 10
    372a:	80 93 ab 00 	sts	0x00AB, r24
	EEPROM_voidWriteDataByte(DEVICE1,10,SPEEDCARRIER);
    372e:	90 91 ab 00 	lds	r25, 0x00AB
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	6a e0       	ldi	r22, 0x0A	; 10
    3736:	70 e0       	ldi	r23, 0x00	; 0
    3738:	49 2f       	mov	r20, r25
    373a:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
	ForwardFlag = 1;
    373e:	81 e0       	ldi	r24, 0x01	; 1
    3740:	80 93 a8 00 	sts	0x00A8, r24
	Display();
    3744:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_HIGH);
    3748:	84 e0       	ldi	r24, 0x04	; 4
    374a:	67 e0       	ldi	r22, 0x07	; 7
    374c:	41 e0       	ldi	r20, 0x01	; 1
    374e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
    3752:	82 e0       	ldi	r24, 0x02	; 2
    3754:	63 e0       	ldi	r22, 0x03	; 3
    3756:	41 e0       	ldi	r20, 0x01	; 1
    3758:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    375c:	82 e0       	ldi	r24, 0x02	; 2
    375e:	64 e0       	ldi	r22, 0x04	; 4
    3760:	40 e0       	ldi	r20, 0x00	; 0
    3762:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
    3766:	82 e0       	ldi	r24, 0x02	; 2
    3768:	65 e0       	ldi	r22, 0x05	; 5
    376a:	41 e0       	ldi	r20, 0x01	; 1
    376c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    3770:	82 e0       	ldi	r24, 0x02	; 2
    3772:	66 e0       	ldi	r22, 0x06	; 6
    3774:	40 e0       	ldi	r20, 0x00	; 0
    3776:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>

}
    377a:	cf 91       	pop	r28
    377c:	df 91       	pop	r29
    377e:	08 95       	ret

00003780 <Forward_BLUE>:
void Forward_BLUE(void)
{
    3780:	df 93       	push	r29
    3782:	cf 93       	push	r28
    3784:	cd b7       	in	r28, 0x3d	; 61
    3786:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    3788:	84 e0       	ldi	r24, 0x04	; 4
    378a:	67 e0       	ldi	r22, 0x07	; 7
    378c:	40 e0       	ldi	r20, 0x00	; 0
    378e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    3792:	84 e0       	ldi	r24, 0x04	; 4
    3794:	66 e0       	ldi	r22, 0x06	; 6
    3796:	40 e0       	ldi	r20, 0x00	; 0
    3798:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    379c:	84 e0       	ldi	r24, 0x04	; 4
    379e:	64 e0       	ldi	r22, 0x04	; 4
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	63 e0       	ldi	r22, 0x03	; 3
    37aa:	40 e0       	ldi	r20, 0x00	; 0
    37ac:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    37b0:	83 e0       	ldi	r24, 0x03	; 3
    37b2:	64 e0       	ldi	r22, 0x04	; 4
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_HIGH);
    37ba:	84 e0       	ldi	r24, 0x04	; 4
    37bc:	67 e0       	ldi	r22, 0x07	; 7
    37be:	41 e0       	ldi	r20, 0x01	; 1
    37c0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
    37c4:	82 e0       	ldi	r24, 0x02	; 2
    37c6:	63 e0       	ldi	r22, 0x03	; 3
    37c8:	41 e0       	ldi	r20, 0x01	; 1
    37ca:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	64 e0       	ldi	r22, 0x04	; 4
    37d2:	40 e0       	ldi	r20, 0x00	; 0
    37d4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
    37d8:	82 e0       	ldi	r24, 0x02	; 2
    37da:	65 e0       	ldi	r22, 0x05	; 5
    37dc:	41 e0       	ldi	r20, 0x01	; 1
    37de:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    37e2:	82 e0       	ldi	r24, 0x02	; 2
    37e4:	66 e0       	ldi	r22, 0x06	; 6
    37e6:	40 e0       	ldi	r20, 0x00	; 0
    37e8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
}
    37ec:	cf 91       	pop	r28
    37ee:	df 91       	pop	r29
    37f0:	08 95       	ret

000037f2 <Stop>:
void Stop(void)
{
    37f2:	df 93       	push	r29
    37f4:	cf 93       	push	r28
    37f6:	cd b7       	in	r28, 0x3d	; 61
    37f8:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    37fa:	82 e0       	ldi	r24, 0x02	; 2
    37fc:	63 e0       	ldi	r22, 0x03	; 3
    37fe:	40 e0       	ldi	r20, 0x00	; 0
    3800:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	64 e0       	ldi	r22, 0x04	; 4
    3808:	40 e0       	ldi	r20, 0x00	; 0
    380a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    380e:	82 e0       	ldi	r24, 0x02	; 2
    3810:	65 e0       	ldi	r22, 0x05	; 5
    3812:	40 e0       	ldi	r20, 0x00	; 0
    3814:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    3818:	82 e0       	ldi	r24, 0x02	; 2
    381a:	66 e0       	ldi	r22, 0x06	; 6
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	//ForwardFlag=0;
	ForwardFlag=0;
    3822:	10 92 a8 00 	sts	0x00A8, r1
	SPEEDCARRIER=0;
    3826:	10 92 ab 00 	sts	0x00AB, r1
	EEPROM_voidWriteDataByte(DEVICE1,20,SPEEDCARRIER);
    382a:	90 91 ab 00 	lds	r25, 0x00AB
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	64 e1       	ldi	r22, 0x14	; 20
    3832:	70 e0       	ldi	r23, 0x00	; 0
    3834:	49 2f       	mov	r20, r25
    3836:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
	Display();
    383a:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    383e:	84 e0       	ldi	r24, 0x04	; 4
    3840:	67 e0       	ldi	r22, 0x07	; 7
    3842:	40 e0       	ldi	r20, 0x00	; 0
    3844:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    3848:	84 e0       	ldi	r24, 0x04	; 4
    384a:	66 e0       	ldi	r22, 0x06	; 6
    384c:	40 e0       	ldi	r20, 0x00	; 0
    384e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    3852:	84 e0       	ldi	r24, 0x04	; 4
    3854:	64 e0       	ldi	r22, 0x04	; 4
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	63 e0       	ldi	r22, 0x03	; 3
    3860:	40 e0       	ldi	r20, 0x00	; 0
    3862:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    3866:	83 e0       	ldi	r24, 0x03	; 3
    3868:	64 e0       	ldi	r22, 0x04	; 4
    386a:	40 e0       	ldi	r20, 0x00	; 0
    386c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>

}
    3870:	cf 91       	pop	r28
    3872:	df 91       	pop	r29
    3874:	08 95       	ret

00003876 <Stop_BLUE>:
void Stop_BLUE(void)
{
    3876:	df 93       	push	r29
    3878:	cf 93       	push	r28
    387a:	cd b7       	in	r28, 0x3d	; 61
    387c:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    387e:	82 e0       	ldi	r24, 0x02	; 2
    3880:	63 e0       	ldi	r22, 0x03	; 3
    3882:	40 e0       	ldi	r20, 0x00	; 0
    3884:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    3888:	82 e0       	ldi	r24, 0x02	; 2
    388a:	64 e0       	ldi	r22, 0x04	; 4
    388c:	40 e0       	ldi	r20, 0x00	; 0
    388e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    3892:	82 e0       	ldi	r24, 0x02	; 2
    3894:	65 e0       	ldi	r22, 0x05	; 5
    3896:	40 e0       	ldi	r20, 0x00	; 0
    3898:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    389c:	82 e0       	ldi	r24, 0x02	; 2
    389e:	66 e0       	ldi	r22, 0x06	; 6
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    38a6:	84 e0       	ldi	r24, 0x04	; 4
    38a8:	67 e0       	ldi	r22, 0x07	; 7
    38aa:	40 e0       	ldi	r20, 0x00	; 0
    38ac:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    38b0:	84 e0       	ldi	r24, 0x04	; 4
    38b2:	66 e0       	ldi	r22, 0x06	; 6
    38b4:	40 e0       	ldi	r20, 0x00	; 0
    38b6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    38ba:	84 e0       	ldi	r24, 0x04	; 4
    38bc:	64 e0       	ldi	r22, 0x04	; 4
    38be:	40 e0       	ldi	r20, 0x00	; 0
    38c0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    38c4:	83 e0       	ldi	r24, 0x03	; 3
    38c6:	63 e0       	ldi	r22, 0x03	; 3
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    38ce:	83 e0       	ldi	r24, 0x03	; 3
    38d0:	64 e0       	ldi	r22, 0x04	; 4
    38d2:	40 e0       	ldi	r20, 0x00	; 0
    38d4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>

}
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <Back>:
void Back(void)
{
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    38e6:	84 e0       	ldi	r24, 0x04	; 4
    38e8:	67 e0       	ldi	r22, 0x07	; 7
    38ea:	40 e0       	ldi	r20, 0x00	; 0
    38ec:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    38f0:	84 e0       	ldi	r24, 0x04	; 4
    38f2:	66 e0       	ldi	r22, 0x06	; 6
    38f4:	40 e0       	ldi	r20, 0x00	; 0
    38f6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    38fa:	84 e0       	ldi	r24, 0x04	; 4
    38fc:	64 e0       	ldi	r22, 0x04	; 4
    38fe:	40 e0       	ldi	r20, 0x00	; 0
    3900:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    3904:	83 e0       	ldi	r24, 0x03	; 3
    3906:	63 e0       	ldi	r22, 0x03	; 3
    3908:	40 e0       	ldi	r20, 0x00	; 0
    390a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    390e:	83 e0       	ldi	r24, 0x03	; 3
    3910:	64 e0       	ldi	r22, 0x04	; 4
    3912:	40 e0       	ldi	r20, 0x00	; 0
    3914:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	ANALOG_voidSendSignal(PORT_u8B,PIN_7,8);
    3918:	82 e0       	ldi	r24, 0x02	; 2
    391a:	67 e0       	ldi	r22, 0x07	; 7
    391c:	48 e0       	ldi	r20, 0x08	; 8
    391e:	0e 94 a8 06 	call	0xd50	; 0xd50 <ANALOG_voidSendSignal>
	SPEEDCARRIER=8;
    3922:	88 e0       	ldi	r24, 0x08	; 8
    3924:	80 93 ab 00 	sts	0x00AB, r24
	EEPROM_voidWriteDataByte(DEVICE1,30,SPEEDCARRIER);
    3928:	90 91 ab 00 	lds	r25, 0x00AB
    392c:	80 e0       	ldi	r24, 0x00	; 0
    392e:	6e e1       	ldi	r22, 0x1E	; 30
    3930:	70 e0       	ldi	r23, 0x00	; 0
    3932:	49 2f       	mov	r20, r25
    3934:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
	Display();
    3938:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
	Global_f32LastForwardDistance=Global_f32ForwardDistance;
    393c:	80 91 ba 00 	lds	r24, 0x00BA
    3940:	90 91 bb 00 	lds	r25, 0x00BB
    3944:	a0 91 bc 00 	lds	r26, 0x00BC
    3948:	b0 91 bd 00 	lds	r27, 0x00BD
    394c:	80 93 c6 00 	sts	0x00C6, r24
    3950:	90 93 c7 00 	sts	0x00C7, r25
    3954:	a0 93 c8 00 	sts	0x00C8, r26
    3958:	b0 93 c9 00 	sts	0x00C9, r27
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_HIGH);
    395c:	83 e0       	ldi	r24, 0x03	; 3
    395e:	63 e0       	ldi	r22, 0x03	; 3
    3960:	41 e0       	ldi	r20, 0x01	; 1
    3962:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_HIGH);
    3966:	83 e0       	ldi	r24, 0x03	; 3
    3968:	64 e0       	ldi	r22, 0x04	; 4
    396a:	41 e0       	ldi	r20, 0x01	; 1
    396c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    3970:	82 e0       	ldi	r24, 0x02	; 2
    3972:	63 e0       	ldi	r22, 0x03	; 3
    3974:	40 e0       	ldi	r20, 0x00	; 0
    3976:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_HIGH);
    397a:	82 e0       	ldi	r24, 0x02	; 2
    397c:	64 e0       	ldi	r22, 0x04	; 4
    397e:	41 e0       	ldi	r20, 0x01	; 1
    3980:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    3984:	82 e0       	ldi	r24, 0x02	; 2
    3986:	65 e0       	ldi	r22, 0x05	; 5
    3988:	40 e0       	ldi	r20, 0x00	; 0
    398a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_HIGH);
    398e:	82 e0       	ldi	r24, 0x02	; 2
    3990:	66 e0       	ldi	r22, 0x06	; 6
    3992:	41 e0       	ldi	r20, 0x01	; 1
    3994:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    3998:	21 c0       	rjmp	.+66     	; 0x39dc <Back+0xfe>
	while(Global_f32ForwardDistance < Global_f32LastForwardDistance+3)
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
    399a:	2e ea       	ldi	r18, 0xAE	; 174
    399c:	30 e0       	ldi	r19, 0x00	; 0
    399e:	82 e0       	ldi	r24, 0x02	; 2
    39a0:	61 e0       	ldi	r22, 0x01	; 1
    39a2:	a9 01       	movw	r20, r18
    39a4:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
    39a8:	80 91 ae 00 	lds	r24, 0x00AE
    39ac:	90 91 af 00 	lds	r25, 0x00AF
    39b0:	a0 91 b0 00 	lds	r26, 0x00B0
    39b4:	b0 91 b1 00 	lds	r27, 0x00B1
    39b8:	bc 01       	movw	r22, r24
    39ba:	cd 01       	movw	r24, r26
    39bc:	29 e2       	ldi	r18, 0x29	; 41
    39be:	3c e5       	ldi	r19, 0x5C	; 92
    39c0:	4f e8       	ldi	r20, 0x8F	; 143
    39c2:	5c e3       	ldi	r21, 0x3C	; 60
    39c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	80 93 ba 00 	sts	0x00BA, r24
    39d0:	90 93 bb 00 	sts	0x00BB, r25
    39d4:	a0 93 bc 00 	sts	0x00BC, r26
    39d8:	b0 93 bd 00 	sts	0x00BD, r27
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_HIGH);
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_HIGH);
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_HIGH);
	while(Global_f32ForwardDistance < Global_f32LastForwardDistance+3)
    39dc:	80 91 c6 00 	lds	r24, 0x00C6
    39e0:	90 91 c7 00 	lds	r25, 0x00C7
    39e4:	a0 91 c8 00 	lds	r26, 0x00C8
    39e8:	b0 91 c9 00 	lds	r27, 0x00C9
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	20 e0       	ldi	r18, 0x00	; 0
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e4       	ldi	r20, 0x40	; 64
    39f6:	50 e4       	ldi	r21, 0x40	; 64
    39f8:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    39fc:	dc 01       	movw	r26, r24
    39fe:	cb 01       	movw	r24, r22
    3a00:	20 91 ba 00 	lds	r18, 0x00BA
    3a04:	30 91 bb 00 	lds	r19, 0x00BB
    3a08:	40 91 bc 00 	lds	r20, 0x00BC
    3a0c:	50 91 bd 00 	lds	r21, 0x00BD
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a18:	18 16       	cp	r1, r24
    3a1a:	0c f4       	brge	.+2      	; 0x3a1e <Back+0x140>
    3a1c:	be cf       	rjmp	.-132    	; 0x399a <Back+0xbc>
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
	}
}
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	08 95       	ret

00003a24 <Back_BLUE>:
void Back_BLUE(void)
{
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    3a2c:	84 e0       	ldi	r24, 0x04	; 4
    3a2e:	67 e0       	ldi	r22, 0x07	; 7
    3a30:	40 e0       	ldi	r20, 0x00	; 0
    3a32:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    3a36:	84 e0       	ldi	r24, 0x04	; 4
    3a38:	66 e0       	ldi	r22, 0x06	; 6
    3a3a:	40 e0       	ldi	r20, 0x00	; 0
    3a3c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    3a40:	84 e0       	ldi	r24, 0x04	; 4
    3a42:	64 e0       	ldi	r22, 0x04	; 4
    3a44:	40 e0       	ldi	r20, 0x00	; 0
    3a46:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    3a4a:	83 e0       	ldi	r24, 0x03	; 3
    3a4c:	63 e0       	ldi	r22, 0x03	; 3
    3a4e:	40 e0       	ldi	r20, 0x00	; 0
    3a50:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    3a54:	83 e0       	ldi	r24, 0x03	; 3
    3a56:	64 e0       	ldi	r22, 0x04	; 4
    3a58:	40 e0       	ldi	r20, 0x00	; 0
    3a5a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_HIGH);
    3a5e:	83 e0       	ldi	r24, 0x03	; 3
    3a60:	63 e0       	ldi	r22, 0x03	; 3
    3a62:	41 e0       	ldi	r20, 0x01	; 1
    3a64:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_HIGH);
    3a68:	83 e0       	ldi	r24, 0x03	; 3
    3a6a:	64 e0       	ldi	r22, 0x04	; 4
    3a6c:	41 e0       	ldi	r20, 0x01	; 1
    3a6e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>

	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    3a72:	82 e0       	ldi	r24, 0x02	; 2
    3a74:	63 e0       	ldi	r22, 0x03	; 3
    3a76:	40 e0       	ldi	r20, 0x00	; 0
    3a78:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_HIGH);
    3a7c:	82 e0       	ldi	r24, 0x02	; 2
    3a7e:	64 e0       	ldi	r22, 0x04	; 4
    3a80:	41 e0       	ldi	r20, 0x01	; 1
    3a82:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    3a86:	82 e0       	ldi	r24, 0x02	; 2
    3a88:	65 e0       	ldi	r22, 0x05	; 5
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_HIGH);
    3a90:	82 e0       	ldi	r24, 0x02	; 2
    3a92:	66 e0       	ldi	r22, 0x06	; 6
    3a94:	41 e0       	ldi	r20, 0x01	; 1
    3a96:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
}
    3a9a:	cf 91       	pop	r28
    3a9c:	df 91       	pop	r29
    3a9e:	08 95       	ret

00003aa0 <Right>:
void Right(void)
{
    3aa0:	df 93       	push	r29
    3aa2:	cf 93       	push	r28
    3aa4:	cd b7       	in	r28, 0x3d	; 61
    3aa6:	de b7       	in	r29, 0x3e	; 62
    3aa8:	2e 97       	sbiw	r28, 0x0e	; 14
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	f8 94       	cli
    3aae:	de bf       	out	0x3e, r29	; 62
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    3ab4:	84 e0       	ldi	r24, 0x04	; 4
    3ab6:	67 e0       	ldi	r22, 0x07	; 7
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    3abe:	84 e0       	ldi	r24, 0x04	; 4
    3ac0:	66 e0       	ldi	r22, 0x06	; 6
    3ac2:	40 e0       	ldi	r20, 0x00	; 0
    3ac4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    3ac8:	84 e0       	ldi	r24, 0x04	; 4
    3aca:	64 e0       	ldi	r22, 0x04	; 4
    3acc:	40 e0       	ldi	r20, 0x00	; 0
    3ace:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    3ad2:	83 e0       	ldi	r24, 0x03	; 3
    3ad4:	63 e0       	ldi	r22, 0x03	; 3
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    3adc:	83 e0       	ldi	r24, 0x03	; 3
    3ade:	64 e0       	ldi	r22, 0x04	; 4
    3ae0:	40 e0       	ldi	r20, 0x00	; 0
    3ae2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_HIGH);
    3ae6:	84 e0       	ldi	r24, 0x04	; 4
    3ae8:	66 e0       	ldi	r22, 0x06	; 6
    3aea:	41 e0       	ldi	r20, 0x01	; 1
    3aec:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	ANALOG_voidSendSignal(PORT_u8B,PIN_7,7);
    3af0:	82 e0       	ldi	r24, 0x02	; 2
    3af2:	67 e0       	ldi	r22, 0x07	; 7
    3af4:	47 e0       	ldi	r20, 0x07	; 7
    3af6:	0e 94 a8 06 	call	0xd50	; 0xd50 <ANALOG_voidSendSignal>
	SPEEDCARRIER=7;
    3afa:	87 e0       	ldi	r24, 0x07	; 7
    3afc:	80 93 ab 00 	sts	0x00AB, r24
	EEPROM_voidWriteDataByte(DEVICE1,40,SPEEDCARRIER);
    3b00:	90 91 ab 00 	lds	r25, 0x00AB
    3b04:	80 e0       	ldi	r24, 0x00	; 0
    3b06:	68 e2       	ldi	r22, 0x28	; 40
    3b08:	70 e0       	ldi	r23, 0x00	; 0
    3b0a:	49 2f       	mov	r20, r25
    3b0c:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
	Display();
    3b10:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
    3b14:	82 e0       	ldi	r24, 0x02	; 2
    3b16:	63 e0       	ldi	r22, 0x03	; 3
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    3b1e:	82 e0       	ldi	r24, 0x02	; 2
    3b20:	64 e0       	ldi	r22, 0x04	; 4
    3b22:	40 e0       	ldi	r20, 0x00	; 0
    3b24:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    3b28:	82 e0       	ldi	r24, 0x02	; 2
    3b2a:	65 e0       	ldi	r22, 0x05	; 5
    3b2c:	40 e0       	ldi	r20, 0x00	; 0
    3b2e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    3b32:	82 e0       	ldi	r24, 0x02	; 2
    3b34:	66 e0       	ldi	r22, 0x06	; 6
    3b36:	40 e0       	ldi	r20, 0x00	; 0
    3b38:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    3b3c:	21 c0       	rjmp	.+66     	; 0x3b80 <Right+0xe0>

	while(Global_f32ForwardDistance < 10 )
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
    3b3e:	2e ea       	ldi	r18, 0xAE	; 174
    3b40:	30 e0       	ldi	r19, 0x00	; 0
    3b42:	82 e0       	ldi	r24, 0x02	; 2
    3b44:	61 e0       	ldi	r22, 0x01	; 1
    3b46:	a9 01       	movw	r20, r18
    3b48:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
    3b4c:	80 91 ae 00 	lds	r24, 0x00AE
    3b50:	90 91 af 00 	lds	r25, 0x00AF
    3b54:	a0 91 b0 00 	lds	r26, 0x00B0
    3b58:	b0 91 b1 00 	lds	r27, 0x00B1
    3b5c:	bc 01       	movw	r22, r24
    3b5e:	cd 01       	movw	r24, r26
    3b60:	29 e2       	ldi	r18, 0x29	; 41
    3b62:	3c e5       	ldi	r19, 0x5C	; 92
    3b64:	4f e8       	ldi	r20, 0x8F	; 143
    3b66:	5c e3       	ldi	r21, 0x3C	; 60
    3b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6c:	dc 01       	movw	r26, r24
    3b6e:	cb 01       	movw	r24, r22
    3b70:	80 93 ba 00 	sts	0x00BA, r24
    3b74:	90 93 bb 00 	sts	0x00BB, r25
    3b78:	a0 93 bc 00 	sts	0x00BC, r26
    3b7c:	b0 93 bd 00 	sts	0x00BD, r27
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);

	while(Global_f32ForwardDistance < 10 )
    3b80:	80 91 ba 00 	lds	r24, 0x00BA
    3b84:	90 91 bb 00 	lds	r25, 0x00BB
    3b88:	a0 91 bc 00 	lds	r26, 0x00BC
    3b8c:	b0 91 bd 00 	lds	r27, 0x00BD
    3b90:	bc 01       	movw	r22, r24
    3b92:	cd 01       	movw	r24, r26
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	30 e0       	ldi	r19, 0x00	; 0
    3b98:	40 e2       	ldi	r20, 0x20	; 32
    3b9a:	51 e4       	ldi	r21, 0x41	; 65
    3b9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba0:	88 23       	and	r24, r24
    3ba2:	6c f2       	brlt	.-102    	; 0x3b3e <Right+0x9e>
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
	}
	Stop();
    3ba4:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <Stop>
	SERVO_voidMoveToAngle(135);
    3ba8:	87 e8       	ldi	r24, 0x87	; 135
    3baa:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
    3bae:	80 e0       	ldi	r24, 0x00	; 0
    3bb0:	90 e0       	ldi	r25, 0x00	; 0
    3bb2:	aa ef       	ldi	r26, 0xFA	; 250
    3bb4:	b3 e4       	ldi	r27, 0x43	; 67
    3bb6:	8b 87       	std	Y+11, r24	; 0x0b
    3bb8:	9c 87       	std	Y+12, r25	; 0x0c
    3bba:	ad 87       	std	Y+13, r26	; 0x0d
    3bbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3bbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bc6:	20 e0       	ldi	r18, 0x00	; 0
    3bc8:	30 e0       	ldi	r19, 0x00	; 0
    3bca:	4a ef       	ldi	r20, 0xFA	; 250
    3bcc:	54 e4       	ldi	r21, 0x44	; 68
    3bce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd2:	dc 01       	movw	r26, r24
    3bd4:	cb 01       	movw	r24, r22
    3bd6:	8f 83       	std	Y+7, r24	; 0x07
    3bd8:	98 87       	std	Y+8, r25	; 0x08
    3bda:	a9 87       	std	Y+9, r26	; 0x09
    3bdc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3bde:	6f 81       	ldd	r22, Y+7	; 0x07
    3be0:	78 85       	ldd	r23, Y+8	; 0x08
    3be2:	89 85       	ldd	r24, Y+9	; 0x09
    3be4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3be6:	20 e0       	ldi	r18, 0x00	; 0
    3be8:	30 e0       	ldi	r19, 0x00	; 0
    3bea:	40 e8       	ldi	r20, 0x80	; 128
    3bec:	5f e3       	ldi	r21, 0x3F	; 63
    3bee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3bf2:	88 23       	and	r24, r24
    3bf4:	2c f4       	brge	.+10     	; 0x3c00 <Right+0x160>
		__ticks = 1;
    3bf6:	81 e0       	ldi	r24, 0x01	; 1
    3bf8:	90 e0       	ldi	r25, 0x00	; 0
    3bfa:	9e 83       	std	Y+6, r25	; 0x06
    3bfc:	8d 83       	std	Y+5, r24	; 0x05
    3bfe:	3f c0       	rjmp	.+126    	; 0x3c7e <Right+0x1de>
	else if (__tmp > 65535)
    3c00:	6f 81       	ldd	r22, Y+7	; 0x07
    3c02:	78 85       	ldd	r23, Y+8	; 0x08
    3c04:	89 85       	ldd	r24, Y+9	; 0x09
    3c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c08:	20 e0       	ldi	r18, 0x00	; 0
    3c0a:	3f ef       	ldi	r19, 0xFF	; 255
    3c0c:	4f e7       	ldi	r20, 0x7F	; 127
    3c0e:	57 e4       	ldi	r21, 0x47	; 71
    3c10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c14:	18 16       	cp	r1, r24
    3c16:	4c f5       	brge	.+82     	; 0x3c6a <Right+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c20:	20 e0       	ldi	r18, 0x00	; 0
    3c22:	30 e0       	ldi	r19, 0x00	; 0
    3c24:	40 e2       	ldi	r20, 0x20	; 32
    3c26:	51 e4       	ldi	r21, 0x41	; 65
    3c28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	bc 01       	movw	r22, r24
    3c32:	cd 01       	movw	r24, r26
    3c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c38:	dc 01       	movw	r26, r24
    3c3a:	cb 01       	movw	r24, r22
    3c3c:	9e 83       	std	Y+6, r25	; 0x06
    3c3e:	8d 83       	std	Y+5, r24	; 0x05
    3c40:	0f c0       	rjmp	.+30     	; 0x3c60 <Right+0x1c0>
    3c42:	88 ec       	ldi	r24, 0xC8	; 200
    3c44:	90 e0       	ldi	r25, 0x00	; 0
    3c46:	9c 83       	std	Y+4, r25	; 0x04
    3c48:	8b 83       	std	Y+3, r24	; 0x03
    3c4a:	8b 81       	ldd	r24, Y+3	; 0x03
    3c4c:	9c 81       	ldd	r25, Y+4	; 0x04
    3c4e:	01 97       	sbiw	r24, 0x01	; 1
    3c50:	f1 f7       	brne	.-4      	; 0x3c4e <Right+0x1ae>
    3c52:	9c 83       	std	Y+4, r25	; 0x04
    3c54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c56:	8d 81       	ldd	r24, Y+5	; 0x05
    3c58:	9e 81       	ldd	r25, Y+6	; 0x06
    3c5a:	01 97       	sbiw	r24, 0x01	; 1
    3c5c:	9e 83       	std	Y+6, r25	; 0x06
    3c5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c60:	8d 81       	ldd	r24, Y+5	; 0x05
    3c62:	9e 81       	ldd	r25, Y+6	; 0x06
    3c64:	00 97       	sbiw	r24, 0x00	; 0
    3c66:	69 f7       	brne	.-38     	; 0x3c42 <Right+0x1a2>
    3c68:	14 c0       	rjmp	.+40     	; 0x3c92 <Right+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c6c:	78 85       	ldd	r23, Y+8	; 0x08
    3c6e:	89 85       	ldd	r24, Y+9	; 0x09
    3c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c76:	dc 01       	movw	r26, r24
    3c78:	cb 01       	movw	r24, r22
    3c7a:	9e 83       	std	Y+6, r25	; 0x06
    3c7c:	8d 83       	std	Y+5, r24	; 0x05
    3c7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c80:	9e 81       	ldd	r25, Y+6	; 0x06
    3c82:	9a 83       	std	Y+2, r25	; 0x02
    3c84:	89 83       	std	Y+1, r24	; 0x01
    3c86:	89 81       	ldd	r24, Y+1	; 0x01
    3c88:	9a 81       	ldd	r25, Y+2	; 0x02
    3c8a:	01 97       	sbiw	r24, 0x01	; 1
    3c8c:	f1 f7       	brne	.-4      	; 0x3c8a <Right+0x1ea>
    3c8e:	9a 83       	std	Y+2, r25	; 0x02
    3c90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64RightTime);
    3c92:	22 eb       	ldi	r18, 0xB2	; 178
    3c94:	30 e0       	ldi	r19, 0x00	; 0
    3c96:	82 e0       	ldi	r24, 0x02	; 2
    3c98:	61 e0       	ldi	r22, 0x01	; 1
    3c9a:	a9 01       	movw	r20, r18
    3c9c:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
	Global_f32RightDistance=0.0175*Global_f64RightTime;
    3ca0:	80 91 b2 00 	lds	r24, 0x00B2
    3ca4:	90 91 b3 00 	lds	r25, 0x00B3
    3ca8:	a0 91 b4 00 	lds	r26, 0x00B4
    3cac:	b0 91 b5 00 	lds	r27, 0x00B5
    3cb0:	bc 01       	movw	r22, r24
    3cb2:	cd 01       	movw	r24, r26
    3cb4:	29 e2       	ldi	r18, 0x29	; 41
    3cb6:	3c e5       	ldi	r19, 0x5C	; 92
    3cb8:	4f e8       	ldi	r20, 0x8F	; 143
    3cba:	5c e3       	ldi	r21, 0x3C	; 60
    3cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cc0:	dc 01       	movw	r26, r24
    3cc2:	cb 01       	movw	r24, r22
    3cc4:	80 93 be 00 	sts	0x00BE, r24
    3cc8:	90 93 bf 00 	sts	0x00BF, r25
    3ccc:	a0 93 c0 00 	sts	0x00C0, r26
    3cd0:	b0 93 c1 00 	sts	0x00C1, r27
	if (Global_f32RightDistance < 10)
    3cd4:	80 91 be 00 	lds	r24, 0x00BE
    3cd8:	90 91 bf 00 	lds	r25, 0x00BF
    3cdc:	a0 91 c0 00 	lds	r26, 0x00C0
    3ce0:	b0 91 c1 00 	lds	r27, 0x00C1
    3ce4:	bc 01       	movw	r22, r24
    3ce6:	cd 01       	movw	r24, r26
    3ce8:	20 e0       	ldi	r18, 0x00	; 0
    3cea:	30 e0       	ldi	r19, 0x00	; 0
    3cec:	40 e2       	ldi	r20, 0x20	; 32
    3cee:	51 e4       	ldi	r21, 0x41	; 65
    3cf0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3cf4:	88 23       	and	r24, r24
    3cf6:	0c f0       	brlt	.+2      	; 0x3cfa <Right+0x25a>
    3cf8:	4f c0       	rjmp	.+158    	; 0x3d98 <Right+0x2f8>
	{
		Display();
    3cfa:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
		DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_HIGH);
    3cfe:	84 e0       	ldi	r24, 0x04	; 4
    3d00:	66 e0       	ldi	r22, 0x06	; 6
    3d02:	41 e0       	ldi	r20, 0x01	; 1
    3d04:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
    3d08:	82 e0       	ldi	r24, 0x02	; 2
    3d0a:	63 e0       	ldi	r22, 0x03	; 3
    3d0c:	41 e0       	ldi	r20, 0x01	; 1
    3d0e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    3d12:	82 e0       	ldi	r24, 0x02	; 2
    3d14:	64 e0       	ldi	r22, 0x04	; 4
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    3d1c:	82 e0       	ldi	r24, 0x02	; 2
    3d1e:	65 e0       	ldi	r22, 0x05	; 5
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    3d26:	82 e0       	ldi	r24, 0x02	; 2
    3d28:	66 e0       	ldi	r22, 0x06	; 6
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    3d30:	21 c0       	rjmp	.+66     	; 0x3d74 <Right+0x2d4>
		while(Global_f32RightDistance < 10 )
		{
			US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64RightTime);
    3d32:	22 eb       	ldi	r18, 0xB2	; 178
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	82 e0       	ldi	r24, 0x02	; 2
    3d38:	61 e0       	ldi	r22, 0x01	; 1
    3d3a:	a9 01       	movw	r20, r18
    3d3c:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
			Global_f32RightDistance=0.0175*Global_f64RightTime;
    3d40:	80 91 b2 00 	lds	r24, 0x00B2
    3d44:	90 91 b3 00 	lds	r25, 0x00B3
    3d48:	a0 91 b4 00 	lds	r26, 0x00B4
    3d4c:	b0 91 b5 00 	lds	r27, 0x00B5
    3d50:	bc 01       	movw	r22, r24
    3d52:	cd 01       	movw	r24, r26
    3d54:	29 e2       	ldi	r18, 0x29	; 41
    3d56:	3c e5       	ldi	r19, 0x5C	; 92
    3d58:	4f e8       	ldi	r20, 0x8F	; 143
    3d5a:	5c e3       	ldi	r21, 0x3C	; 60
    3d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d60:	dc 01       	movw	r26, r24
    3d62:	cb 01       	movw	r24, r22
    3d64:	80 93 be 00 	sts	0x00BE, r24
    3d68:	90 93 bf 00 	sts	0x00BF, r25
    3d6c:	a0 93 c0 00 	sts	0x00C0, r26
    3d70:	b0 93 c1 00 	sts	0x00C1, r27
		DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_HIGH);
		DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
		DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
		DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
		DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
		while(Global_f32RightDistance < 10 )
    3d74:	80 91 be 00 	lds	r24, 0x00BE
    3d78:	90 91 bf 00 	lds	r25, 0x00BF
    3d7c:	a0 91 c0 00 	lds	r26, 0x00C0
    3d80:	b0 91 c1 00 	lds	r27, 0x00C1
    3d84:	bc 01       	movw	r22, r24
    3d86:	cd 01       	movw	r24, r26
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	30 e0       	ldi	r19, 0x00	; 0
    3d8c:	40 e2       	ldi	r20, 0x20	; 32
    3d8e:	51 e4       	ldi	r21, 0x41	; 65
    3d90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3d94:	88 23       	and	r24, r24
    3d96:	6c f2       	brlt	.-102    	; 0x3d32 <Right+0x292>
		{
			US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64RightTime);
			Global_f32RightDistance=0.0175*Global_f64RightTime;
		}
	}
	SERVO_voidMoveToAngle(90);
    3d98:	8a e5       	ldi	r24, 0x5A	; 90
    3d9a:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
}
    3d9e:	2e 96       	adiw	r28, 0x0e	; 14
    3da0:	0f b6       	in	r0, 0x3f	; 63
    3da2:	f8 94       	cli
    3da4:	de bf       	out	0x3e, r29	; 62
    3da6:	0f be       	out	0x3f, r0	; 63
    3da8:	cd bf       	out	0x3d, r28	; 61
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	08 95       	ret

00003db0 <Right_BLUE>:
void Right_BLUE(void)
{
    3db0:	df 93       	push	r29
    3db2:	cf 93       	push	r28
    3db4:	cd b7       	in	r28, 0x3d	; 61
    3db6:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    3db8:	84 e0       	ldi	r24, 0x04	; 4
    3dba:	67 e0       	ldi	r22, 0x07	; 7
    3dbc:	40 e0       	ldi	r20, 0x00	; 0
    3dbe:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    3dc2:	84 e0       	ldi	r24, 0x04	; 4
    3dc4:	66 e0       	ldi	r22, 0x06	; 6
    3dc6:	40 e0       	ldi	r20, 0x00	; 0
    3dc8:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    3dcc:	84 e0       	ldi	r24, 0x04	; 4
    3dce:	64 e0       	ldi	r22, 0x04	; 4
    3dd0:	40 e0       	ldi	r20, 0x00	; 0
    3dd2:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    3dd6:	83 e0       	ldi	r24, 0x03	; 3
    3dd8:	63 e0       	ldi	r22, 0x03	; 3
    3dda:	40 e0       	ldi	r20, 0x00	; 0
    3ddc:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    3de0:	83 e0       	ldi	r24, 0x03	; 3
    3de2:	64 e0       	ldi	r22, 0x04	; 4
    3de4:	40 e0       	ldi	r20, 0x00	; 0
    3de6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_HIGH);
    3dea:	84 e0       	ldi	r24, 0x04	; 4
    3dec:	66 e0       	ldi	r22, 0x06	; 6
    3dee:	41 e0       	ldi	r20, 0x01	; 1
    3df0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_HIGH);
    3df4:	82 e0       	ldi	r24, 0x02	; 2
    3df6:	63 e0       	ldi	r22, 0x03	; 3
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    3dfe:	82 e0       	ldi	r24, 0x02	; 2
    3e00:	64 e0       	ldi	r22, 0x04	; 4
    3e02:	40 e0       	ldi	r20, 0x00	; 0
    3e04:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    3e08:	82 e0       	ldi	r24, 0x02	; 2
    3e0a:	65 e0       	ldi	r22, 0x05	; 5
    3e0c:	40 e0       	ldi	r20, 0x00	; 0
    3e0e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    3e12:	82 e0       	ldi	r24, 0x02	; 2
    3e14:	66 e0       	ldi	r22, 0x06	; 6
    3e16:	40 e0       	ldi	r20, 0x00	; 0
    3e18:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
}
    3e1c:	cf 91       	pop	r28
    3e1e:	df 91       	pop	r29
    3e20:	08 95       	ret

00003e22 <Left>:
void Left(void)
{
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	cd b7       	in	r28, 0x3d	; 61
    3e28:	de b7       	in	r29, 0x3e	; 62
    3e2a:	2e 97       	sbiw	r28, 0x0e	; 14
    3e2c:	0f b6       	in	r0, 0x3f	; 63
    3e2e:	f8 94       	cli
    3e30:	de bf       	out	0x3e, r29	; 62
    3e32:	0f be       	out	0x3f, r0	; 63
    3e34:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    3e36:	84 e0       	ldi	r24, 0x04	; 4
    3e38:	67 e0       	ldi	r22, 0x07	; 7
    3e3a:	40 e0       	ldi	r20, 0x00	; 0
    3e3c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    3e40:	84 e0       	ldi	r24, 0x04	; 4
    3e42:	66 e0       	ldi	r22, 0x06	; 6
    3e44:	40 e0       	ldi	r20, 0x00	; 0
    3e46:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    3e4a:	84 e0       	ldi	r24, 0x04	; 4
    3e4c:	64 e0       	ldi	r22, 0x04	; 4
    3e4e:	40 e0       	ldi	r20, 0x00	; 0
    3e50:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    3e54:	83 e0       	ldi	r24, 0x03	; 3
    3e56:	63 e0       	ldi	r22, 0x03	; 3
    3e58:	40 e0       	ldi	r20, 0x00	; 0
    3e5a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    3e5e:	83 e0       	ldi	r24, 0x03	; 3
    3e60:	64 e0       	ldi	r22, 0x04	; 4
    3e62:	40 e0       	ldi	r20, 0x00	; 0
    3e64:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_HIGH);
    3e68:	84 e0       	ldi	r24, 0x04	; 4
    3e6a:	64 e0       	ldi	r22, 0x04	; 4
    3e6c:	41 e0       	ldi	r20, 0x01	; 1
    3e6e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	ANALOG_voidSendSignal(PORT_u8B,PIN_7,7);
    3e72:	82 e0       	ldi	r24, 0x02	; 2
    3e74:	67 e0       	ldi	r22, 0x07	; 7
    3e76:	47 e0       	ldi	r20, 0x07	; 7
    3e78:	0e 94 a8 06 	call	0xd50	; 0xd50 <ANALOG_voidSendSignal>
	SPEEDCARRIER=7;
    3e7c:	87 e0       	ldi	r24, 0x07	; 7
    3e7e:	80 93 ab 00 	sts	0x00AB, r24
	EEPROM_voidWriteDataByte(DEVICE1,50,SPEEDCARRIER);
    3e82:	90 91 ab 00 	lds	r25, 0x00AB
    3e86:	80 e0       	ldi	r24, 0x00	; 0
    3e88:	62 e3       	ldi	r22, 0x32	; 50
    3e8a:	70 e0       	ldi	r23, 0x00	; 0
    3e8c:	49 2f       	mov	r20, r25
    3e8e:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
	Display();
    3e92:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    3e96:	82 e0       	ldi	r24, 0x02	; 2
    3e98:	63 e0       	ldi	r22, 0x03	; 3
    3e9a:	40 e0       	ldi	r20, 0x00	; 0
    3e9c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    3ea0:	82 e0       	ldi	r24, 0x02	; 2
    3ea2:	64 e0       	ldi	r22, 0x04	; 4
    3ea4:	40 e0       	ldi	r20, 0x00	; 0
    3ea6:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
    3eaa:	82 e0       	ldi	r24, 0x02	; 2
    3eac:	65 e0       	ldi	r22, 0x05	; 5
    3eae:	41 e0       	ldi	r20, 0x01	; 1
    3eb0:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    3eb4:	82 e0       	ldi	r24, 0x02	; 2
    3eb6:	66 e0       	ldi	r22, 0x06	; 6
    3eb8:	40 e0       	ldi	r20, 0x00	; 0
    3eba:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    3ebe:	21 c0       	rjmp	.+66     	; 0x3f02 <Left+0xe0>
	while(Global_f32ForwardDistance < 10 )
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
    3ec0:	2e ea       	ldi	r18, 0xAE	; 174
    3ec2:	30 e0       	ldi	r19, 0x00	; 0
    3ec4:	82 e0       	ldi	r24, 0x02	; 2
    3ec6:	61 e0       	ldi	r22, 0x01	; 1
    3ec8:	a9 01       	movw	r20, r18
    3eca:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
    3ece:	80 91 ae 00 	lds	r24, 0x00AE
    3ed2:	90 91 af 00 	lds	r25, 0x00AF
    3ed6:	a0 91 b0 00 	lds	r26, 0x00B0
    3eda:	b0 91 b1 00 	lds	r27, 0x00B1
    3ede:	bc 01       	movw	r22, r24
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	29 e2       	ldi	r18, 0x29	; 41
    3ee4:	3c e5       	ldi	r19, 0x5C	; 92
    3ee6:	4f e8       	ldi	r20, 0x8F	; 143
    3ee8:	5c e3       	ldi	r21, 0x3C	; 60
    3eea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eee:	dc 01       	movw	r26, r24
    3ef0:	cb 01       	movw	r24, r22
    3ef2:	80 93 ba 00 	sts	0x00BA, r24
    3ef6:	90 93 bb 00 	sts	0x00BB, r25
    3efa:	a0 93 bc 00 	sts	0x00BC, r26
    3efe:	b0 93 bd 00 	sts	0x00BD, r27
	Display();
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
	while(Global_f32ForwardDistance < 10 )
    3f02:	80 91 ba 00 	lds	r24, 0x00BA
    3f06:	90 91 bb 00 	lds	r25, 0x00BB
    3f0a:	a0 91 bc 00 	lds	r26, 0x00BC
    3f0e:	b0 91 bd 00 	lds	r27, 0x00BD
    3f12:	bc 01       	movw	r22, r24
    3f14:	cd 01       	movw	r24, r26
    3f16:	20 e0       	ldi	r18, 0x00	; 0
    3f18:	30 e0       	ldi	r19, 0x00	; 0
    3f1a:	40 e2       	ldi	r20, 0x20	; 32
    3f1c:	51 e4       	ldi	r21, 0x41	; 65
    3f1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f22:	88 23       	and	r24, r24
    3f24:	6c f2       	brlt	.-102    	; 0x3ec0 <Left+0x9e>
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
	}
	Stop();
    3f26:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <Stop>
	SERVO_voidMoveToAngle(45);
    3f2a:	8d e2       	ldi	r24, 0x2D	; 45
    3f2c:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	aa ef       	ldi	r26, 0xFA	; 250
    3f36:	b3 e4       	ldi	r27, 0x43	; 67
    3f38:	8b 87       	std	Y+11, r24	; 0x0b
    3f3a:	9c 87       	std	Y+12, r25	; 0x0c
    3f3c:	ad 87       	std	Y+13, r26	; 0x0d
    3f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	4a ef       	ldi	r20, 0xFA	; 250
    3f4e:	54 e4       	ldi	r21, 0x44	; 68
    3f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	8f 83       	std	Y+7, r24	; 0x07
    3f5a:	98 87       	std	Y+8, r25	; 0x08
    3f5c:	a9 87       	std	Y+9, r26	; 0x09
    3f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f60:	6f 81       	ldd	r22, Y+7	; 0x07
    3f62:	78 85       	ldd	r23, Y+8	; 0x08
    3f64:	89 85       	ldd	r24, Y+9	; 0x09
    3f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e8       	ldi	r20, 0x80	; 128
    3f6e:	5f e3       	ldi	r21, 0x3F	; 63
    3f70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f74:	88 23       	and	r24, r24
    3f76:	2c f4       	brge	.+10     	; 0x3f82 <Left+0x160>
		__ticks = 1;
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	9e 83       	std	Y+6, r25	; 0x06
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	3f c0       	rjmp	.+126    	; 0x4000 <Left+0x1de>
	else if (__tmp > 65535)
    3f82:	6f 81       	ldd	r22, Y+7	; 0x07
    3f84:	78 85       	ldd	r23, Y+8	; 0x08
    3f86:	89 85       	ldd	r24, Y+9	; 0x09
    3f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	3f ef       	ldi	r19, 0xFF	; 255
    3f8e:	4f e7       	ldi	r20, 0x7F	; 127
    3f90:	57 e4       	ldi	r21, 0x47	; 71
    3f92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f96:	18 16       	cp	r1, r24
    3f98:	4c f5       	brge	.+82     	; 0x3fec <Left+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e2       	ldi	r20, 0x20	; 32
    3fa8:	51 e4       	ldi	r21, 0x41	; 65
    3faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	bc 01       	movw	r22, r24
    3fb4:	cd 01       	movw	r24, r26
    3fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	9e 83       	std	Y+6, r25	; 0x06
    3fc0:	8d 83       	std	Y+5, r24	; 0x05
    3fc2:	0f c0       	rjmp	.+30     	; 0x3fe2 <Left+0x1c0>
    3fc4:	88 ec       	ldi	r24, 0xC8	; 200
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	9c 83       	std	Y+4, r25	; 0x04
    3fca:	8b 83       	std	Y+3, r24	; 0x03
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	f1 f7       	brne	.-4      	; 0x3fd0 <Left+0x1ae>
    3fd4:	9c 83       	std	Y+4, r25	; 0x04
    3fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fda:	9e 81       	ldd	r25, Y+6	; 0x06
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	9e 83       	std	Y+6, r25	; 0x06
    3fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe6:	00 97       	sbiw	r24, 0x00	; 0
    3fe8:	69 f7       	brne	.-38     	; 0x3fc4 <Left+0x1a2>
    3fea:	14 c0       	rjmp	.+40     	; 0x4014 <Left+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fec:	6f 81       	ldd	r22, Y+7	; 0x07
    3fee:	78 85       	ldd	r23, Y+8	; 0x08
    3ff0:	89 85       	ldd	r24, Y+9	; 0x09
    3ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	9e 83       	std	Y+6, r25	; 0x06
    3ffe:	8d 83       	std	Y+5, r24	; 0x05
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	9a 83       	std	Y+2, r25	; 0x02
    4006:	89 83       	std	Y+1, r24	; 0x01
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	9a 81       	ldd	r25, Y+2	; 0x02
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	f1 f7       	brne	.-4      	; 0x400c <Left+0x1ea>
    4010:	9a 83       	std	Y+2, r25	; 0x02
    4012:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64LeftTime);
    4014:	26 eb       	ldi	r18, 0xB6	; 182
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	82 e0       	ldi	r24, 0x02	; 2
    401a:	61 e0       	ldi	r22, 0x01	; 1
    401c:	a9 01       	movw	r20, r18
    401e:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
	Global_f32LeftDistance=0.0175*Global_f64LeftTime;
    4022:	80 91 b6 00 	lds	r24, 0x00B6
    4026:	90 91 b7 00 	lds	r25, 0x00B7
    402a:	a0 91 b8 00 	lds	r26, 0x00B8
    402e:	b0 91 b9 00 	lds	r27, 0x00B9
    4032:	bc 01       	movw	r22, r24
    4034:	cd 01       	movw	r24, r26
    4036:	29 e2       	ldi	r18, 0x29	; 41
    4038:	3c e5       	ldi	r19, 0x5C	; 92
    403a:	4f e8       	ldi	r20, 0x8F	; 143
    403c:	5c e3       	ldi	r21, 0x3C	; 60
    403e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4042:	dc 01       	movw	r26, r24
    4044:	cb 01       	movw	r24, r22
    4046:	80 93 c2 00 	sts	0x00C2, r24
    404a:	90 93 c3 00 	sts	0x00C3, r25
    404e:	a0 93 c4 00 	sts	0x00C4, r26
    4052:	b0 93 c5 00 	sts	0x00C5, r27
	if (Global_f32LeftDistance < 10)
    4056:	80 91 c2 00 	lds	r24, 0x00C2
    405a:	90 91 c3 00 	lds	r25, 0x00C3
    405e:	a0 91 c4 00 	lds	r26, 0x00C4
    4062:	b0 91 c5 00 	lds	r27, 0x00C5
    4066:	bc 01       	movw	r22, r24
    4068:	cd 01       	movw	r24, r26
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	30 e0       	ldi	r19, 0x00	; 0
    406e:	40 e2       	ldi	r20, 0x20	; 32
    4070:	51 e4       	ldi	r21, 0x41	; 65
    4072:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4076:	88 23       	and	r24, r24
    4078:	0c f0       	brlt	.+2      	; 0x407c <Left+0x25a>
    407a:	4f c0       	rjmp	.+158    	; 0x411a <Left+0x2f8>
	{
		Display();
    407c:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
		DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_HIGH);
    4080:	84 e0       	ldi	r24, 0x04	; 4
    4082:	64 e0       	ldi	r22, 0x04	; 4
    4084:	41 e0       	ldi	r20, 0x01	; 1
    4086:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    408a:	82 e0       	ldi	r24, 0x02	; 2
    408c:	63 e0       	ldi	r22, 0x03	; 3
    408e:	40 e0       	ldi	r20, 0x00	; 0
    4090:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    4094:	82 e0       	ldi	r24, 0x02	; 2
    4096:	64 e0       	ldi	r22, 0x04	; 4
    4098:	40 e0       	ldi	r20, 0x00	; 0
    409a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
    409e:	82 e0       	ldi	r24, 0x02	; 2
    40a0:	65 e0       	ldi	r22, 0x05	; 5
    40a2:	41 e0       	ldi	r20, 0x01	; 1
    40a4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    40a8:	82 e0       	ldi	r24, 0x02	; 2
    40aa:	66 e0       	ldi	r22, 0x06	; 6
    40ac:	40 e0       	ldi	r20, 0x00	; 0
    40ae:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
    40b2:	21 c0       	rjmp	.+66     	; 0x40f6 <Left+0x2d4>
		while(Global_f32LeftDistance < 10 )
		{
			US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64LeftTime);
    40b4:	26 eb       	ldi	r18, 0xB6	; 182
    40b6:	30 e0       	ldi	r19, 0x00	; 0
    40b8:	82 e0       	ldi	r24, 0x02	; 2
    40ba:	61 e0       	ldi	r22, 0x01	; 1
    40bc:	a9 01       	movw	r20, r18
    40be:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
			Global_f32LeftDistance=0.0175*Global_f64LeftTime;
    40c2:	80 91 b6 00 	lds	r24, 0x00B6
    40c6:	90 91 b7 00 	lds	r25, 0x00B7
    40ca:	a0 91 b8 00 	lds	r26, 0x00B8
    40ce:	b0 91 b9 00 	lds	r27, 0x00B9
    40d2:	bc 01       	movw	r22, r24
    40d4:	cd 01       	movw	r24, r26
    40d6:	29 e2       	ldi	r18, 0x29	; 41
    40d8:	3c e5       	ldi	r19, 0x5C	; 92
    40da:	4f e8       	ldi	r20, 0x8F	; 143
    40dc:	5c e3       	ldi	r21, 0x3C	; 60
    40de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40e2:	dc 01       	movw	r26, r24
    40e4:	cb 01       	movw	r24, r22
    40e6:	80 93 c2 00 	sts	0x00C2, r24
    40ea:	90 93 c3 00 	sts	0x00C3, r25
    40ee:	a0 93 c4 00 	sts	0x00C4, r26
    40f2:	b0 93 c5 00 	sts	0x00C5, r27
		DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_HIGH);
		DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
		DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
		DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
		DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
		while(Global_f32LeftDistance < 10 )
    40f6:	80 91 c2 00 	lds	r24, 0x00C2
    40fa:	90 91 c3 00 	lds	r25, 0x00C3
    40fe:	a0 91 c4 00 	lds	r26, 0x00C4
    4102:	b0 91 c5 00 	lds	r27, 0x00C5
    4106:	bc 01       	movw	r22, r24
    4108:	cd 01       	movw	r24, r26
    410a:	20 e0       	ldi	r18, 0x00	; 0
    410c:	30 e0       	ldi	r19, 0x00	; 0
    410e:	40 e2       	ldi	r20, 0x20	; 32
    4110:	51 e4       	ldi	r21, 0x41	; 65
    4112:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4116:	88 23       	and	r24, r24
    4118:	6c f2       	brlt	.-102    	; 0x40b4 <Left+0x292>
		{
			US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64LeftTime);
			Global_f32LeftDistance=0.0175*Global_f64LeftTime;
		}
	}
	SERVO_voidMoveToAngle(90);
    411a:	8a e5       	ldi	r24, 0x5A	; 90
    411c:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
}
    4120:	2e 96       	adiw	r28, 0x0e	; 14
    4122:	0f b6       	in	r0, 0x3f	; 63
    4124:	f8 94       	cli
    4126:	de bf       	out	0x3e, r29	; 62
    4128:	0f be       	out	0x3f, r0	; 63
    412a:	cd bf       	out	0x3d, r28	; 61
    412c:	cf 91       	pop	r28
    412e:	df 91       	pop	r29
    4130:	08 95       	ret

00004132 <Left_BLUE>:
void Left_BLUE(void)
{
    4132:	df 93       	push	r29
    4134:	cf 93       	push	r28
    4136:	cd b7       	in	r28, 0x3d	; 61
    4138:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(PORT_u8D,PIN_7,PIN_LOW);
    413a:	84 e0       	ldi	r24, 0x04	; 4
    413c:	67 e0       	ldi	r22, 0x07	; 7
    413e:	40 e0       	ldi	r20, 0x00	; 0
    4140:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_6,PIN_LOW);
    4144:	84 e0       	ldi	r24, 0x04	; 4
    4146:	66 e0       	ldi	r22, 0x06	; 6
    4148:	40 e0       	ldi	r20, 0x00	; 0
    414a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_LOW);
    414e:	84 e0       	ldi	r24, 0x04	; 4
    4150:	64 e0       	ldi	r22, 0x04	; 4
    4152:	40 e0       	ldi	r20, 0x00	; 0
    4154:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_3,PIN_LOW);
    4158:	83 e0       	ldi	r24, 0x03	; 3
    415a:	63 e0       	ldi	r22, 0x03	; 3
    415c:	40 e0       	ldi	r20, 0x00	; 0
    415e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8C,PIN_4,PIN_LOW);
    4162:	83 e0       	ldi	r24, 0x03	; 3
    4164:	64 e0       	ldi	r22, 0x04	; 4
    4166:	40 e0       	ldi	r20, 0x00	; 0
    4168:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8D,PIN_4,PIN_HIGH);
    416c:	84 e0       	ldi	r24, 0x04	; 4
    416e:	64 e0       	ldi	r22, 0x04	; 4
    4170:	41 e0       	ldi	r20, 0x01	; 1
    4172:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    4176:	82 e0       	ldi	r24, 0x02	; 2
    4178:	63 e0       	ldi	r22, 0x03	; 3
    417a:	40 e0       	ldi	r20, 0x00	; 0
    417c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    4180:	82 e0       	ldi	r24, 0x02	; 2
    4182:	64 e0       	ldi	r22, 0x04	; 4
    4184:	40 e0       	ldi	r20, 0x00	; 0
    4186:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_HIGH);
    418a:	82 e0       	ldi	r24, 0x02	; 2
    418c:	65 e0       	ldi	r22, 0x05	; 5
    418e:	41 e0       	ldi	r20, 0x01	; 1
    4190:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    4194:	82 e0       	ldi	r24, 0x02	; 2
    4196:	66 e0       	ldi	r22, 0x06	; 6
    4198:	40 e0       	ldi	r20, 0x00	; 0
    419a:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
}
    419e:	cf 91       	pop	r28
    41a0:	df 91       	pop	r29
    41a2:	08 95       	ret

000041a4 <BLUETOOTHMODE>:
void BLUETOOTHMODE(void)
{
    41a4:	df 93       	push	r29
    41a6:	cf 93       	push	r28
    41a8:	00 d0       	rcall	.+0      	; 0x41aa <BLUETOOTHMODE+0x6>
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
	ANALOG_voidSendSignal(PORT_u8B,PIN_7,SPEEDCARRIER_B);
    41ae:	90 91 ad 00 	lds	r25, 0x00AD
    41b2:	82 e0       	ldi	r24, 0x02	; 2
    41b4:	67 e0       	ldi	r22, 0x07	; 7
    41b6:	49 2f       	mov	r20, r25
    41b8:	0e 94 a8 06 	call	0xd50	; 0xd50 <ANALOG_voidSendSignal>
	while (1)
	{
		Display();
    41bc:	0e 94 27 1b 	call	0x364e	; 0x364e <Display>
		UART_u8RecieveDataSynch(&Local_u8Controler);
    41c0:	87 e8       	ldi	r24, 0x87	; 135
    41c2:	90 e0       	ldi	r25, 0x00	; 0
    41c4:	0e 94 49 17 	call	0x2e92	; 0x2e92 <UART_u8RecieveDataSynch>
		if(Local_u8Controler-'0' <= 9)
    41c8:	80 91 87 00 	lds	r24, 0x0087
    41cc:	88 2f       	mov	r24, r24
    41ce:	90 e0       	ldi	r25, 0x00	; 0
    41d0:	c0 97       	sbiw	r24, 0x30	; 48
    41d2:	8a 30       	cpi	r24, 0x0A	; 10
    41d4:	91 05       	cpc	r25, r1
    41d6:	c4 f4       	brge	.+48     	; 0x4208 <BLUETOOTHMODE+0x64>
		{
			SPEEDCARRIER_B=2*(Local_u8Controler-'0');
    41d8:	80 91 87 00 	lds	r24, 0x0087
    41dc:	88 2f       	mov	r24, r24
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	c0 97       	sbiw	r24, 0x30	; 48
    41e2:	88 0f       	add	r24, r24
    41e4:	99 1f       	adc	r25, r25
    41e6:	80 93 ad 00 	sts	0x00AD, r24
			ANALOG_voidSendSignal(PORT_u8B,PIN_7,SPEEDCARRIER_B);
    41ea:	90 91 ad 00 	lds	r25, 0x00AD
    41ee:	82 e0       	ldi	r24, 0x02	; 2
    41f0:	67 e0       	ldi	r22, 0x07	; 7
    41f2:	49 2f       	mov	r20, r25
    41f4:	0e 94 a8 06 	call	0xd50	; 0xd50 <ANALOG_voidSendSignal>
		    EEPROM_voidWriteDataByte(DEVICE1,60,SPEEDCARRIER_B);
    41f8:	90 91 ad 00 	lds	r25, 0x00AD
    41fc:	80 e0       	ldi	r24, 0x00	; 0
    41fe:	6c e3       	ldi	r22, 0x3C	; 60
    4200:	70 e0       	ldi	r23, 0x00	; 0
    4202:	49 2f       	mov	r20, r25
    4204:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
		}
		switch(Local_u8Controler)
    4208:	80 91 87 00 	lds	r24, 0x0087
    420c:	28 2f       	mov	r18, r24
    420e:	30 e0       	ldi	r19, 0x00	; 0
    4210:	3a 83       	std	Y+2, r19	; 0x02
    4212:	29 83       	std	Y+1, r18	; 0x01
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	9a 81       	ldd	r25, Y+2	; 0x02
    4218:	84 36       	cpi	r24, 0x64	; 100
    421a:	91 05       	cpc	r25, r1
    421c:	d9 f0       	breq	.+54     	; 0x4254 <BLUETOOTHMODE+0xb0>
    421e:	29 81       	ldd	r18, Y+1	; 0x01
    4220:	3a 81       	ldd	r19, Y+2	; 0x02
    4222:	25 36       	cpi	r18, 0x65	; 101
    4224:	31 05       	cpc	r19, r1
    4226:	34 f4       	brge	.+12     	; 0x4234 <BLUETOOTHMODE+0x90>
    4228:	89 81       	ldd	r24, Y+1	; 0x01
    422a:	9a 81       	ldd	r25, Y+2	; 0x02
    422c:	81 36       	cpi	r24, 0x61	; 97
    422e:	91 05       	cpc	r25, r1
    4230:	e9 f0       	breq	.+58     	; 0x426c <BLUETOOTHMODE+0xc8>
    4232:	22 c0       	rjmp	.+68     	; 0x4278 <BLUETOOTHMODE+0xd4>
    4234:	29 81       	ldd	r18, Y+1	; 0x01
    4236:	3a 81       	ldd	r19, Y+2	; 0x02
    4238:	23 37       	cpi	r18, 0x73	; 115
    423a:	31 05       	cpc	r19, r1
    423c:	89 f0       	breq	.+34     	; 0x4260 <BLUETOOTHMODE+0xbc>
    423e:	89 81       	ldd	r24, Y+1	; 0x01
    4240:	9a 81       	ldd	r25, Y+2	; 0x02
    4242:	87 37       	cpi	r24, 0x77	; 119
    4244:	91 05       	cpc	r25, r1
    4246:	c1 f4       	brne	.+48     	; 0x4278 <BLUETOOTHMODE+0xd4>
		{
		case 'w':
		{
			Forward_BLUE();
    4248:	0e 94 c0 1b 	call	0x3780	; 0x3780 <Forward_BLUE>
			Local_u8Controler='f';
    424c:	86 e6       	ldi	r24, 0x66	; 102
    424e:	80 93 87 00 	sts	0x0087, r24
    4252:	b4 cf       	rjmp	.-152    	; 0x41bc <BLUETOOTHMODE+0x18>
			break;
		}
		case 'd':
		{
			Right_BLUE();
    4254:	0e 94 d8 1e 	call	0x3db0	; 0x3db0 <Right_BLUE>
			Local_u8Controler='f';
    4258:	86 e6       	ldi	r24, 0x66	; 102
    425a:	80 93 87 00 	sts	0x0087, r24
    425e:	ae cf       	rjmp	.-164    	; 0x41bc <BLUETOOTHMODE+0x18>
			break;
		}
		case 's':
		{
			Back_BLUE();
    4260:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <Back_BLUE>
			Local_u8Controler='f';
    4264:	86 e6       	ldi	r24, 0x66	; 102
    4266:	80 93 87 00 	sts	0x0087, r24
    426a:	a8 cf       	rjmp	.-176    	; 0x41bc <BLUETOOTHMODE+0x18>
			break;
		}
		case 'a':
		{
			Left_BLUE();
    426c:	0e 94 99 20 	call	0x4132	; 0x4132 <Left_BLUE>
			Local_u8Controler='f';
    4270:	86 e6       	ldi	r24, 0x66	; 102
    4272:	80 93 87 00 	sts	0x0087, r24
    4276:	a2 cf       	rjmp	.-188    	; 0x41bc <BLUETOOTHMODE+0x18>
			break;
		}
		default :
		{
			Stop_BLUE();
    4278:	0e 94 3b 1c 	call	0x3876	; 0x3876 <Stop_BLUE>
			Local_u8Controler='f';
    427c:	86 e6       	ldi	r24, 0x66	; 102
    427e:	80 93 87 00 	sts	0x0087, r24
    4282:	9c cf       	rjmp	.-200    	; 0x41bc <BLUETOOTHMODE+0x18>

00004284 <ULTRASONICMODE>:


	}
}
void ULTRASONICMODE(void)
{
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
    428c:	ac 97       	sbiw	r28, 0x2c	; 44
    428e:	0f b6       	in	r0, 0x3f	; 63
    4290:	f8 94       	cli
    4292:	de bf       	out	0x3e, r29	; 62
    4294:	0f be       	out	0x3f, r0	; 63
    4296:	cd bf       	out	0x3d, r28	; 61
	while (1)
	{
		US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
    4298:	2e ea       	ldi	r18, 0xAE	; 174
    429a:	30 e0       	ldi	r19, 0x00	; 0
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	61 e0       	ldi	r22, 0x01	; 1
    42a0:	a9 01       	movw	r20, r18
    42a2:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
		Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
    42a6:	80 91 ae 00 	lds	r24, 0x00AE
    42aa:	90 91 af 00 	lds	r25, 0x00AF
    42ae:	a0 91 b0 00 	lds	r26, 0x00B0
    42b2:	b0 91 b1 00 	lds	r27, 0x00B1
    42b6:	bc 01       	movw	r22, r24
    42b8:	cd 01       	movw	r24, r26
    42ba:	29 e2       	ldi	r18, 0x29	; 41
    42bc:	3c e5       	ldi	r19, 0x5C	; 92
    42be:	4f e8       	ldi	r20, 0x8F	; 143
    42c0:	5c e3       	ldi	r21, 0x3C	; 60
    42c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	80 93 ba 00 	sts	0x00BA, r24
    42ce:	90 93 bb 00 	sts	0x00BB, r25
    42d2:	a0 93 bc 00 	sts	0x00BC, r26
    42d6:	b0 93 bd 00 	sts	0x00BD, r27
		if(Global_f32ForwardDistance > 6)
    42da:	80 91 ba 00 	lds	r24, 0x00BA
    42de:	90 91 bb 00 	lds	r25, 0x00BB
    42e2:	a0 91 bc 00 	lds	r26, 0x00BC
    42e6:	b0 91 bd 00 	lds	r27, 0x00BD
    42ea:	bc 01       	movw	r22, r24
    42ec:	cd 01       	movw	r24, r26
    42ee:	20 e0       	ldi	r18, 0x00	; 0
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	40 ec       	ldi	r20, 0xC0	; 192
    42f4:	50 e4       	ldi	r21, 0x40	; 64
    42f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    42fa:	18 16       	cp	r1, r24
    42fc:	3c f4       	brge	.+14     	; 0x430c <ULTRASONICMODE+0x88>
		{
			if(ForwardFlag != 1)
    42fe:	80 91 a8 00 	lds	r24, 0x00A8
    4302:	81 30       	cpi	r24, 0x01	; 1
    4304:	49 f2       	breq	.-110    	; 0x4298 <ULTRASONICMODE+0x14>
			{
				Forward();
    4306:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <Forward>
    430a:	c6 cf       	rjmp	.-116    	; 0x4298 <ULTRASONICMODE+0x14>
			}
		}
		else if(Global_f32ForwardDistance <= 6)
    430c:	80 91 ba 00 	lds	r24, 0x00BA
    4310:	90 91 bb 00 	lds	r25, 0x00BB
    4314:	a0 91 bc 00 	lds	r26, 0x00BC
    4318:	b0 91 bd 00 	lds	r27, 0x00BD
    431c:	bc 01       	movw	r22, r24
    431e:	cd 01       	movw	r24, r26
    4320:	20 e0       	ldi	r18, 0x00	; 0
    4322:	30 e0       	ldi	r19, 0x00	; 0
    4324:	40 ec       	ldi	r20, 0xC0	; 192
    4326:	50 e4       	ldi	r21, 0x40	; 64
    4328:	0e 94 55 04 	call	0x8aa	; 0x8aa <__lesf2>
    432c:	18 16       	cp	r1, r24
    432e:	0c f4       	brge	.+2      	; 0x4332 <ULTRASONICMODE+0xae>
    4330:	b3 cf       	rjmp	.-154    	; 0x4298 <ULTRASONICMODE+0x14>
		{
			OBSTECLSNUM++;
    4332:	80 91 ac 00 	lds	r24, 0x00AC
    4336:	8f 5f       	subi	r24, 0xFF	; 255
    4338:	80 93 ac 00 	sts	0x00AC, r24
			EEPROM_voidWriteDataByte(DEVICE1,0,OBSTECLSNUM);
    433c:	90 91 ac 00 	lds	r25, 0x00AC
    4340:	80 e0       	ldi	r24, 0x00	; 0
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	70 e0       	ldi	r23, 0x00	; 0
    4346:	49 2f       	mov	r20, r25
    4348:	0e 94 e9 0e 	call	0x1dd2	; 0x1dd2 <EEPROM_voidWriteDataByte>
			label1:
			Stop();
    434c:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <Stop>
			SERVO_voidMoveToAngle(0);
    4350:	80 e0       	ldi	r24, 0x00	; 0
    4352:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
    4356:	80 e0       	ldi	r24, 0x00	; 0
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	aa ef       	ldi	r26, 0xFA	; 250
    435c:	b3 e4       	ldi	r27, 0x43	; 67
    435e:	8f a3       	std	Y+39, r24	; 0x27
    4360:	98 a7       	std	Y+40, r25	; 0x28
    4362:	a9 a7       	std	Y+41, r26	; 0x29
    4364:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4366:	6f a1       	ldd	r22, Y+39	; 0x27
    4368:	78 a5       	ldd	r23, Y+40	; 0x28
    436a:	89 a5       	ldd	r24, Y+41	; 0x29
    436c:	9a a5       	ldd	r25, Y+42	; 0x2a
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	4a ef       	ldi	r20, 0xFA	; 250
    4374:	54 e4       	ldi	r21, 0x44	; 68
    4376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    437a:	dc 01       	movw	r26, r24
    437c:	cb 01       	movw	r24, r22
    437e:	8b a3       	std	Y+35, r24	; 0x23
    4380:	9c a3       	std	Y+36, r25	; 0x24
    4382:	ad a3       	std	Y+37, r26	; 0x25
    4384:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4386:	6b a1       	ldd	r22, Y+35	; 0x23
    4388:	7c a1       	ldd	r23, Y+36	; 0x24
    438a:	8d a1       	ldd	r24, Y+37	; 0x25
    438c:	9e a1       	ldd	r25, Y+38	; 0x26
    438e:	20 e0       	ldi	r18, 0x00	; 0
    4390:	30 e0       	ldi	r19, 0x00	; 0
    4392:	40 e8       	ldi	r20, 0x80	; 128
    4394:	5f e3       	ldi	r21, 0x3F	; 63
    4396:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    439a:	88 23       	and	r24, r24
    439c:	2c f4       	brge	.+10     	; 0x43a8 <ULTRASONICMODE+0x124>
		__ticks = 1;
    439e:	81 e0       	ldi	r24, 0x01	; 1
    43a0:	90 e0       	ldi	r25, 0x00	; 0
    43a2:	9a a3       	std	Y+34, r25	; 0x22
    43a4:	89 a3       	std	Y+33, r24	; 0x21
    43a6:	3f c0       	rjmp	.+126    	; 0x4426 <ULTRASONICMODE+0x1a2>
	else if (__tmp > 65535)
    43a8:	6b a1       	ldd	r22, Y+35	; 0x23
    43aa:	7c a1       	ldd	r23, Y+36	; 0x24
    43ac:	8d a1       	ldd	r24, Y+37	; 0x25
    43ae:	9e a1       	ldd	r25, Y+38	; 0x26
    43b0:	20 e0       	ldi	r18, 0x00	; 0
    43b2:	3f ef       	ldi	r19, 0xFF	; 255
    43b4:	4f e7       	ldi	r20, 0x7F	; 127
    43b6:	57 e4       	ldi	r21, 0x47	; 71
    43b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43bc:	18 16       	cp	r1, r24
    43be:	4c f5       	brge	.+82     	; 0x4412 <ULTRASONICMODE+0x18e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43c0:	6f a1       	ldd	r22, Y+39	; 0x27
    43c2:	78 a5       	ldd	r23, Y+40	; 0x28
    43c4:	89 a5       	ldd	r24, Y+41	; 0x29
    43c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    43c8:	20 e0       	ldi	r18, 0x00	; 0
    43ca:	30 e0       	ldi	r19, 0x00	; 0
    43cc:	40 e2       	ldi	r20, 0x20	; 32
    43ce:	51 e4       	ldi	r21, 0x41	; 65
    43d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d4:	dc 01       	movw	r26, r24
    43d6:	cb 01       	movw	r24, r22
    43d8:	bc 01       	movw	r22, r24
    43da:	cd 01       	movw	r24, r26
    43dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e0:	dc 01       	movw	r26, r24
    43e2:	cb 01       	movw	r24, r22
    43e4:	9a a3       	std	Y+34, r25	; 0x22
    43e6:	89 a3       	std	Y+33, r24	; 0x21
    43e8:	0f c0       	rjmp	.+30     	; 0x4408 <ULTRASONICMODE+0x184>
    43ea:	88 ec       	ldi	r24, 0xC8	; 200
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	98 a3       	std	Y+32, r25	; 0x20
    43f0:	8f 8f       	std	Y+31, r24	; 0x1f
    43f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43f4:	98 a1       	ldd	r25, Y+32	; 0x20
    43f6:	01 97       	sbiw	r24, 0x01	; 1
    43f8:	f1 f7       	brne	.-4      	; 0x43f6 <ULTRASONICMODE+0x172>
    43fa:	98 a3       	std	Y+32, r25	; 0x20
    43fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43fe:	89 a1       	ldd	r24, Y+33	; 0x21
    4400:	9a a1       	ldd	r25, Y+34	; 0x22
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	9a a3       	std	Y+34, r25	; 0x22
    4406:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4408:	89 a1       	ldd	r24, Y+33	; 0x21
    440a:	9a a1       	ldd	r25, Y+34	; 0x22
    440c:	00 97       	sbiw	r24, 0x00	; 0
    440e:	69 f7       	brne	.-38     	; 0x43ea <ULTRASONICMODE+0x166>
    4410:	14 c0       	rjmp	.+40     	; 0x443a <ULTRASONICMODE+0x1b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4412:	6b a1       	ldd	r22, Y+35	; 0x23
    4414:	7c a1       	ldd	r23, Y+36	; 0x24
    4416:	8d a1       	ldd	r24, Y+37	; 0x25
    4418:	9e a1       	ldd	r25, Y+38	; 0x26
    441a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441e:	dc 01       	movw	r26, r24
    4420:	cb 01       	movw	r24, r22
    4422:	9a a3       	std	Y+34, r25	; 0x22
    4424:	89 a3       	std	Y+33, r24	; 0x21
    4426:	89 a1       	ldd	r24, Y+33	; 0x21
    4428:	9a a1       	ldd	r25, Y+34	; 0x22
    442a:	9e 8f       	std	Y+30, r25	; 0x1e
    442c:	8d 8f       	std	Y+29, r24	; 0x1d
    442e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4430:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4432:	01 97       	sbiw	r24, 0x01	; 1
    4434:	f1 f7       	brne	.-4      	; 0x4432 <ULTRASONICMODE+0x1ae>
    4436:	9e 8f       	std	Y+30, r25	; 0x1e
    4438:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);
			US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64RightTime);
    443a:	22 eb       	ldi	r18, 0xB2	; 178
    443c:	30 e0       	ldi	r19, 0x00	; 0
    443e:	82 e0       	ldi	r24, 0x02	; 2
    4440:	61 e0       	ldi	r22, 0x01	; 1
    4442:	a9 01       	movw	r20, r18
    4444:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
			Global_f32RightDistance=0.0175*Global_f64RightTime;
    4448:	80 91 b2 00 	lds	r24, 0x00B2
    444c:	90 91 b3 00 	lds	r25, 0x00B3
    4450:	a0 91 b4 00 	lds	r26, 0x00B4
    4454:	b0 91 b5 00 	lds	r27, 0x00B5
    4458:	bc 01       	movw	r22, r24
    445a:	cd 01       	movw	r24, r26
    445c:	29 e2       	ldi	r18, 0x29	; 41
    445e:	3c e5       	ldi	r19, 0x5C	; 92
    4460:	4f e8       	ldi	r20, 0x8F	; 143
    4462:	5c e3       	ldi	r21, 0x3C	; 60
    4464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4468:	dc 01       	movw	r26, r24
    446a:	cb 01       	movw	r24, r22
    446c:	80 93 be 00 	sts	0x00BE, r24
    4470:	90 93 bf 00 	sts	0x00BF, r25
    4474:	a0 93 c0 00 	sts	0x00C0, r26
    4478:	b0 93 c1 00 	sts	0x00C1, r27
			SERVO_voidMoveToAngle(180);
    447c:	84 eb       	ldi	r24, 0xB4	; 180
    447e:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
    4482:	80 e0       	ldi	r24, 0x00	; 0
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	aa ef       	ldi	r26, 0xFA	; 250
    4488:	b3 e4       	ldi	r27, 0x43	; 67
    448a:	89 8f       	std	Y+25, r24	; 0x19
    448c:	9a 8f       	std	Y+26, r25	; 0x1a
    448e:	ab 8f       	std	Y+27, r26	; 0x1b
    4490:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4492:	69 8d       	ldd	r22, Y+25	; 0x19
    4494:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4496:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4498:	9c 8d       	ldd	r25, Y+28	; 0x1c
    449a:	20 e0       	ldi	r18, 0x00	; 0
    449c:	30 e0       	ldi	r19, 0x00	; 0
    449e:	4a ef       	ldi	r20, 0xFA	; 250
    44a0:	54 e4       	ldi	r21, 0x44	; 68
    44a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44a6:	dc 01       	movw	r26, r24
    44a8:	cb 01       	movw	r24, r22
    44aa:	8d 8b       	std	Y+21, r24	; 0x15
    44ac:	9e 8b       	std	Y+22, r25	; 0x16
    44ae:	af 8b       	std	Y+23, r26	; 0x17
    44b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44b2:	6d 89       	ldd	r22, Y+21	; 0x15
    44b4:	7e 89       	ldd	r23, Y+22	; 0x16
    44b6:	8f 89       	ldd	r24, Y+23	; 0x17
    44b8:	98 8d       	ldd	r25, Y+24	; 0x18
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	40 e8       	ldi	r20, 0x80	; 128
    44c0:	5f e3       	ldi	r21, 0x3F	; 63
    44c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44c6:	88 23       	and	r24, r24
    44c8:	2c f4       	brge	.+10     	; 0x44d4 <ULTRASONICMODE+0x250>
		__ticks = 1;
    44ca:	81 e0       	ldi	r24, 0x01	; 1
    44cc:	90 e0       	ldi	r25, 0x00	; 0
    44ce:	9c 8b       	std	Y+20, r25	; 0x14
    44d0:	8b 8b       	std	Y+19, r24	; 0x13
    44d2:	3f c0       	rjmp	.+126    	; 0x4552 <ULTRASONICMODE+0x2ce>
	else if (__tmp > 65535)
    44d4:	6d 89       	ldd	r22, Y+21	; 0x15
    44d6:	7e 89       	ldd	r23, Y+22	; 0x16
    44d8:	8f 89       	ldd	r24, Y+23	; 0x17
    44da:	98 8d       	ldd	r25, Y+24	; 0x18
    44dc:	20 e0       	ldi	r18, 0x00	; 0
    44de:	3f ef       	ldi	r19, 0xFF	; 255
    44e0:	4f e7       	ldi	r20, 0x7F	; 127
    44e2:	57 e4       	ldi	r21, 0x47	; 71
    44e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    44e8:	18 16       	cp	r1, r24
    44ea:	4c f5       	brge	.+82     	; 0x453e <ULTRASONICMODE+0x2ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44ec:	69 8d       	ldd	r22, Y+25	; 0x19
    44ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	30 e0       	ldi	r19, 0x00	; 0
    44f8:	40 e2       	ldi	r20, 0x20	; 32
    44fa:	51 e4       	ldi	r21, 0x41	; 65
    44fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	bc 01       	movw	r22, r24
    4506:	cd 01       	movw	r24, r26
    4508:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    450c:	dc 01       	movw	r26, r24
    450e:	cb 01       	movw	r24, r22
    4510:	9c 8b       	std	Y+20, r25	; 0x14
    4512:	8b 8b       	std	Y+19, r24	; 0x13
    4514:	0f c0       	rjmp	.+30     	; 0x4534 <ULTRASONICMODE+0x2b0>
    4516:	88 ec       	ldi	r24, 0xC8	; 200
    4518:	90 e0       	ldi	r25, 0x00	; 0
    451a:	9a 8b       	std	Y+18, r25	; 0x12
    451c:	89 8b       	std	Y+17, r24	; 0x11
    451e:	89 89       	ldd	r24, Y+17	; 0x11
    4520:	9a 89       	ldd	r25, Y+18	; 0x12
    4522:	01 97       	sbiw	r24, 0x01	; 1
    4524:	f1 f7       	brne	.-4      	; 0x4522 <ULTRASONICMODE+0x29e>
    4526:	9a 8b       	std	Y+18, r25	; 0x12
    4528:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    452a:	8b 89       	ldd	r24, Y+19	; 0x13
    452c:	9c 89       	ldd	r25, Y+20	; 0x14
    452e:	01 97       	sbiw	r24, 0x01	; 1
    4530:	9c 8b       	std	Y+20, r25	; 0x14
    4532:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4534:	8b 89       	ldd	r24, Y+19	; 0x13
    4536:	9c 89       	ldd	r25, Y+20	; 0x14
    4538:	00 97       	sbiw	r24, 0x00	; 0
    453a:	69 f7       	brne	.-38     	; 0x4516 <ULTRASONICMODE+0x292>
    453c:	14 c0       	rjmp	.+40     	; 0x4566 <ULTRASONICMODE+0x2e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    453e:	6d 89       	ldd	r22, Y+21	; 0x15
    4540:	7e 89       	ldd	r23, Y+22	; 0x16
    4542:	8f 89       	ldd	r24, Y+23	; 0x17
    4544:	98 8d       	ldd	r25, Y+24	; 0x18
    4546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    454a:	dc 01       	movw	r26, r24
    454c:	cb 01       	movw	r24, r22
    454e:	9c 8b       	std	Y+20, r25	; 0x14
    4550:	8b 8b       	std	Y+19, r24	; 0x13
    4552:	8b 89       	ldd	r24, Y+19	; 0x13
    4554:	9c 89       	ldd	r25, Y+20	; 0x14
    4556:	98 8b       	std	Y+16, r25	; 0x10
    4558:	8f 87       	std	Y+15, r24	; 0x0f
    455a:	8f 85       	ldd	r24, Y+15	; 0x0f
    455c:	98 89       	ldd	r25, Y+16	; 0x10
    455e:	01 97       	sbiw	r24, 0x01	; 1
    4560:	f1 f7       	brne	.-4      	; 0x455e <ULTRASONICMODE+0x2da>
    4562:	98 8b       	std	Y+16, r25	; 0x10
    4564:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);
			US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64LeftTime);
    4566:	26 eb       	ldi	r18, 0xB6	; 182
    4568:	30 e0       	ldi	r19, 0x00	; 0
    456a:	82 e0       	ldi	r24, 0x02	; 2
    456c:	61 e0       	ldi	r22, 0x01	; 1
    456e:	a9 01       	movw	r20, r18
    4570:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
			Global_f32LeftDistance=0.0175*Global_f64LeftTime;
    4574:	80 91 b6 00 	lds	r24, 0x00B6
    4578:	90 91 b7 00 	lds	r25, 0x00B7
    457c:	a0 91 b8 00 	lds	r26, 0x00B8
    4580:	b0 91 b9 00 	lds	r27, 0x00B9
    4584:	bc 01       	movw	r22, r24
    4586:	cd 01       	movw	r24, r26
    4588:	29 e2       	ldi	r18, 0x29	; 41
    458a:	3c e5       	ldi	r19, 0x5C	; 92
    458c:	4f e8       	ldi	r20, 0x8F	; 143
    458e:	5c e3       	ldi	r21, 0x3C	; 60
    4590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4594:	dc 01       	movw	r26, r24
    4596:	cb 01       	movw	r24, r22
    4598:	80 93 c2 00 	sts	0x00C2, r24
    459c:	90 93 c3 00 	sts	0x00C3, r25
    45a0:	a0 93 c4 00 	sts	0x00C4, r26
    45a4:	b0 93 c5 00 	sts	0x00C5, r27
			SERVO_voidMoveToAngle(90);
    45a8:	8a e5       	ldi	r24, 0x5A	; 90
    45aa:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	aa ef       	ldi	r26, 0xFA	; 250
    45b4:	b3 e4       	ldi	r27, 0x43	; 67
    45b6:	8b 87       	std	Y+11, r24	; 0x0b
    45b8:	9c 87       	std	Y+12, r25	; 0x0c
    45ba:	ad 87       	std	Y+13, r26	; 0x0d
    45bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45be:	6b 85       	ldd	r22, Y+11	; 0x0b
    45c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    45c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    45c6:	20 e0       	ldi	r18, 0x00	; 0
    45c8:	30 e0       	ldi	r19, 0x00	; 0
    45ca:	4a ef       	ldi	r20, 0xFA	; 250
    45cc:	54 e4       	ldi	r21, 0x44	; 68
    45ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45d2:	dc 01       	movw	r26, r24
    45d4:	cb 01       	movw	r24, r22
    45d6:	8f 83       	std	Y+7, r24	; 0x07
    45d8:	98 87       	std	Y+8, r25	; 0x08
    45da:	a9 87       	std	Y+9, r26	; 0x09
    45dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45de:	6f 81       	ldd	r22, Y+7	; 0x07
    45e0:	78 85       	ldd	r23, Y+8	; 0x08
    45e2:	89 85       	ldd	r24, Y+9	; 0x09
    45e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45e6:	20 e0       	ldi	r18, 0x00	; 0
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	40 e8       	ldi	r20, 0x80	; 128
    45ec:	5f e3       	ldi	r21, 0x3F	; 63
    45ee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45f2:	88 23       	and	r24, r24
    45f4:	2c f4       	brge	.+10     	; 0x4600 <ULTRASONICMODE+0x37c>
		__ticks = 1;
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	9e 83       	std	Y+6, r25	; 0x06
    45fc:	8d 83       	std	Y+5, r24	; 0x05
    45fe:	3f c0       	rjmp	.+126    	; 0x467e <ULTRASONICMODE+0x3fa>
	else if (__tmp > 65535)
    4600:	6f 81       	ldd	r22, Y+7	; 0x07
    4602:	78 85       	ldd	r23, Y+8	; 0x08
    4604:	89 85       	ldd	r24, Y+9	; 0x09
    4606:	9a 85       	ldd	r25, Y+10	; 0x0a
    4608:	20 e0       	ldi	r18, 0x00	; 0
    460a:	3f ef       	ldi	r19, 0xFF	; 255
    460c:	4f e7       	ldi	r20, 0x7F	; 127
    460e:	57 e4       	ldi	r21, 0x47	; 71
    4610:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4614:	18 16       	cp	r1, r24
    4616:	4c f5       	brge	.+82     	; 0x466a <ULTRASONICMODE+0x3e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4618:	6b 85       	ldd	r22, Y+11	; 0x0b
    461a:	7c 85       	ldd	r23, Y+12	; 0x0c
    461c:	8d 85       	ldd	r24, Y+13	; 0x0d
    461e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4620:	20 e0       	ldi	r18, 0x00	; 0
    4622:	30 e0       	ldi	r19, 0x00	; 0
    4624:	40 e2       	ldi	r20, 0x20	; 32
    4626:	51 e4       	ldi	r21, 0x41	; 65
    4628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    462c:	dc 01       	movw	r26, r24
    462e:	cb 01       	movw	r24, r22
    4630:	bc 01       	movw	r22, r24
    4632:	cd 01       	movw	r24, r26
    4634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4638:	dc 01       	movw	r26, r24
    463a:	cb 01       	movw	r24, r22
    463c:	9e 83       	std	Y+6, r25	; 0x06
    463e:	8d 83       	std	Y+5, r24	; 0x05
    4640:	0f c0       	rjmp	.+30     	; 0x4660 <ULTRASONICMODE+0x3dc>
    4642:	88 ec       	ldi	r24, 0xC8	; 200
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	9c 83       	std	Y+4, r25	; 0x04
    4648:	8b 83       	std	Y+3, r24	; 0x03
    464a:	8b 81       	ldd	r24, Y+3	; 0x03
    464c:	9c 81       	ldd	r25, Y+4	; 0x04
    464e:	01 97       	sbiw	r24, 0x01	; 1
    4650:	f1 f7       	brne	.-4      	; 0x464e <ULTRASONICMODE+0x3ca>
    4652:	9c 83       	std	Y+4, r25	; 0x04
    4654:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4656:	8d 81       	ldd	r24, Y+5	; 0x05
    4658:	9e 81       	ldd	r25, Y+6	; 0x06
    465a:	01 97       	sbiw	r24, 0x01	; 1
    465c:	9e 83       	std	Y+6, r25	; 0x06
    465e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4660:	8d 81       	ldd	r24, Y+5	; 0x05
    4662:	9e 81       	ldd	r25, Y+6	; 0x06
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	69 f7       	brne	.-38     	; 0x4642 <ULTRASONICMODE+0x3be>
    4668:	14 c0       	rjmp	.+40     	; 0x4692 <ULTRASONICMODE+0x40e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    466a:	6f 81       	ldd	r22, Y+7	; 0x07
    466c:	78 85       	ldd	r23, Y+8	; 0x08
    466e:	89 85       	ldd	r24, Y+9	; 0x09
    4670:	9a 85       	ldd	r25, Y+10	; 0x0a
    4672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4676:	dc 01       	movw	r26, r24
    4678:	cb 01       	movw	r24, r22
    467a:	9e 83       	std	Y+6, r25	; 0x06
    467c:	8d 83       	std	Y+5, r24	; 0x05
    467e:	8d 81       	ldd	r24, Y+5	; 0x05
    4680:	9e 81       	ldd	r25, Y+6	; 0x06
    4682:	9a 83       	std	Y+2, r25	; 0x02
    4684:	89 83       	std	Y+1, r24	; 0x01
    4686:	89 81       	ldd	r24, Y+1	; 0x01
    4688:	9a 81       	ldd	r25, Y+2	; 0x02
    468a:	01 97       	sbiw	r24, 0x01	; 1
    468c:	f1 f7       	brne	.-4      	; 0x468a <ULTRASONICMODE+0x406>
    468e:	9a 83       	std	Y+2, r25	; 0x02
    4690:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
			if(Global_f32RightDistance < 8 && Global_f32LeftDistance <8)
    4692:	80 91 be 00 	lds	r24, 0x00BE
    4696:	90 91 bf 00 	lds	r25, 0x00BF
    469a:	a0 91 c0 00 	lds	r26, 0x00C0
    469e:	b0 91 c1 00 	lds	r27, 0x00C1
    46a2:	1c a6       	std	Y+44, r1	; 0x2c
    46a4:	bc 01       	movw	r22, r24
    46a6:	cd 01       	movw	r24, r26
    46a8:	20 e0       	ldi	r18, 0x00	; 0
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	40 e0       	ldi	r20, 0x00	; 0
    46ae:	51 e4       	ldi	r21, 0x41	; 65
    46b0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46b4:	88 23       	and	r24, r24
    46b6:	14 f4       	brge	.+4      	; 0x46bc <ULTRASONICMODE+0x438>
    46b8:	81 e0       	ldi	r24, 0x01	; 1
    46ba:	8c a7       	std	Y+44, r24	; 0x2c
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	9c a5       	ldd	r25, Y+44	; 0x2c
    46c0:	89 27       	eor	r24, r25
    46c2:	88 23       	and	r24, r24
    46c4:	e9 f4       	brne	.+58     	; 0x4700 <ULTRASONICMODE+0x47c>
    46c6:	80 91 c2 00 	lds	r24, 0x00C2
    46ca:	90 91 c3 00 	lds	r25, 0x00C3
    46ce:	a0 91 c4 00 	lds	r26, 0x00C4
    46d2:	b0 91 c5 00 	lds	r27, 0x00C5
    46d6:	1b a6       	std	Y+43, r1	; 0x2b
    46d8:	bc 01       	movw	r22, r24
    46da:	cd 01       	movw	r24, r26
    46dc:	20 e0       	ldi	r18, 0x00	; 0
    46de:	30 e0       	ldi	r19, 0x00	; 0
    46e0:	40 e0       	ldi	r20, 0x00	; 0
    46e2:	51 e4       	ldi	r21, 0x41	; 65
    46e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46e8:	88 23       	and	r24, r24
    46ea:	14 f4       	brge	.+4      	; 0x46f0 <ULTRASONICMODE+0x46c>
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	8b a7       	std	Y+43, r24	; 0x2b
    46f0:	81 e0       	ldi	r24, 0x01	; 1
    46f2:	9b a5       	ldd	r25, Y+43	; 0x2b
    46f4:	89 27       	eor	r24, r25
    46f6:	88 23       	and	r24, r24
    46f8:	19 f4       	brne	.+6      	; 0x4700 <ULTRASONICMODE+0x47c>
			{
				Back();
    46fa:	0e 94 6f 1c 	call	0x38de	; 0x38de <Back>
    46fe:	26 ce       	rjmp	.-948    	; 0x434c <ULTRASONICMODE+0xc8>
				goto label1;
			}
			else if(Global_f32RightDistance >= Global_f32LeftDistance)
    4700:	80 91 be 00 	lds	r24, 0x00BE
    4704:	90 91 bf 00 	lds	r25, 0x00BF
    4708:	a0 91 c0 00 	lds	r26, 0x00C0
    470c:	b0 91 c1 00 	lds	r27, 0x00C1
    4710:	20 91 c2 00 	lds	r18, 0x00C2
    4714:	30 91 c3 00 	lds	r19, 0x00C3
    4718:	40 91 c4 00 	lds	r20, 0x00C4
    471c:	50 91 c5 00 	lds	r21, 0x00C5
    4720:	bc 01       	movw	r22, r24
    4722:	cd 01       	movw	r24, r26
    4724:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
    4728:	88 23       	and	r24, r24
    472a:	1c f0       	brlt	.+6      	; 0x4732 <ULTRASONICMODE+0x4ae>
			{
				Right();
    472c:	0e 94 50 1d 	call	0x3aa0	; 0x3aa0 <Right>
    4730:	b3 cd       	rjmp	.-1178   	; 0x4298 <ULTRASONICMODE+0x14>
			}
			else if(Global_f32RightDistance < Global_f32LeftDistance)
    4732:	80 91 be 00 	lds	r24, 0x00BE
    4736:	90 91 bf 00 	lds	r25, 0x00BF
    473a:	a0 91 c0 00 	lds	r26, 0x00C0
    473e:	b0 91 c1 00 	lds	r27, 0x00C1
    4742:	20 91 c2 00 	lds	r18, 0x00C2
    4746:	30 91 c3 00 	lds	r19, 0x00C3
    474a:	40 91 c4 00 	lds	r20, 0x00C4
    474e:	50 91 c5 00 	lds	r21, 0x00C5
    4752:	bc 01       	movw	r22, r24
    4754:	cd 01       	movw	r24, r26
    4756:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    475a:	88 23       	and	r24, r24
    475c:	0c f0       	brlt	.+2      	; 0x4760 <ULTRASONICMODE+0x4dc>
    475e:	9c cd       	rjmp	.-1224   	; 0x4298 <ULTRASONICMODE+0x14>
			{
				Left();
    4760:	0e 94 11 1f 	call	0x3e22	; 0x3e22 <Left>
    4764:	99 cd       	rjmp	.-1230   	; 0x4298 <ULTRASONICMODE+0x14>

00004766 <SWITCH>:

	}

}
void SWITCH(void)
{
    4766:	df 93       	push	r29
    4768:	cf 93       	push	r28
    476a:	00 d0       	rcall	.+0      	; 0x476c <SWITCH+0x6>
    476c:	cd b7       	in	r28, 0x3d	; 61
    476e:	de b7       	in	r29, 0x3e	; 62
	switch(CaseFlag)
    4770:	80 91 a9 00 	lds	r24, 0x00A9
    4774:	28 2f       	mov	r18, r24
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	3a 83       	std	Y+2, r19	; 0x02
    477a:	29 83       	std	Y+1, r18	; 0x01
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	9a 81       	ldd	r25, Y+2	; 0x02
    4780:	00 97       	sbiw	r24, 0x00	; 0
    4782:	51 f0       	breq	.+20     	; 0x4798 <SWITCH+0x32>
    4784:	29 81       	ldd	r18, Y+1	; 0x01
    4786:	3a 81       	ldd	r19, Y+2	; 0x02
    4788:	21 30       	cpi	r18, 0x01	; 1
    478a:	31 05       	cpc	r19, r1
    478c:	51 f4       	brne	.+20     	; 0x47a2 <SWITCH+0x3c>
	{
	case BLUETOOTH :
	{
		CaseFlag = ULTRASONIC;
    478e:	10 92 a9 00 	sts	0x00A9, r1
		ULTRASONICMODE();
    4792:	0e 94 42 21 	call	0x4284	; 0x4284 <ULTRASONICMODE>
    4796:	05 c0       	rjmp	.+10     	; 0x47a2 <SWITCH+0x3c>
		break;
	}
	case ULTRASONIC :
	{
		CaseFlag = BLUETOOTH;
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	80 93 a9 00 	sts	0x00A9, r24
		BLUETOOTHMODE();
    479e:	0e 94 d2 20 	call	0x41a4	; 0x41a4 <BLUETOOTHMODE>
		break;
	}
	}
}
    47a2:	0f 90       	pop	r0
    47a4:	0f 90       	pop	r0
    47a6:	cf 91       	pop	r28
    47a8:	df 91       	pop	r29
    47aa:	08 95       	ret

000047ac <main>:

void main(void)
{
    47ac:	df 93       	push	r29
    47ae:	cf 93       	push	r28
    47b0:	cd b7       	in	r28, 0x3d	; 61
    47b2:	de b7       	in	r29, 0x3e	; 62
	// FOR SWITCH MODE
	DIO_voidSetPinDirection(PORT_u8B,PIN_0,PIN_IN);
    47b4:	82 e0       	ldi	r24, 0x02	; 2
    47b6:	60 e0       	ldi	r22, 0x00	; 0
    47b8:	40 e0       	ldi	r20, 0x00	; 0
    47ba:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_u8B,PIN_0,PIN_HIGH);
    47be:	82 e0       	ldi	r24, 0x02	; 2
    47c0:	60 e0       	ldi	r22, 0x00	; 0
    47c2:	41 e0       	ldi	r20, 0x01	; 1
    47c4:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	// FOR MOTOR DRIVER
	DIO_voidSetPinDirection(PORT_u8B,PIN_3,PIN_OUT);
    47c8:	82 e0       	ldi	r24, 0x02	; 2
    47ca:	63 e0       	ldi	r22, 0x03	; 3
    47cc:	41 e0       	ldi	r20, 0x01	; 1
    47ce:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8B,PIN_4,PIN_OUT);
    47d2:	82 e0       	ldi	r24, 0x02	; 2
    47d4:	64 e0       	ldi	r22, 0x04	; 4
    47d6:	41 e0       	ldi	r20, 0x01	; 1
    47d8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8B,PIN_5,PIN_OUT);
    47dc:	82 e0       	ldi	r24, 0x02	; 2
    47de:	65 e0       	ldi	r22, 0x05	; 5
    47e0:	41 e0       	ldi	r20, 0x01	; 1
    47e2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8B,PIN_6,PIN_OUT);
    47e6:	82 e0       	ldi	r24, 0x02	; 2
    47e8:	66 e0       	ldi	r22, 0x06	; 6
    47ea:	41 e0       	ldi	r20, 0x01	; 1
    47ec:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8B,PIN_7,PIN_OUT);
    47f0:	82 e0       	ldi	r24, 0x02	; 2
    47f2:	67 e0       	ldi	r22, 0x07	; 7
    47f4:	41 e0       	ldi	r20, 0x01	; 1
    47f6:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	// FOR US
	DIO_voidSetPinDirection(PORT_u8D,PIN_2,PIN_IN);
    47fa:	84 e0       	ldi	r24, 0x04	; 4
    47fc:	62 e0       	ldi	r22, 0x02	; 2
    47fe:	40 e0       	ldi	r20, 0x00	; 0
    4800:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8B,PIN_1,PIN_OUT); // TRIG
    4804:	82 e0       	ldi	r24, 0x02	; 2
    4806:	61 e0       	ldi	r22, 0x01	; 1
    4808:	41 e0       	ldi	r20, 0x01	; 1
    480a:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	// FOR SERVO
	SERVO_voidInit();
    480e:	0e 94 17 13 	call	0x262e	; 0x262e <SERVO_voidInit>
	SERVO_voidMoveToAngle(90);
    4812:	8a e5       	ldi	r24, 0x5A	; 90
    4814:	0e 94 25 13 	call	0x264a	; 0x264a <SERVO_voidMoveToAngle>
	DIO_voidSetPinValue(PORT_u8B,PIN_3,PIN_LOW);
    4818:	82 e0       	ldi	r24, 0x02	; 2
    481a:	63 e0       	ldi	r22, 0x03	; 3
    481c:	40 e0       	ldi	r20, 0x00	; 0
    481e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_4,PIN_LOW);
    4822:	82 e0       	ldi	r24, 0x02	; 2
    4824:	64 e0       	ldi	r22, 0x04	; 4
    4826:	40 e0       	ldi	r20, 0x00	; 0
    4828:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_5,PIN_LOW);
    482c:	82 e0       	ldi	r24, 0x02	; 2
    482e:	65 e0       	ldi	r22, 0x05	; 5
    4830:	40 e0       	ldi	r20, 0x00	; 0
    4832:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(PORT_u8B,PIN_6,PIN_LOW);
    4836:	82 e0       	ldi	r24, 0x02	; 2
    4838:	66 e0       	ldi	r22, 0x06	; 6
    483a:	40 e0       	ldi	r20, 0x00	; 0
    483c:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	US_voidGetDistance(PORT_u8B,PIN_1,&Global_f64ForwardTime);
    4840:	2e ea       	ldi	r18, 0xAE	; 174
    4842:	30 e0       	ldi	r19, 0x00	; 0
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	61 e0       	ldi	r22, 0x01	; 1
    4848:	a9 01       	movw	r20, r18
    484a:	0e 94 de 18 	call	0x31bc	; 0x31bc <US_voidGetDistance>
	Global_f32ForwardDistance=0.0175*Global_f64ForwardTime;
    484e:	80 91 ae 00 	lds	r24, 0x00AE
    4852:	90 91 af 00 	lds	r25, 0x00AF
    4856:	a0 91 b0 00 	lds	r26, 0x00B0
    485a:	b0 91 b1 00 	lds	r27, 0x00B1
    485e:	bc 01       	movw	r22, r24
    4860:	cd 01       	movw	r24, r26
    4862:	29 e2       	ldi	r18, 0x29	; 41
    4864:	3c e5       	ldi	r19, 0x5C	; 92
    4866:	4f e8       	ldi	r20, 0x8F	; 143
    4868:	5c e3       	ldi	r21, 0x3C	; 60
    486a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486e:	dc 01       	movw	r26, r24
    4870:	cb 01       	movw	r24, r22
    4872:	80 93 ba 00 	sts	0x00BA, r24
    4876:	90 93 bb 00 	sts	0x00BB, r25
    487a:	a0 93 bc 00 	sts	0x00BC, r26
    487e:	b0 93 bd 00 	sts	0x00BD, r27
	// for switch
	DIO_voidSetPinDirection(PORT_u8D,PIN_3,PIN_IN);
    4882:	84 e0       	ldi	r24, 0x04	; 4
    4884:	63 e0       	ldi	r22, 0x03	; 3
    4886:	40 e0       	ldi	r20, 0x00	; 0
    4888:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(PORT_u8D,PIN_3,PIN_HIGH);
    488c:	84 e0       	ldi	r24, 0x04	; 4
    488e:	63 e0       	ldi	r22, 0x03	; 3
    4890:	41 e0       	ldi	r20, 0x01	; 1
    4892:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <DIO_voidSetPinValue>
	GI_voidEnable();
    4896:	0e 94 8a 12 	call	0x2514	; 0x2514 <GI_voidEnable>
	EXTI_voidEnableDisable(INT_1,Enabled);
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	60 e0       	ldi	r22, 0x00	; 0
    489e:	0e 94 2c 10 	call	0x2058	; 0x2058 <EXTI_voidEnableDisable>
	EXTI_voidSetSenseCtrl(INT_1,falling_edge);
    48a2:	81 e0       	ldi	r24, 0x01	; 1
    48a4:	62 e0       	ldi	r22, 0x02	; 2
    48a6:	0e 94 b2 10 	call	0x2164	; 0x2164 <EXTI_voidSetSenseCtrl>
	EXTI_voidSetCallBack(INT_1,SWITCH);
    48aa:	23 eb       	ldi	r18, 0xB3	; 179
    48ac:	33 e2       	ldi	r19, 0x23	; 35
    48ae:	81 e0       	ldi	r24, 0x01	; 1
    48b0:	b9 01       	movw	r22, r18
    48b2:	0e 94 b2 11 	call	0x2364	; 0x2364 <EXTI_voidSetCallBack>
	UART_voidInit();
    48b6:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <UART_voidInit>
	// for blue module
	DIO_voidSetPinDirection(PORT_u8D,PIN_0,PIN_IN);
    48ba:	84 e0       	ldi	r24, 0x04	; 4
    48bc:	60 e0       	ldi	r22, 0x00	; 0
    48be:	40 e0       	ldi	r20, 0x00	; 0
    48c0:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8D,PIN_1,PIN_OUT);
    48c4:	84 e0       	ldi	r24, 0x04	; 4
    48c6:	61 e0       	ldi	r22, 0x01	; 1
    48c8:	41 e0       	ldi	r20, 0x01	; 1
    48ca:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	//for leds
	DIO_voidSetPinDirection(PORT_u8D,PIN_7,PIN_OUT);
    48ce:	84 e0       	ldi	r24, 0x04	; 4
    48d0:	67 e0       	ldi	r22, 0x07	; 7
    48d2:	41 e0       	ldi	r20, 0x01	; 1
    48d4:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8D,PIN_6,PIN_OUT);
    48d8:	84 e0       	ldi	r24, 0x04	; 4
    48da:	66 e0       	ldi	r22, 0x06	; 6
    48dc:	41 e0       	ldi	r20, 0x01	; 1
    48de:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8D,PIN_4,PIN_OUT);
    48e2:	84 e0       	ldi	r24, 0x04	; 4
    48e4:	64 e0       	ldi	r22, 0x04	; 4
    48e6:	41 e0       	ldi	r20, 0x01	; 1
    48e8:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8C,PIN_3,PIN_OUT);
    48ec:	83 e0       	ldi	r24, 0x03	; 3
    48ee:	63 e0       	ldi	r22, 0x03	; 3
    48f0:	41 e0       	ldi	r20, 0x01	; 1
    48f2:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8C,PIN_4,PIN_OUT);
    48f6:	83 e0       	ldi	r24, 0x03	; 3
    48f8:	64 e0       	ldi	r22, 0x04	; 4
    48fa:	41 e0       	ldi	r20, 0x01	; 1
    48fc:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	// FOR CLCD
	DIO_voidSetPortDirection(PORT_u8A,PORT_OUT);
    4900:	81 e0       	ldi	r24, 0x01	; 1
    4902:	6f ef       	ldi	r22, 0xFF	; 255
    4904:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_voidSetPortDirection>
	DIO_voidSetPinDirection(PORT_u8C,PIN_7,PIN_OUT);
    4908:	83 e0       	ldi	r24, 0x03	; 3
    490a:	67 e0       	ldi	r22, 0x07	; 7
    490c:	41 e0       	ldi	r20, 0x01	; 1
    490e:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8C,PIN_6,PIN_OUT);
    4912:	83 e0       	ldi	r24, 0x03	; 3
    4914:	66 e0       	ldi	r22, 0x06	; 6
    4916:	41 e0       	ldi	r20, 0x01	; 1
    4918:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8C,PIN_5,PIN_OUT);
    491c:	83 e0       	ldi	r24, 0x03	; 3
    491e:	65 e0       	ldi	r22, 0x05	; 5
    4920:	41 e0       	ldi	r20, 0x01	; 1
    4922:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	CLCD_voidInit();
    4926:	0e 94 0b 08 	call	0x1016	; 0x1016 <CLCD_voidInit>
	// EEPROM
	TWI_voidMasterInit(0);
    492a:	80 e0       	ldi	r24, 0x00	; 0
    492c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <TWI_voidMasterInit>
	DIO_voidSetPinDirection(PORT_u8C,PIN_0,PIN_OUT);
    4930:	83 e0       	ldi	r24, 0x03	; 3
    4932:	60 e0       	ldi	r22, 0x00	; 0
    4934:	41 e0       	ldi	r20, 0x01	; 1
    4936:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(PORT_u8C,PIN_1,PIN_OUT);
    493a:	83 e0       	ldi	r24, 0x03	; 3
    493c:	61 e0       	ldi	r22, 0x01	; 1
    493e:	41 e0       	ldi	r20, 0x01	; 1
    4940:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <DIO_voidSetPinDirection>
	SPEEDCARRIER_B=EEPROM_u8ReadDataByte(DEVICE1,60);
    4944:	80 e0       	ldi	r24, 0x00	; 0
    4946:	6c e3       	ldi	r22, 0x3C	; 60
    4948:	70 e0       	ldi	r23, 0x00	; 0
    494a:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <EEPROM_u8ReadDataByte>
    494e:	80 93 ad 00 	sts	0x00AD, r24
	OBSTECLSNUM=EEPROM_u8ReadDataByte(DEVICE1,0);
    4952:	80 e0       	ldi	r24, 0x00	; 0
    4954:	60 e0       	ldi	r22, 0x00	; 0
    4956:	70 e0       	ldi	r23, 0x00	; 0
    4958:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <EEPROM_u8ReadDataByte>
    495c:	80 93 ac 00 	sts	0x00AC, r24
	while(1)
	{
		ULTRASONICMODE();
    4960:	0e 94 42 21 	call	0x4284	; 0x4284 <ULTRASONICMODE>
    4964:	fd cf       	rjmp	.-6      	; 0x4960 <main+0x1b4>

00004966 <__mulsi3>:
    4966:	62 9f       	mul	r22, r18
    4968:	d0 01       	movw	r26, r0
    496a:	73 9f       	mul	r23, r19
    496c:	f0 01       	movw	r30, r0
    496e:	82 9f       	mul	r24, r18
    4970:	e0 0d       	add	r30, r0
    4972:	f1 1d       	adc	r31, r1
    4974:	64 9f       	mul	r22, r20
    4976:	e0 0d       	add	r30, r0
    4978:	f1 1d       	adc	r31, r1
    497a:	92 9f       	mul	r25, r18
    497c:	f0 0d       	add	r31, r0
    497e:	83 9f       	mul	r24, r19
    4980:	f0 0d       	add	r31, r0
    4982:	74 9f       	mul	r23, r20
    4984:	f0 0d       	add	r31, r0
    4986:	65 9f       	mul	r22, r21
    4988:	f0 0d       	add	r31, r0
    498a:	99 27       	eor	r25, r25
    498c:	72 9f       	mul	r23, r18
    498e:	b0 0d       	add	r27, r0
    4990:	e1 1d       	adc	r30, r1
    4992:	f9 1f       	adc	r31, r25
    4994:	63 9f       	mul	r22, r19
    4996:	b0 0d       	add	r27, r0
    4998:	e1 1d       	adc	r30, r1
    499a:	f9 1f       	adc	r31, r25
    499c:	bd 01       	movw	r22, r26
    499e:	cf 01       	movw	r24, r30
    49a0:	11 24       	eor	r1, r1
    49a2:	08 95       	ret

000049a4 <__udivmodhi4>:
    49a4:	aa 1b       	sub	r26, r26
    49a6:	bb 1b       	sub	r27, r27
    49a8:	51 e1       	ldi	r21, 0x11	; 17
    49aa:	07 c0       	rjmp	.+14     	; 0x49ba <__udivmodhi4_ep>

000049ac <__udivmodhi4_loop>:
    49ac:	aa 1f       	adc	r26, r26
    49ae:	bb 1f       	adc	r27, r27
    49b0:	a6 17       	cp	r26, r22
    49b2:	b7 07       	cpc	r27, r23
    49b4:	10 f0       	brcs	.+4      	; 0x49ba <__udivmodhi4_ep>
    49b6:	a6 1b       	sub	r26, r22
    49b8:	b7 0b       	sbc	r27, r23

000049ba <__udivmodhi4_ep>:
    49ba:	88 1f       	adc	r24, r24
    49bc:	99 1f       	adc	r25, r25
    49be:	5a 95       	dec	r21
    49c0:	a9 f7       	brne	.-22     	; 0x49ac <__udivmodhi4_loop>
    49c2:	80 95       	com	r24
    49c4:	90 95       	com	r25
    49c6:	bc 01       	movw	r22, r24
    49c8:	cd 01       	movw	r24, r26
    49ca:	08 95       	ret

000049cc <__udivmodsi4>:
    49cc:	a1 e2       	ldi	r26, 0x21	; 33
    49ce:	1a 2e       	mov	r1, r26
    49d0:	aa 1b       	sub	r26, r26
    49d2:	bb 1b       	sub	r27, r27
    49d4:	fd 01       	movw	r30, r26
    49d6:	0d c0       	rjmp	.+26     	; 0x49f2 <__udivmodsi4_ep>

000049d8 <__udivmodsi4_loop>:
    49d8:	aa 1f       	adc	r26, r26
    49da:	bb 1f       	adc	r27, r27
    49dc:	ee 1f       	adc	r30, r30
    49de:	ff 1f       	adc	r31, r31
    49e0:	a2 17       	cp	r26, r18
    49e2:	b3 07       	cpc	r27, r19
    49e4:	e4 07       	cpc	r30, r20
    49e6:	f5 07       	cpc	r31, r21
    49e8:	20 f0       	brcs	.+8      	; 0x49f2 <__udivmodsi4_ep>
    49ea:	a2 1b       	sub	r26, r18
    49ec:	b3 0b       	sbc	r27, r19
    49ee:	e4 0b       	sbc	r30, r20
    49f0:	f5 0b       	sbc	r31, r21

000049f2 <__udivmodsi4_ep>:
    49f2:	66 1f       	adc	r22, r22
    49f4:	77 1f       	adc	r23, r23
    49f6:	88 1f       	adc	r24, r24
    49f8:	99 1f       	adc	r25, r25
    49fa:	1a 94       	dec	r1
    49fc:	69 f7       	brne	.-38     	; 0x49d8 <__udivmodsi4_loop>
    49fe:	60 95       	com	r22
    4a00:	70 95       	com	r23
    4a02:	80 95       	com	r24
    4a04:	90 95       	com	r25
    4a06:	9b 01       	movw	r18, r22
    4a08:	ac 01       	movw	r20, r24
    4a0a:	bd 01       	movw	r22, r26
    4a0c:	cf 01       	movw	r24, r30
    4a0e:	08 95       	ret

00004a10 <__prologue_saves__>:
    4a10:	2f 92       	push	r2
    4a12:	3f 92       	push	r3
    4a14:	4f 92       	push	r4
    4a16:	5f 92       	push	r5
    4a18:	6f 92       	push	r6
    4a1a:	7f 92       	push	r7
    4a1c:	8f 92       	push	r8
    4a1e:	9f 92       	push	r9
    4a20:	af 92       	push	r10
    4a22:	bf 92       	push	r11
    4a24:	cf 92       	push	r12
    4a26:	df 92       	push	r13
    4a28:	ef 92       	push	r14
    4a2a:	ff 92       	push	r15
    4a2c:	0f 93       	push	r16
    4a2e:	1f 93       	push	r17
    4a30:	cf 93       	push	r28
    4a32:	df 93       	push	r29
    4a34:	cd b7       	in	r28, 0x3d	; 61
    4a36:	de b7       	in	r29, 0x3e	; 62
    4a38:	ca 1b       	sub	r28, r26
    4a3a:	db 0b       	sbc	r29, r27
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	f8 94       	cli
    4a40:	de bf       	out	0x3e, r29	; 62
    4a42:	0f be       	out	0x3f, r0	; 63
    4a44:	cd bf       	out	0x3d, r28	; 61
    4a46:	09 94       	ijmp

00004a48 <__epilogue_restores__>:
    4a48:	2a 88       	ldd	r2, Y+18	; 0x12
    4a4a:	39 88       	ldd	r3, Y+17	; 0x11
    4a4c:	48 88       	ldd	r4, Y+16	; 0x10
    4a4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a50:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a52:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a54:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a56:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a58:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a5a:	b9 84       	ldd	r11, Y+9	; 0x09
    4a5c:	c8 84       	ldd	r12, Y+8	; 0x08
    4a5e:	df 80       	ldd	r13, Y+7	; 0x07
    4a60:	ee 80       	ldd	r14, Y+6	; 0x06
    4a62:	fd 80       	ldd	r15, Y+5	; 0x05
    4a64:	0c 81       	ldd	r16, Y+4	; 0x04
    4a66:	1b 81       	ldd	r17, Y+3	; 0x03
    4a68:	aa 81       	ldd	r26, Y+2	; 0x02
    4a6a:	b9 81       	ldd	r27, Y+1	; 0x01
    4a6c:	ce 0f       	add	r28, r30
    4a6e:	d1 1d       	adc	r29, r1
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	f8 94       	cli
    4a74:	de bf       	out	0x3e, r29	; 62
    4a76:	0f be       	out	0x3f, r0	; 63
    4a78:	cd bf       	out	0x3d, r28	; 61
    4a7a:	ed 01       	movw	r28, r26
    4a7c:	08 95       	ret

00004a7e <_exit>:
    4a7e:	f8 94       	cli

00004a80 <__stop_program>:
    4a80:	ff cf       	rjmp	.-2      	; 0x4a80 <__stop_program>
